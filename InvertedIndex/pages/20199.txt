https://en.wikipedia.org/wiki/REXX




Rexx - Wikipedia



































Jump to content







Main menu





Main menu
move to sidebar
hide



		Navigation
	


Main pageContentsCurrent eventsRandom articleAbout WikipediaContact us





		Contribute
	


HelpLearn to editCommunity portalRecent changesUpload fileSpecial pages



















Search











Search






















Appearance
















Donate

Create account

Log in








Personal tools





Donate Create account Log in





		Pages for logged out editors learn more



ContributionsTalk




























Contents
move to sidebar
hide




(Top)





1
Name








2
Attributes








3
History




Toggle History subsection





3.1
pre–1990








3.2
1990 to present










4
Toolkits








5
Syntax




Toggle Syntax subsection





5.1
Types of statement








5.2
DO blocks






5.2.1
Simple do








5.2.2
Conditional loop








5.2.3
Simple repetitive loop








5.2.4
Controlled Repetitive Loops








5.2.5
Unconditional loop








5.2.6
Combined loop










5.3
Conditional








5.4
Multiple condition branching








5.5
Variable






5.5.1
Typing system








5.5.2
Evaluation








5.5.3
Compound variable










5.6
Parse






5.6.1
Examples










5.7
Interpret








5.8
Numeric








5.9
Error handling










6
See also








7
Notes








8
References








9
Further reading








10
External links


















Toggle the table of contents







Rexx



27 languages




العربيةAzərbaycancaCatalàDanskDeutschEspañolEuskaraFrançais한국어ՀայերենÍslenskaItalianoעבריתMagyarNederlands日本語Norsk bokmålPolskiPortuguêsРусскийSlovenščinaSuomiSvenskaТоҷикӣTürkçeУкраїнська中文

Edit links











ArticleTalk





English

















ReadEditView history







Tools





Tools
move to sidebar
hide



		Actions
	


ReadEditView history





		General
	


What links hereRelated changesUpload filePermanent linkPage informationCite this pageGet shortened URLDownload QR code





		Print/export
	


Download as PDFPrintable version





		In other projects
	


Wikimedia CommonsWikidata item





















Appearance
move to sidebar
hide










From Wikipedia, the free encyclopedia

(Redirected from REXX)
A programming language used for scripting, application macros and application development
This article is about classic Rexx. For oRexx and ooRexx, see Object Rexx.


This article contains instructions, advice, or how-to content. Please help rewrite the content so that it is more encyclopedic or move it to Wikiversity, Wikibooks, or Wikivoyage. (September 2022)
This article contains a list of miscellaneous information. Please relocate any relevant information into other sections or articles. (September 2022)
RexxParadigmmultiparadigm: procedural, structuredDesigned byMike CowlishawDeveloperMike Cowlishaw, IBMFirst appeared1979; 46 years ago (1979)Stable releaseANSI X3.274
   / 1996; 29 years ago (1996)
Typing disciplineDynamicFilename extensions.cmd, .bat, .exec, .rexx, .rex, EXECMajor implementationsVM/SP R3,[1] TSO/E V2,[2] SAAREXX,[3][4] ARexx, BREXX, Regina,[5] Personal REXX, REXX/imcDialectsNetRexx, Object REXX, now ooREXX, KEXXInfluenced byPL/I, ALGOL, EXEC, EXEC 2InfluencedNetRexx, Object REXX
 Rexx Programming at Wikibooks

Rexx (restructured extended executor) is a high-level programming language developed at IBM by Mike Cowlishaw.[6][7] Both proprietary and open source Rexx interpreters exist for a wide range of computing platforms, and compilers exist for IBM mainframe computers.[8] Rexx is used for scripting, application macros and application development. As a general purpose scripting language, Rexx is considered a precursor to Tcl and Python.
Rexx is supported in a variety of environments. It is the primary scripting language in some operating systems including OS/2, MVS, VM, AmigaOS and is used for macros in some software including SPF/PC, KEDIT, THE and ZOC. With an engine installed, Rexx can be used for scripting and macros in programs that use a Windows Scripting Host ActiveX scripting engine (such as VBScript or JScript). Rexx is supplied with VM/SP Release 3 on up, TSO/E Version 2 on up, OS/2 (1.3 and later, where it is officially named Procedures Language/2), AmigaOS Version 2 on up, PC DOS (7.0 or 2000), ArcaOS,[9] and Windows NT 4.0 (Resource Kit: Regina). In the late 1980s, Rexx became the common scripting language for IBM Systems Application Architecture, where it was renamed "SAA Procedure Language REXX".
A script is associated with a Rexx interpreter at runtime in various ways based on context. In mainframe computing, a Rexx script or command is sometimes referred to as an EXEC since that is the name of the file type used for similar CMS EXEC,[10] and EXEC 2[11] scripts and for Rexx scripts on VM/SP R3 through z/VM. The first line of a script specifies the use of a Rexx interpreter in a comment either by identifying the code as Rexx language or by file path via EXTPROC. On MVS, Rexx scripts may[a] be recognized by the low level qualifier "EXEC" or if the first line fetched from SYSPROC is a comment containing "REXX" then it is treated as Rexx (rather than CLIST), and a script fetched from SYSEXEC must be Rexx. On OS/2, Rexx scripts share the filename extension ".cmd" with other scripting languages, and the first line of the script specifies the interpreter to use. On Linux, Rexx scripts generally begin with a shebang. Rexx macros for Rexx-aware applications use extensions determined by the application.


Name[edit]
Originally, the language was called REX, short for Reformed Executor, but an extra "X" was added to avoid confusion with other products. The name was originally all uppercase because that was the only way to represent it in mainframe code at the time. Both editions of Mike Cowlishaw's first book on the language use all-caps, REXX, although the cover graphic uses mixed case. His book on NetRexx uses mixed case but all caps in the cover graphic with large and small caps, NETREXX. An expansion that matches the abbreviation, REstructured eXtended eXecutor, was used for the system product in 1984.[12] The name Rexx (mixed case) is used in this article, and is commonly used elsewhere.

Attributes[edit]
Objective and subjective attributes of Rexx include:

Simple syntax
Ability to route commands to multiple environments
Ability to support functions, procedures and commands associated with a specific invoking environment.
Built-in stack with the ability to interoperate with the host stack if there is one
Small instruction set
Free-form syntax; indentation is optional but can help readability
Case-insensitive tokens, including variable names
Character string basis
Dynamic data typing; no declarations
No reserved keywords, except in local context
No include file facility
Arbitrary-precision arithmetic
Decimal arithmetic, floating-point
Rich selection of built-in functions, especially string and word processing
Automatic storage management
Crash protection
Content addressable data structures
Associative array
Straightforward access to system commands and facilities
Simple error-handling, and built-in tracing and debugger
Few artificial limitations
Simplified I/O facilities
Unconventional operators
Only partly supports Unix style command line parameters, except specific implementations
Provides no basic terminal control as part of the language, except specific implementations
Provides no generic way to include functions and subroutines from external libraries, except specific implementations
Some claim that Rexx is a relatively simple language. With only 23 instructions (such as call, parse, and select), it has a relatively small instruction set. Rexx has limited punctuation and formatting requirements. Rexx has only one data type, the character string. Some claim that such simplicities make Rexx relatively easy to debug.
Some claim that Rexx code looks similar to PL/I code, but has fewer notations. With fewer notations, it tends to be is harder to parse via a translator, but is easier to write. Simplifying coding was intentional as noted by the Rexx design goal of the principle of least astonishment.[12]

History[edit]
pre–1990[edit]
On his own time, Mike Cowlishaw developed the language and an interpreter for it in assembly language between 20 March 1979 and mid-1982 with the intent to replace the languages EXEC and EXEC 2.[6] Mike also intended Rexx to be a simplified and easier to learn version of PL/I, but some claim that Rexx has problematic differences from PL/I.
Rexx was first described in public at the SHARE 56 conference in Houston, Texas, in 1981,[13] where customer reaction, championed by Ted Johnston of SLAC, led to it being shipped as an IBM product in 1982.
Over the years IBM included Rexx in almost all of its operating systems (VM/CMS, MVS TSO/E, IBM OS/400, VSE/ESA, MUSIC/SP, AIX, PC DOS, and OS/2), and has made versions available for Novell NetWare, Windows, Java, and Linux.
The first non-IBM version was written for PC DOS by Charles Daney in 1984/5[7] and marketed by the Mansfield Software Group (founded by Kevin J. Kearney in 1986).[6] The first Rexx compiler appeared in 1987, written for CMS by Lundin and Woodruff.[14] Other versions have also been developed for Atari, AmigaOS, Unix (many variants), Solaris, DEC, Windows, Windows CE, Pocket PC, DOS, Palm OS, QNX, OS/2, Linux, BeOS, EPOC32/Symbian, AtheOS, OpenVMS,[15]: p.309  Apple Macintosh, and Mac OS X.[16]
ARexx, a Rexx interpreter for Amiga, was included with AmigaOS 2 onwards and was popular for scripting and application control. Many Amiga applications have an "ARexx port" which allows control of the application via a Rexx script. Notably, a Rexx script can switch between Rexx ports to control multiple applications.

1990 to present[edit]
In 1990, Cathie Dager of SLAC organized the first independent Rexx symposium, which led to the forming of the Rexx Language Association. Symposia are held annually.
Several freeware versions of Rexx are available. In 1992, the two most widely used open-source ports appeared: Ian Collier's REXX/imc for Unix and Anders Christensen's Regina[5] (later adopted by Mark Hessling) for Windows and Unix. BREXX is well known for WinCE and Pocket PC platforms, and has been "back-ported" to VM/370 and MVS.
OS/2 has a visual development system from Watcom VX-REXX. Another dialect was VisPro REXX from Hockware.
Portable Rexx by Kilowatt and Personal Rexx by Quercus are two Rexx interpreters designed for DOS and can be run under Windows as well using a command prompt. Since the mid-1990s, two newer variants of Rexx have appeared:

NetRexx: compiles to Java byte-code via Java source code; this has no reserved keywords at all, and uses the Java object model, and is therefore not generally upwards-compatible with 'classic' Rexx.
Object REXX: an object-oriented generally upwards-compatible version of Rexx.
In 1996 American National Standards Institute (ANSI) published a standard for Rexx: ANSI X3.274–1996 "Information Technology – Programming Language REXX".[17] More than two dozen books on Rexx have been published since 1985.
Rexx marked its 25th anniversary on 20 March 2004, which was celebrated at the Rexx Language Association's 15th International REXX Symposium in Böblingen, Germany, in May 2004.
On October 12, 2004, IBM announced their plan to release their Object REXX implementation's sources under the Common Public License. Recent releases of Object REXX contain an ActiveX Windows Scripting Host (WSH) scripting engine implementing this version of the Rexx language.
On February 22, 2005, the first public release of Open Object Rexx (ooRexx) was announced. This product contains a WSH scripting engine which allows for programming of the Windows operating system and applications with Rexx in the same fashion in which Visual Basic and JScript are implemented by the default WSH installation and Perl, Tcl, Python third-party scripting engines.
As of January 2017[update] Rexx was listed in the TIOBE index as one of the fifty languages in its top 100 not belonging to the top 50.[18]
In 2019, the 30th Rexx Language Association Symposium marked the 40th anniversary of Rexx. The symposium was held in Hursley, England, where Rexx was first designed and implemented.[19]

Toolkits[edit]
RexxUtil – a package of file and directory functions, windowed I/O, and functions to access system services such as WAIT and POST – is available for most Rexx environments.[20][21][22]
Rexx/Tk – a toolkit for graphics to be used in Rexx programmes in the same fashion as Tcl/Tk – is widely available.
RxxxEd – an integrated development environment (IDE) for Rexx – was developed for Windows.[15][citation needed] RxSock for network communication as well as other add-ons to and implementations of Regina Rexx have been developed, and a Rexx interpreter for the Windows command line is supplied in most resource kits for various versions of Windows and works in DOS as well.

Syntax[edit]
This section contains instructions, advice, or how-to content. Please help rewrite the content so that it is more encyclopedic or move it to Wikiversity, Wikibooks, or Wikivoyage. (December 2012)
Types of statement[edit]
Rexx has three types of statement

Assignment statement
Evauate an expression and assign its value to a simple or compound variable
Expression
Evaluate the expression and treat the value as a command in the default environment[23]
address foo /* set default environment for bare expression */
bar /* equivalent to address foo bar */

Keyword instruction
Begins with a specific word
DO blocks[edit]
The language provides do blocks for two purposes:

To treat a group of instructions within an if or select statement as a unit for purposes of flow control.
For loop control, similar to many other languages. A single do block may optionally contain repetitor phrases, conditional phrases, or both, with termination whenever any of them is satisfied.
A do block begins with do and ends with end. A single block may serve both purposes. In the related ooRexx and NetRexx, there is both a  do and a loop keyword, with almost identical semantics; they differ in that a simple do is equivalent to do 1 while a simple  loop is equivalent to loop forever.
Unlike the begin statement in ALGOL 60 and PL/I, a do block has no effect on the Scope of variables.
An iteration of a do block may be terminated with an iterate statement and the entire block may be terminated with a leave statement.

Simple do[edit]
Although it is valid anywhere, a simple do is specifically useful inside conditional statements:

 if foo = bar
 then
   do
     i=1
     j=3
   end
 else
   do
     i=2
     j=4
   end

Conditional loop[edit]
The language supports testing a condition either before (do while) or after (do until) executing a block of code via syntax:

do while [condition]
  [instructions]
end

do until [condition]
  [instructions]
end

Simple repetitive loop[edit]
The language permits counted loops, where an expression is computed at the start of the loop and the instructions within the loop are executed that many times:

do expression
  [instructions]
end

Controlled Repetitive Loops[edit]
A loop can increment a variable and stop when a limit is reached.

do index = start [to limit] [by increment] [for count]
  [instructions]
end

The increment value is 1 if the by clause is omitted. The loop continues forever if the limit to clause is omitted, unless terminated earlier by another clause or by a leave statement.

Unconditional loop[edit]
The language supports an unconditional loop via forever that continues until the loop is aborted or the program is terminated.

do forever
  [instructions]
end

Combined loop[edit]
Like PL/I, Rexx allows both conditional and repetitive elements to be combined in the same loop:[24]

do index = start [to limit] [by increment] [for count] [while condition]
  [instructions]
end

do expression [until condition]
  [instructions]
end

Conditional[edit]
The language provides for conditional execution via if, then and else for a block delimited by do and end.

if [condition] then
  do
  [instructions]
  end
else
  do
  [instructions]
  end

For a single instruction block, do and end can be omitted.

if [condition] then
  [instruction]
else
  [instruction]

Multiple condition branching[edit]
The language provides multiple condition branching via select which derives from the SELECT; form of the PL/I SELECT statement
.[b] Like similar constructs in other dynamic languages, Rexx's when clauses specify full conditions – not equality tests of a single value for the statement as some languages do. In that, they are more like cascading if-then-else code than like the C or Java switch statement.

select
  when [condition] then
    [instruction or nop]
  when [condition] then
    do
    [instructions or nop]
    end
  otherwise
    [instructions or nop]
end

The nop instruction is required if no action is associated with a when condition.
The otherwise clause is optional. If omitted and no when conditions are met, then the syntax condition is raised.

Variable[edit]
Typing system[edit]
Variables are typeless and initially are evaluated as their names in upper case. Thus a variable's type can vary with its use in the program:

say hello /* => HELLO */
hello = 25
say hello /* => 25 */
hello = "say 5 + 3"
say hello /* => say 5 + 3 */
interpret hello /* => 8 */
drop hello
say hello /* => HELLO */

Evaluation[edit]
If no novalue condition handler is configured, then an undefined variable evaluates to its name, in upper case. The built-in function SYMBOL returns "VAR" for a defined variable and does not trigger novalue even if not defined. The VALUE function gets the value of a variable without triggering a novalue condition, but its main purpose is to read and set environment variables, similar to POSIX getenv and putenv.

Compound variable[edit]
The language provides the compound variable construct which supports adding fields (called tails) to a variable (called a stem in this context) to support data structures such as lists, arrays, n-dimensional arrays, sparse or dense arrays, balanced or unbalanced trees and records.
The language does not provide special support for numeric array indexing like many other languages do. Instead, a compound variable with numeric tails produce a similar effect.[25]
The following code defines variables stem.1 = 9, stem.2 = 8, stem.3 = 7...

do i = 1 to 10
  stem.i = 10 - i
end

Unlike a typical array, a tail (index) need not identify (be named) an integer value. For example, the following code is valid:

i = 'Monday'
stem.i = 2

A default value can be assigned to a stem via . but no tail.

stem. = 'Unknown'
stem.1 = 'USA'
stem.44 = 'UK'
stem.33 = 'France'

In this case stem.3, for example, evaluates to the default value, 'Unknown'.
The whole stem (including any default value) can be erased with the drop statement.

drop stem.

By convention (not part of the language) the compound stem.0 is often used to keep track of how many items are in a stem, for example a procedure to add a word to a list might be coded like this:

add_word: procedure expose dictionary.
  parse arg w
  n = dictionary.0 + 1
  dictionary.n = w
  dictionary.0 = n
return

A stem can have multiple tails. For example:

m = 'July'
d = 15
y = 2005
day.y.m.d = 'Friday'

Multiple numerical tail elements can be used to provide the effect of a multi-dimensional array.
Features similar to the compound variable are found in other languages including associative arrays in AWK, hashes in Perl and hash tables in Java, dynamic objects in JavaScript. Most of these languages provide a mechanism to iterate over the keys (tails) of such a construct, but this is lacking in classic Rexx. Instead, it is necessary to store additional information. For example, the following procedure might be used to count each occurrence of a word.

add_word: procedure expose count. word_list
  parse arg w .
  count.w = count.w + 1 /* assume count. has been set to 0 */
  if count.w = 1 then word_list = word_list w
return

and then later:

do i = 1 to words(word_list)
  w = word(word_list,i)
  say w count.w
end

More recent Rexx variants, including Object REXX and ooRexx, provide a construct to iterate over the tails of a stem.

do i over stem.
  say i '-->' stem.i
end

Parse[edit]
The parse instruction provides string-handling via syntax:

parse [upper] origin [template]

If upper is included then the input is converted to upper case before parsing.
origin describes the input as one of the following:

arg – arguments, at top level tail of command line
linein – standard input, e.g. keyboard
pull – Rexx data queue or standard input
source – info on how program was executed
value expression with – with indicates the end of the expression
var – a variable
version – version/release number
template can be a combination of variables, literal delimiters, and column number delimiters.

Examples[edit]
Using a list of variables as template:

myVar = "John Smith"
parse var myVar firstName lastName
say "First name is:" firstName
say "Last name is:" lastName

displays:

First name is: John
Last name is: Smith

Using column number delimiters:

myVar = "(202) 123-1234"
parse var MyVar 2 AreaCode 5 7 SubNumber
say "Area code is:" AreaCode
say "Subscriber number is:" SubNumber

displays:

Area code is: 202
Subscriber number is: 123-1234

Interpret[edit]
The interpret instruction evaluates its argument as a Rexx statement allowing for evaluation of code formatted at runtime. Uses include passing a function as a parameter, arbitrary precision arithmetic, use of the parse statement with programmatic templates, stemmed arrays, and sparse arrays.[how?] The following example displays 16 and exits.

X = 'square'
interpret 'say' X || '(4) ; exit'
SQUARE: return arg(1)**2

The Valour software package relied upon Rexx's interpretive ability to implement an OOP environment.[citation needed] Another use was found in an unreleased Westinghouse product called Time Machine that was able to fully recover following an otherwise fatal error.[citation needed]

Numeric[edit]
say digits() fuzz() form() /* => 9 0 SCIENTIFIC */
say 999999999+1 /* => 1.000000000E+9 */
numeric digits 10 /* only limited by available memory */
say 999999999+1 /* => 1000000000 */

say 0.9999999999=1 /* => 0 (false) */
numeric fuzz 3
say 0.99999999=1 /* => 1 (true) */
say 0.99999999==1 /* => 0 (false) */

say 100*123456789 /* => 1.23456789E+10 */
numeric form engineering
say 100*123456789 /* => 12.34567890E+9 */

say 53 // 7   /* => 4   (rest of division)*/

Calculate √2
numeric digits 50
n=2
r=1
do forever /* Newton's method */
  rr=(n/r+r)/2
  if r=rr then leave
  r=rr
end
say "sqrt" n ' = ' r

sqrt 2 = 1.414213562373095048801688724209698078569671875377

Calculate e
numeric digits 50
e=2.5
f=0.5
do n=3
  f=f/n
  ee=e+f
  if e=ee then leave
  e=ee
end
say "e =" e

e = 2.7182818284590452353602874713526624977572470936998

Error handling[edit]
The signal instruction configures the runtime to run custom code to handle a system condition if triggered. Conditions include:

error – Positive return code from a system command
failure – Negative return code from a system command (e.g. command doesn't exist)
halt – Abnormal termination
novalue – A variable name was used but the variable is not defined
notready – Input or output error (e.g. read attempts beyond end of file)
syntax – Invalid program syntax, or some other error condition
lostdigits – Significant digits were lost (ANSI Rexx, not in TRL second edition)
The following fragment prints a message when the user terminates (halts) it:

signal on halt;
do a = 1
  say a
  do 100000 /* a delay */
  end
end
halt:
say "The program was stopped by the user"
exit

Since Rexx version 4, a handler can be named. In the following example, the handler ChangeCodePage.Trap is configured to handle a syntax condition.

ChangeCodePage: procedure
  signal on syntax name ChangeCodePage.Trap
return SysQueryProcessCodePage()

ChangeCodePage.Trap: return 1004

When a condition is handled (as configured via signal on), the condition can be analyzed via RC  which indicates the last error code and SIGL which indicates the line number of the code that triggered the condition.

See also[edit]

Free and open-source software portal
ISPF
XEDIT
Comparison of computer shells
Comparison of programming languages
Notes[edit]


^ The TSO EXEC command with an unqualified dataset name, and neither the CLIST nor EXEC option, examines the low level qualifier for "EXEC".

^ Rexx has no equivalent to the SELECT (expression); form.


References[edit]


^ Virtual Machine/System Product - System Product - Interpreter Reference - Release 3 (PDF) (First ed.). IBM. September 1983. SC24-5239-0. Retrieved November 6, 2024.

^ TSO Extensions Version 2 - Procedures Language MVS/REXX Reference (PDF) (Fifth ed.). IBM. August 1991. SC28-1883-4. Retrieved November 6, 2024.

^ "Procedures Language". Systems Application Architecture - An Overview (PDF) (First ed.). IBM. May 1987. p. 40. GC26-4341-0. Retrieved November 6, 2024.

^ Procdeures Language/2 - REXX Reference - Version 2.00 (PDF). OS/2 2.00 - Technical Library (First ed.). IBM. December 1991. S10G-6268-00. Retrieved November 6, 2024.

^ a b Mark Hessling (October 25, 2012). "Regina Rexx Interpreter". SourceForge project regina-rexx. Retrieved February 10, 2014.

^ a b c M. F. Cowlishaw. "IBM REXX Brief History". IBM. Retrieved August 15, 2006.

^ a b Melinda Varian. "REXX Symposium, May 1995".

^ "Catalog of All Documents (filter=rexx)". IBM library server. 2005. Archived from the original on February 15, 2013. Retrieved February 10, 2014.

^ "Does ArcaOS include REXX support?". Retrieved September 3, 2020.

^ IBM Virtual Machine Facility /370: EXEC User's Guide (PDF) (Second ed.). International Business Machines Corporation. April 1975. GC20-1812-1.

^ EXEC 2 Reference (PDF) (Second ed.). International Business Machines Corporation. April 1982. p. 92. SC24-5219-1. Archived from the original (PDF) on April 2, 2020. Retrieved March 28, 2019.

^ a b M. F. Cowlishaw (1984). "The design of the REXX language" (PDF). IBM Systems Journal (PDF). 23 (4). IBM Research: 333. doi:10.1147/sj.234.0326. Retrieved January 23, 2014. Could there be a high astonishment factor associated with the new feature? If a feature is accidentally misapplied by the user and causes what appears to him to be an unpredictable result, that feature has a high astonishment factor and is therefore undesirable. If a necessary feature has a high astonishment factor, it may be necessary to redesign the feature.

^ M. F. Cowlishaw (February 18, 1981). "REX -- A Command Programming Language". SHARE. Retrieved August 15, 2006.

^ Lundin, Leigh; Woodruff, Mark (April 23, 1987). "T/REXX, a REXX compiler for CMS". U.S. Copyright Office (TXu000295377). Washington, DC: Independent Intelligence Incorporated. Archived from the original on March 3, 2016. Retrieved February 20, 2010.

^ a b Howard Fosdick (2025). Rexx Programmer's Reference (2nd ed.). Wiley Publishing. p. 390. ISBN 978-9-40374-552-7.

^ "Rexx Implementations". RexxLA. Archived from the original on September 24, 2006. Retrieved August 15, 2006.

^ While ANSI INCITS 274-1996/AMD1-2000 (R2001) and ANSI INCITS 274-1996 (R2007) are chargeable, a free draft can be downloaded: "American National Standard for Information Systems – Programming Language REXX" (PDF). X3J18-199X.

^ "The Next 50 Programming Languages". TIOBE index. tiobe.com. 2017. Archived from the original on January 19, 2017. Retrieved January 10, 2017.

^ "RexxLA - Symposium Schedule".

^ "Chapter 8. Rexx Utilities (RexxUtil)". Open Object Rexx. Retrieved October 13, 2023.

^ "REXX Tips & Tricks:REXXUTIL functions". EDM2: The Electronic Developer Magazine for OS/2. Retrieved October 14, 2023.

^ "Regina Rexx Interpreter". Sourceforge. Retrieved October 14, 2023.

^ Cowlishaw, Michael (1990). "Section 2: Summary of the REXX Language" (PDF). The REXX Language - A Practical Approach to Programming (PDF) (Second ed.). Prentice Hall. p. 5. ISBN 0137806515. LCCN 89071130. Retrieved January 17, 2025. A variety of internal and external calling mechanisms are defined. The most primitive is the command (which is quite similar to a message in the Smalltalk-80 system and in other object-oriented systems), in which a clause that consists of just an expression is evaluated. The resulting string of characters is passed to the currently selected external environment, which might be an operating system, an editor, or any other functional object. This ability to send commands to different environments is a primary concept of the language and is especially important when REXX is used as a "macro" language for extending applications.

^ M. F. Cowlishaw (1990). The Rexx Language - A Practical Approach to Programming (2nd ed.). Prentice Hall. ISBN 0-13-780651-5.

^ "How to Code Arrays and Other Data Structures In Rexx" (PDF).


Further reading[edit]

Callaway, Merrill. The ARexx Cookbook: A Tutorial Guide to the ARexx Language on the Commodore Amiga Personal Computer. Whitestone, 1992. ISBN 978-0963277305.
Callaway, Merrill. The Rexx Cookbook: A Tutorial Guide to the Rexx Language in OS/2 & Warp on the IBM Personal Computer. Whitestone, 1995. ISBN 0-9632773-4-0.
Cowlishaw, Michael. The Rexx Language: A Practical Approach to Programming. Prentice Hall, 1990. ISBN 0-13-780651-5.
Cowlishaw, Michael. The NetRexx Language. Prentice Hall, 1997. ISBN 0-13-806332-X.
Daney, Charles. Programming in REXX. McGraw-Hill, TX, 1990. ISBN 0-07-015305-1.
Ender, Tom. Object-Oriented Programming With Rexx. John Wiley & Sons, 1997. ISBN 0-471-11844-3.
Fosdick, Howard. Rexx Programmer's Reference, 2nd Edition. Wiley/Wrox, 2005. ISBN 979-898611913-7.
Gargiulo, Gabriel. REXX with OS/2, TSO, & CMS Features. MVS Training, 1999 (third edition 2004). ISBN 1-892559-03-X.
Goldberg, Gabriel and Smith, Philip H. The Rexx Handbook . McGraw-Hill, TX, 1992. ISBN 0-07-023682-8.
Goran, Richard K. REXX Reference Summary Handbook. CFS Nevada, Inc.,1997. ISBN 0-9639854-3-4.
IBM Redbooks. Implementing Rexx Support in Sdsf. Vervante, 2007. ISBN 0-7384-8914-X.
Kiesel, Peter C. Rexx: Advanced Techniques for Programmers. McGraw-Hill, TX, 1992. ISBN 0-07-034600-3.
Marco, Lou ISPF/REXX Development for Experienced Programmers. CBM Books, 1995. ISBN 1-878956-50-7
O'Hara, Robert P. and Gomberg, David Roos. Modern Programming Using Rexx. Prentice Hall, 1988. ISBN 0-13-597329-5.
Rudd, Anthony S. 'Practical Usage of TSO REXX'. CreateSpace, 2012. ISBN 978-1475097559.
Schindler, William. Down to Earth Rexx. Perfect Niche Software, 2000. ISBN 0-9677590-0-5.

External links[edit]



Wikimedia Commons has media related to REXX (programming language).

Mike Cowlishaw's home page
Rexx Language Association
Rexxinfo.org
The Rexx Language (Background)
REXX programming language language reference at IBM
Rexx Programmer's Reference 2nd Edition
vteIBM free and open-source software (FOSS)SoftwareProgramming languages
EGL
NetRexx
Object REXX
Rexx
X10
Frameworks anddevelopment tools
Carbon Design System
CGIDEV2
Derby
Eclipse
Eclipse Che
HElib
Kitura
Node-RED
OpenAFS
OpenJ9
Postfix
Qiskit
STAF
Operating systems
K42
Red Hat Enterprise Linux
Licenses
Common Public License
IBM Public License
Related
Eclipse Foundation (Eclipse)
Fedora Project (Fedora Linux)
Linux on IBM Z
Linux Technology Center
Open Invention Network
Open Mainframe Project
OpenPOWER Foundation
Open Source Security Foundation
PowerLinux
SHARE

vteProgramming languages
Comparison
Timeline
History

Ada
ALGOL
Simula
APL
Assembly
BASIC
Visual Basic
classic
.NET
C
C++
C#
COBOL
Erlang
Elixir
Forth
Fortran
Go
Haskell
Java
JavaScript
Julia
Kotlin
Lisp
Lua
MATLAB
ML
Caml 
OCaml
Pascal
Object Pascal
Perl 
Raku
PHP
Prolog
Python
R
Ruby
Rust
SAS
SQL
Scratch
Shell
Smalltalk
Swift
more...

 Lists: Alphabetical
Categorical
Generational
Non-English-based
 Category

Portal: Computer programming
Authority control databases: National GermanyUnited StatesIsrael




Retrieved from "https://en.wikipedia.org/w/index.php?title=Rexx&oldid=1287489861"
Categories: IBM softwareScripting languagesText-oriented programming languagesCommand shellsIBM mainframe operating systemsCross-platform softwareProgramming languages created in 1979RexxHidden categories: Articles with short descriptionShort description is different from WikidataUse mdy dates from May 2021Use American English from May 2021All Wikipedia articles written in American EnglishArticles needing cleanup from September 2022All pages needing cleanupArticles containing how-to sectionsArticles with trivia sections from September 2022All articles with trivia sectionsArticles containing potentially dated statements from January 2017All articles containing potentially dated statementsAll articles with unsourced statementsArticles with unsourced statements from February 2025Articles needing cleanup from December 2012Wikipedia articles needing clarification from January 2021Articles with unsourced statements from January 2025Commons category link is on Wikidata






 This page was last edited on 26 April 2025, at 16:08 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike 4.0 License;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.


Privacy policy
About Wikipedia
Disclaimers
Contact Wikipedia
Code of Conduct
Developers
Statistics
Cookie statement
Mobile view














Search













Search









Toggle the table of contents







Rexx




























27 languages


Add topic
















