https://en.wikipedia.org/wiki/Software_documentation




Software documentation - Wikipedia



























Jump to content







Main menu





Main menu
move to sidebar
hide



		Navigation
	


Main pageContentsCurrent eventsRandom articleAbout WikipediaContact us





		Contribute
	


HelpLearn to editCommunity portalRecent changesUpload fileSpecial pages



















Search











Search






















Appearance
















Donate

Create account

Log in








Personal tools





Donate Create account Log in





		Pages for logged out editors learn more



ContributionsTalk




























Contents
move to sidebar
hide




(Top)





1
Types




Toggle Types subsection





1.1
Requirements documentation








1.2
Architecture design documentation








1.3
Technical documentation






1.3.1
Technical documentation embedded in source code






1.3.1.1
Literate programming








1.3.1.2
Elucidative programming












1.4
User documentation






1.4.1
Composing user documentation










1.5
Marketing documentation










2
Documentation and agile development controversy




Toggle Documentation and agile development controversy subsection





2.1
Docs as Code






2.1.1
Benefits of Docs as Code












3
See also








4
Notes


















Toggle the table of contents







Software documentation



17 languages




العربيةČeštinaDeutschفارسیFrançais한국어HrvatskiIdoItalianoҚазақшаമലയാളം日本語PolskiPortuguêsРусскийУкраїнська中文

Edit links











ArticleTalk





English

















ReadEditView history







Tools





Tools
move to sidebar
hide



		Actions
	


ReadEditView history





		General
	


What links hereRelated changesUpload filePermanent linkPage informationCite this pageGet shortened URLDownload QR code





		Print/export
	


Download as PDFPrintable version





		In other projects
	


Wikimedia CommonsWikidata item





















Appearance
move to sidebar
hide










From Wikipedia, the free encyclopedia


Explains the functionality of software
This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed.Find sources: "Software documentation" – news · newspapers · books · scholar · JSTOR (March 2013) (Learn how and when to remove this message)
Part of a series onSoftware development
Core activities
Data modeling
Processes
Requirements
Design
Construction
Engineering
Testing
Debugging
Deployment
Maintenance

Paradigms and models
Agile
Cleanroom
Incremental
Prototyping
Spiral
V model
Waterfall

Methodologies and frameworks
ASD
DAD
DevOps
DSDM
FDD
IID
Kanban
Lean SD
LeSS
MDD
MSF
PSP
RAD
RUP
SAFe
Scrum
SEMAT
TDD
TSP
UP
XP

Supporting disciplines
Configuration management
Deployment management
Documentation
Project management
Quality assurance
User experience

Practices
ATDD
BDD
CCO
CD
CI
DDD
PP
SBE
Stand-up
TDD

Tools
Build automation
Compiler
Debugger
GUI builder
IDE
Infrastructure as code
Profiler
Release automation
UML Modeling

Standards and bodies of knowledge
CMMI
IEEE standards
IREB
ISO 9001
ISO/IEC standards
ITIL
OMG
PMBOK
SWEBOK

Glossaries
Artificial intelligence
Computer science
Electrical and electronics engineering

Outlines
Outline of software development
vte
Software documentation is written text or illustration that accompanies computer software or is embedded in the source code.  The documentation either explains how the software operates or how to use it, and may mean different things to people in different roles.
Documentation is an important part of software engineering. Types of documentation include:

Requirements – Statements that identify attributes, capabilities, characteristics, or qualities of a system.  This is the foundation for what will be or has been implemented.
Architecture/Design – Overview of software. Includes relations to an environment and construction principles to be used in design of software components.
Technical – Documentation of code, algorithms, interfaces, and APIs.
End user – Manuals for the end-user, system administrators and support staff.
Marketing – How to market the product and analysis of the market demand.

Types[edit]
Requirements documentation[edit]
Requirements documentation is the description of what a particular software does or should do. It is used throughout development to communicate how the software functions or how it is intended to operate. It is also used as an agreement or as the foundation for agreement on what the software will do. Requirements are produced and consumed by everyone involved in the production of software, including: end users, customers, project managers, sales, marketing, software architects, usability engineers, interaction designers, developers, and testers.
Requirements come in a variety of styles, notations and formality. Requirements can be goal-like (e.g., distributed work environment), close to design (e.g., builds can be started by right-clicking a configuration file and selecting the 'build' function), and anything in between. They can be specified as statements in natural language, as drawn figures, as detailed mathematical formulas, or as a combination of them all.
The variation and complexity of requirement documentation make it a proven challenge. Requirements may be implicit and hard to uncover. It is difficult to know exactly how much and what kind of documentation is needed and how much can be left to the architecture and design documentation, and it is difficult to know how to document requirements considering the variety of people who shall read and use the documentation. Thus, requirements documentation is often incomplete (or non-existent). Without proper requirements documentation, software changes become more difficult — and therefore more error prone (decreased software quality) and time-consuming (expensive).
The need for requirements documentation is typically related to the complexity of the product, the impact of the product, and the life expectancy of the software. If the software is very complex or developed by many people (e.g., mobile phone software), requirements can help better communicate what to achieve. If the software is safety-critical and can have a negative impact on human life (e.g., nuclear power systems, medical equipment, mechanical equipment), more formal requirements documentation is often required. If the software is expected to live for only a month or two (e.g., very small mobile phone applications developed specifically for a certain campaign) very little requirements documentation may be needed. If the software is a first release that is later built upon, requirements documentation is very helpful when managing the change of the software and verifying that nothing has been broken in the software when it is modified.
Traditionally, requirements are specified in requirements documents (e.g. using word processing applications and spreadsheet applications). To manage the increased complexity and changing nature of requirements documentation (and software documentation in general), database-centric systems and special-purpose requirements management tools are advocated.
In Agile software development, requirements are often expressed as user stories with accompanying acceptance criteria. User stories are typically part of a feature, or an epic, which is a broader functionality or set of related functionalities that deliver a specific value to the user based on the business requirements.

Architecture design documentation[edit]
Architecture documentation (also known as software architecture description) is a special type of design document. In a way, architecture documents are third derivative from the code (design document being second derivative, and code documents being first). Very little in the architecture documents is specific to the code itself. These documents do not describe how to program a particular routine, or even why that particular routine exists in the form that it does, but instead merely lays out the general requirements that would motivate the existence of such a routine. A good architecture document is short on details but thick on explanation. It may suggest approaches for lower level design, but leave the actual exploration trade studies to other documents.
Another type of design document is the comparison document, or trade study. This would often take the form of a whitepaper. It focuses on one specific aspect of the system and suggests alternate approaches. It could be at the user interface, code, design, or even architectural level. It will outline what the situation is, describe one or more alternatives, and enumerate the pros and cons of each. A good trade study document is heavy on research, expresses its idea clearly (without relying heavily on obtuse jargon to dazzle the reader), and most importantly is impartial. It should honestly and clearly explain the costs of whatever solution it offers as best. The objective of a trade study is to devise the best solution, rather than to push a particular point of view. It is perfectly acceptable to state no conclusion, or to conclude that none of the alternatives are sufficiently better than the baseline to warrant a change. It should be approached as a scientific endeavor, not as a marketing technique.
A very important part of the design document in enterprise software development is the Database Design Document (DDD). It contains Conceptual, Logical, and Physical Design Elements. The DDD includes the formal information that the people who interact with the database need. The purpose of preparing it is to create a common source to be used by all players within the scene. The potential users are:

Database designer
Database developer
Database administrator
Application designer
Application developer
When talking about Relational Database Systems, the document should include following parts:

Entity - Relationship Schema (enhanced or not), including following information and their clear definitions:
Entity Sets and their attributes
Relationships and their attributes
Candidate keys for each entity set
Attribute and Tuple based constraints
Relational Schema, including following information:
Tables, Attributes, and their properties
Views
Constraints such as primary keys, foreign keys,
Cardinality of referential constraints
Cascading Policy for referential constraints
Primary keys
It is very important to include all information that is to be used by all actors in the scene. It is also very important to update the documents as any change occurs in the database as well.

Technical documentation[edit]
Main article: Technical documentation
It is important for the code documents associated with the source code (which may include README files and API documentation) to be thorough, but not so verbose that it becomes overly time-consuming or difficult to maintain them. Various how-to and overview documentation guides are commonly found specific to the software application or software product being documented by API writers. This documentation may be used by developers, testers, and also end-users. Today, a lot of high-end applications are seen in the fields of power, energy, transportation, networks, aerospace, safety, security, industry automation, and a variety of other domains. Technical documentation has become important within such organizations as the basic and advanced level of information may change over a period of time with architecture changes.  There is evidence that the existence of good code documentation actually reduces maintenance costs for software.[1]
Code documents are often organized into a reference guide style, allowing a programmer to quickly look up an arbitrary function or class.

Technical documentation embedded in source code[edit]
Often, tools such as Doxygen, NDoc, Visual Expert, Javadoc, JSDoc, EiffelStudio, Sandcastle, ROBODoc, POD, TwinText, or Universal Report can be used to auto-generate the code documents—that is, they extract the comments and software contracts, where available, from the source code and create reference manuals in such forms as text or HTML files.
The idea of auto-generating documentation is attractive to programmers for various reasons.  For example, because it is extracted from the source code itself (for example, through comments), the programmer can write it while referring to the code, and use the same tools used to create the source code to make the documentation.  This makes it much easier to keep the documentation up-to-date.
A possible downside is that only programmers can edit this kind of documentation, and it depends on them to refresh the output (for example, by running a cron job to update the documents nightly). Some would characterize this as a pro rather than a con.

Literate programming[edit]
Respected computer scientist Donald Knuth has noted that documentation can be a very difficult afterthought process and has advocated literate programming, written at the same time and location as the source code and extracted by automatic means. The programming languages Haskell and CoffeeScript have built-in support for a simple form of literate programming, but this support is not widely used.

Elucidative programming[edit]
Elucidative Programming is the result of practical applications of Literate Programming in real programming contexts. The Elucidative paradigm proposes that source code and documentation be stored separately.
Often, software developers need to be able to create and access information that is not going to be part of the source file itself. Such annotations are usually part of several software development activities, such as code walks and porting, where third-party source code is analysed in a functional way. Annotations can therefore help the developer during any stage of software development where a formal documentation system would hinder progress.

User documentation[edit]
This section is about consumable guides for software usage. For more general systems, see End user documentation.
Unlike code documents, user documents simply describe how a program is used.
In the case of a software library, the code documents and user documents could in some cases be effectively equivalent and worth conjoining, but for a general application this is not often true.
Typically, the user documentation describes each feature of the program, and assists the user in realizing these features. It is very important for user documents to not be confusing, and for them to be up to date.  User documents do not need to be organized in any particular way, but it is very important for them to have a thorough index. Consistency and simplicity are also very valuable. User documentation is considered to constitute a contract specifying what the software will do. API Writers are very well accomplished towards writing good user documents as they would be well aware of the software architecture and programming techniques used. See also technical writing.
User documentation can be produced in a variety of online and print formats.[2] However, there are three broad ways in which user documentation can be organized. 

Tutorial: A tutorial approach is considered the most useful for a new user, in which they are guided through each step of accomplishing particular tasks.[3]
Thematic: A thematic approach, where chapters or sections concentrate on one particular area of interest, is of more general use to an intermediate user.  Some authors prefer to convey their ideas through a knowledge based article to facilitate the user needs.  This approach is usually practiced by a dynamic industry, such as Information technology.[4]
List or Reference: The final type of organizing principle is one in which commands or tasks are simply listed alphabetically or logically grouped, often via cross-referenced indexes. This latter approach is of greater use to advanced users who know exactly what sort of information they are looking for.
A common complaint among users regarding software documentation is that only one of these three approaches was taken to the near-exclusion of the other two. It is common to limit provided software documentation for personal computers to online help that gives only reference information on commands or menu items.  The job of tutoring new users or helping more experienced users get the most out of a program is left to private publishers, who are often given significant assistance by the software developer.

Composing user documentation[edit]
Like other forms of technical documentation, good user documentation benefits from an organized process of development. In the case of user documentation, the process as it commonly occurs in industry consists of five steps:[5]

User analysis, the basic research phase of the process.[6]
Planning, or the actual documentation phase.[7]
Draft review, is a self-explanatory phase where feedback is sought on the draft composed in the previous step.[8]
Usability testing, whereby the usability of the document is tested empirically.[9]
Editing, is the final step in which the information collected in steps three and four is used to produce the final draft.
Marketing documentation[edit]
For many applications it is necessary to have some promotional materials to encourage casual observers to spend more time learning about the product.  This form of documentation has three purposes:

To excite the potential user about the product and instill in them a desire to become more involved with it.
To inform them about what exactly the product does, so that their expectations are in line with what they will be receiving.
To explain the position of this product with respect to other alternatives.
Documentation and agile development controversy[edit]
"The resistance to documentation among developers is well known and needs no emphasis."[10] 
This situation is particularly prevalent in agile software development because these methodologies try to avoid any unnecessary activities that do not directly bring value.
Specifically, the Agile Manifesto advocates valuing "working software over comprehensive documentation", which could be interpreted cynically as "We want to spend all our time coding. Remember, real programmers don't write documentation."[11]
A survey among software engineering experts revealed, however, that documentation is by no means considered unnecessary in agile development.
Yet it is acknowledged that there are motivational problems in development, and that documentation methods tailored to agile development (e.g. through Reputation systems and Gamification) may be needed.[12][13]

Docs as Code[edit]
Docs as Code is an approach to documentation that treats it with the same rigor and processes as software code. This includes:

Version Control: Using systems like Git to track changes and manage versions.
Continuous Integration: Automating the process of documentation generation and updates.
Collaboration: Enabling multiple contributors to work on documentation simultaneously, similar to code development.
Benefits of Docs as Code[edit]
Consistency: Documentation can be kept in sync with the codebase, ensuring accuracy.
Automation: Automated tools can handle repetitive tasks, such as formatting and deployment.
Collaboration: Encourages contributions from various team members, including developers, testers, and product managers.Combining Docs as Code with Agile methodologies creates a robust framework for maintaining high-quality, up-to-date documentation. Here's how to integrate the two:
Setup Version Control: Start by placing your documentation in a version control system. Structure it similarly to your codebase.
Automate Processes: Implement CI/CD tools to automate the generation and deployment of documentation.
Define Roles: Assign roles and responsibilities for documentation within the Agile team. Ensure everyone understands the importance of documentation.
Regular Reviews: Schedule regular documentation reviews as part of the sprint retrospectives.
See also[edit]
API Writer
Comparison of documentation generators
Design by contract
Design document
Docstring
Documentation
Literate programming
 README files
User Assistance
Unified Modeling Language UML
Notes[edit]


^ "How to get a budget for code documentation".

^ RH Earle, MA Rosso, KE Alexander (2015) User preferences of software documentation genres. Proceedings of the 33rd Annual International Conference on the Design of Communication (ACM SIGDOC). 16 July 2015. pp. 1–10. doi:10.1145/2775441.2775457. ISBN 978-1-4503-3648-2.

^ Woelz, Carlos. "The KDE Documentation Primer". Retrieved 15 June 2009.

^ Microsoft. "Knowledge Base Articles for Driver Development". Microsoft. Retrieved 15 June 2009.

^ Thomas T. Barker, Writing Software Documentation, Preface, xxiv. Part of the Allyn & Bacon Series in Technical Communication, 2nd ed. Upper Saddle River: Pearson Education, 2003. ISBN 0321103289 Archived May 13, 2013, at the Wayback Machine

^ Barker, pg. 118.

^ Barker, pg. 173.

^ Barker, pg. 217.

^ Barker, pg. 240.

^ Herbsleb, James D. and Moitra, Dependra. In: IEEE Software, vol. 18, no. 2, pp.  16-20, Mar/Apr 2001

^ Rakitin, Steven. , "Manifesto elicits cynicism." IEEE Computer, vol. 34, no. 12, p. 4, 2001

^ Prause, Christian R., and Zoya Durdik. "Architectural design and documentation: Waste in agile development?" In: International Conference on Software and System Process (ICSSP), IEEE, 2012.

^ Selic, Bran. "Agile documentation, anyone?" In: IEEE Software, vol. 26, no. 6, pp. 11-12, 2009


vteSoftware engineeringFields
Computer programming
DevOps
Empirical software engineering
Experimental software engineering
Formal methods
Requirements engineering
Search-based software engineering
Site reliability engineering
Social software engineering
Software deployment
Software design
Software maintenance
Software testing
Systems analysis
Concepts
Abstraction
CI/CD
Compatibility
Backward compatibility
Compatibility layer
Compatibility mode
Forward compatibility
Software incompatibility
Component-based software engineering
Data modeling
Enterprise architecture
Functional specification
Modeling language
Programming paradigm
Software
Software archaeology
Software architecture
Software configuration management
Software development process/methodology
Software quality
Software quality assurance
Software system
Software verification and validation
Structured analysis
Essential analysis
Orientations
Agile
Aspect-oriented
Object orientation
Ontology
SDLC
Service orientation
ModelsDevelopmental
Agile
EUP
Executable UML
Incremental model
Iterative model
Prototype model
RAD
Scrum
Spiral model
UP
V-model
Waterfall model
XP
Model-driven engineering
Round-trip engineering
Other
CMMI
Data model
ER model
Function model
Information model
Metamodeling
Object model
SPICE
Systems model
View model
Languages
IDEF
SysML
UML
USL
Related fields
Computer engineering
Computer science
Information science
Project management
Risk management
Systems engineering

 Category
 Commons





Retrieved from "https://en.wikipedia.org/w/index.php?title=Software_documentation&oldid=1286031109"
Categories: Software documentationTechnical communicationHidden categories: Webarchive template wayback linksArticles with short descriptionShort description is different from WikidataArticles needing additional references from March 2013All articles needing additional references






 This page was last edited on 17 April 2025, at 08:21 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike 4.0 License;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.


Privacy policy
About Wikipedia
Disclaimers
Contact Wikipedia
Code of Conduct
Developers
Statistics
Cookie statement
Mobile view














Search













Search









Toggle the table of contents







Software documentation




























17 languages


Add topic
















