https://en.wikipedia.org/wiki/Object_Pascal




Object Pascal - Wikipedia



























Jump to content







Main menu





Main menu
move to sidebar
hide



		Navigation
	


Main pageContentsCurrent eventsRandom articleAbout WikipediaContact us





		Contribute
	


HelpLearn to editCommunity portalRecent changesUpload fileSpecial pages



















Search











Search






















Appearance
















Donate

Create account

Log in








Personal tools





Donate Create account Log in





		Pages for logged out editors learn more



ContributionsTalk




























Contents
move to sidebar
hide




(Top)





1
History




Toggle History subsection





1.1
Apple Pascal








1.2
Clascal and Apple's early Object Pascal










2
Borland, Inprise, CodeGear, and Embarcadero years








3
Versions








4
Compilers




Toggle Compilers subsection





4.1
Legacy products










5
Interpreters








6
Sample "Hello World" programs




Toggle Sample "Hello World" programs subsection





6.1
Apple version








6.2
Turbo Pascal version






6.2.1
Stack based allocation








6.2.2
Heap based allocation










6.3
Delphi and Free Pascal version








6.4
Oxygene version








6.5
DWScript (Smart Pascal) version










7
Development








8
References








9
External links




Toggle External links subsection





9.1
Delphi




















Toggle the table of contents







Object Pascal



32 languages




العربيةČeštinaDanskDeutschEspañolEsperantoفارسیFrançais한국어IdoItalianoLatinaMagyarBahasa MelayuNederlands日本語Norsk bokmålPolskiPortuguêsRomânăРусскийShqipSlovenčinaСрпски / srpskiSuomiSvenskaไทยТоҷикӣTürkçeУкраїнськаTiếng Việt中文

Edit links











ArticleTalk





English

















ReadEditView history







Tools





Tools
move to sidebar
hide



		Actions
	


ReadEditView history





		General
	


What links hereRelated changesUpload filePermanent linkPage informationCite this pageGet shortened URLDownload QR code





		Print/export
	


Download as PDFPrintable version





		In other projects
	


Wikimedia CommonsWikidata item





















Appearance
move to sidebar
hide










From Wikipedia, the free encyclopedia


Branch of object-oriented derivatives of Pascal programming language
This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed.Find sources: "Object Pascal" – news · newspapers · books · scholar · JSTOR (May 2019) (Learn how and when to remove this message)
Object PascalParadigmsImperative, structured, object-oriented, functional (Delphi dialect only), component-based, event-driven, genericFamilyWirth PascalDesigned byLarry Tesler (Apple)Niklaus Wirth (for Apple)Anders Hejlsberg (Borland)[1]DevelopersApple Computer (initial)Borland International[1]First appeared1986; 39 years ago (1986)Typing disciplineStatic and dynamic (dynamic typing through variants, array of const, and RTTI), strong, safeScopeLexical (static)PlatformARM, x86, PowerPC, ppc64, SPARC, MIPS, CLI, JavaFilename extensions.p, .pp, .pasMajor implementationsDelphi (x86, ARM), Free Pascal (x86, PowerPC, ppc64, SPARC, MIPS, ARM), Oxygene (CLI, Java, Native Cocoa), Smart Mobile Studio (JavaScript)DialectsApple, Turbo Pascal, Free Pascal (using objfpc or delphi mode), Delphi, Delphi.NET, Delphi Web Script, PascalABC.NET, OxygeneInfluenced byPascal, Simula, SmalltalkInfluencedC#, Genie, Java, Nim, C/AL
Object Pascal is an extension to the programming language Pascal that provides object-oriented programming (OOP) features such as classes and methods.
The language was originally developed by Apple Computer as Clascal for the Lisa Workshop development system. As Lisa gave way to Macintosh, Apple collaborated with Niklaus Wirth, the author of Pascal, to develop an officially standardized version of Clascal. This was renamed Object Pascal. Through the mid-1980s, Object Pascal was the main programming language for early versions of the MacApp application framework. The language lost its place as the main development language on the Mac in 1991 with the release of the C++-based MacApp 3.0. Official support ended in 1996.
Symantec also developed a compiler for Object Pascal for their Think Pascal product, which could compile programs much faster than Apple's own Macintosh Programmer's Workshop (MPW). Symantec then developed the Think Class Library (TCL), based on MacApp concepts, which could be called from both Object Pascal and THINK C. The Think suite largely displaced MPW as the main development platform on the Mac in the late 1980s.
Symantec ported Object Pascal to the PC, and developed a similar object framework on that platform. In contrast to TCL, which eventually migrated to C++, the PC libraries remained mainly based on Pascal.
Borland added support for object-oriented programming to Turbo Pascal 5.5, which would eventually become the basis for the Object Pascal dialect used in Delphi created by Anders Hejlsberg. Delphi remained mainstream for business applications on the PC into the early 2000s, and was partly displaced in the 2000s with the introduction of the .NET Framework which included Hejlsberg's C#.


History[edit]
Apple Pascal[edit]
Pascal became a major language in the programming world in the 1970s, with high-quality implementations on most minicomputer platforms and microcomputers. Among the latter was the UCSD Pascal system, which compiled to an intermediate p-System code format that could then run on multiple platforms. Apple licensed UCSD and used it as the basis for their Apple Pascal system for the Apple II and Apple III.
Pascal became one of the major languages in the company in this period. With the start of the Apple Lisa project, Pascal was selected as the main programming language of the platform, although this time as a compiler in contrast to the p-System interpreter.

Clascal and Apple's early Object Pascal[edit]
Object Pascal is an extension of the Pascal language that was developed at Apple Computer by a team led by Larry Tesler in consultation with Niklaus Wirth, the inventor of Pascal.[2][3] It is descended from an earlier object-oriented version of Pascal named Clascal, which was available on the Lisa computer.
Object Pascal was needed to support MacApp, an expandable Macintosh application framework that would now be termed a class library. Object Pascal extensions, and MacApp, were developed by Barry Haynes, Ken Doyle, and Larry Rosenstein, and were tested by Dan Allen. Larry Tesler oversaw the project, which began very early in 1985 and became a product in 1986.
An Object Pascal extension was also implemented in the Think Pascal integrated development environment (IDE). The IDE includes the compiler and an editor with syntax highlighting and checking, a powerful debugger, and a class library.[4] Many developers preferred Think Pascal over Apple's implementation of Object Pascal because Think Pascal offered a much faster compile–link–debug cycle, and tight integration of its tools. The last official release of Think Pascal was 4.01, in 1992. Symantec later released an unofficial version 4.5d4 at no charge.
Apple dropped support for Object Pascal when they moved from Motorola 68000 series chips to IBM's PowerPC architecture in 1994. MacApp 3.0, had already been rewritten in C++ and ported to this platform.
Metrowerks offered with CodeWarrior an Object Pascal compiler for Macintosh that targeted both 68k and PowerPC, both in their IDE and as MPW tools. Macintosh developers using Object Pascal had a path to port to the PowerPC, even architecture after both Apple and Symantec dropped support. MacApp 2.0, written in Object Pascal, was ported to the PowerPC using CodeWarrior.[5][6]

Borland, Inprise, CodeGear, and Embarcadero years[edit]
In 1986, Borland introduced similar extensions, also named Object Pascal, to the Turbo Pascal product for the Macintosh, and in 1989 for Turbo Pascal 5.5 for DOS. When Borland refocused from DOS to Windows in 1994, they created a successor to Turbo Pascal, named Delphi, and introduced a new set of extensions to create what is now known as the Delphi language.
The development of Delphi started in 1993 and Delphi 1.0 was officially released in the United States on 14 February 1995. While code using the Turbo Pascal object model could still be compiled, Delphi featured a new syntax using the keyword class in preference to object, the Create constructor and a virtual Destroy destructor (and negating having to call the New and Dispose procedures), properties, method pointers, and some other things. These were inspired by the ISO working draft for object-oriented extensions, but many of the differences from Turbo Pascal's dialect (such as the draft's requirement that all methods be virtual) were ignored. [citation needed]
The Delphi language has continued to evolve over the years to support constructs such as dynamic arrays, generics and anonymous methods. The old object syntax introduced by Apple ("Old-Style Object Types") is still supported.[7]

Versions[edit]
Borland used the name Object Pascal for the programming language in the first versions, but later renamed it to Delphi. Compilers that claim to be compatible with Object Pascal are often trying to be compatible with Delphi source code.[citation needed] Because Delphi is a trademark, compatible compilers continue using the name Object Pascal.
Embarcadero Technologies, which purchased Delphi in 2008,[8] sells the Delphi integrated development environment (IDE) that compiles the Delphi dialect of Object Pascal to Windows and macOS, iOS, Android and Web.
.NET support existed from Delphi 8 through Delphi 2005, 2006, and 2007, which now has been replaced by another language, Oxygene (see below), which is not fully backward-compatible.
The Oxygene language developed by RemObjects Software targets the Common Language Infrastructure, the Java Runtime Environment and Apple's Cocoa frameworks for iOS and macOS.
The open source Free Pascal project allows the language to be compiled for a wide range of operating systems, including Linux (32-bit, 64-bit), FreeBSD, Classic Mac OS, macOS, Solaris, Windows API (32, 64, CE), the ARM instruction set architecture (ISA), and several other hardware architectures. The first version of Free Pascal for the iPhone software development kit (SDK) 2.x was announced on January 17, 2009.[9]
The Smart Pascal language[10] targets ECMAScript–JavaScript and is used in Smart Mobile Studio, written by Jon Lennart Aasenden and published by Optimale Systemer (2012). The language greatly simplifies HTML5 development through object-oriented, and rapid application development (RAD) methods. Smart Pascal integrates tightly with established technologies such as node.js, Embarcadero DataSnap, and Remobjects SDK to produce high-performance client–server model web applications. The language allows easy creation of visual components and reusable libraries. The Smart Pascal dialect stems from the DWScript language, extended to better integrate with the JavaScript environment and libraries, such as asm sections which are plain JavaScript but have access to Pascal symbols, or external classes which map directly to prototypal JavaScript classes. Smart Pascal introduces true inheritance, classes, partial classes, interfaces, a virtual method table and many other advanced constructs which are not a part of JavaScript by default.
The Morfik Pascal language, developed by Morfik, targets Ajax-enabled Web applications. The compiler is built into the company's AppsBuilder IDE and allows Object Pascal code to be used in implementing code to execute in a browser or server. It uses the Free Pascal compiler to generate native binaries from Object Pascal.
The open source GNU Pascal compiler is available as a front-end to the GNU Compiler Collection, which implements the International Organization for Standardization (ISO) 7185 Pascal standard, and most of the ISO 10206 Extended Pascal standard.
Turbo51 is a free compiler to program Intel 8051 chips.[11]
WDSibyl is an open source Delphi-like IDE and compiler available for Microsoft Windows and OS/2,[12] and is a commercial Turbo Pascal compatible environment released by a company named Speedsoft that was later developed into a Delphi-like RAD environment named Sybil, and then open sourced under the GPL when that company closed down. Wolfgang Draxler (WD) now maintains the software.[13][14][15] The compiler used seems to be located in a DLL and is not open-source.[citation needed]
Compilers[edit]
Object Pascal compilers are available for a wide range of operating systems and architectures.

Delphi is probably the best known compiler. It is the successor of the highly successful Borland Pascal and Turbo Pascal product line. It targets Windows 9x (Delphi 2007 and older), the Windows NT family, .NET Framework (Delphi 8, 2005, 2007), macOS (Delphi XE2 and later), iOS (Delphi XE2 and later, generating native binaries in XE4 and later), Android (Delphi XE5 and later, generating native binaries in XE5 and later). Support for .NET finally became a separate product known as Oxygene (see below).
Free Pascal Compiler (FPC) is an open-source Object Pascal compiler that supports many Pascal dialects, including Turbo Pascal 7, Delphi, and others. Currently, FPC can generate code for IA-32, x86-64, PowerPC, SPARC, and ARM processors, and for several operating systems, including Microsoft Windows, Linux, FreeBSD, Classic Mac OS, and macOS (with an Xcode integration kit). Several separate projects exist to facilitate rapid application development with FPC, the most prominent one being Lazarus (IDE).
GNU Pascal (a separately distributed part of the GNU Compiler Collection), while not formally aimed at the Delphi dialect of Pascal, does contain a Turbo Pascal compatibility mode, and is very slowly incorporating a few Delphi language features. It is unsuitable for recompiling large bodies of Delphi code directly, but is notable as having prolific support for operating systems and hardware architectures.
Oxygene (formerly Chrome) is an Object Pascal compiler from RemObjects Software that integrates into Microsoft Visual Studio. It is also available as free command-line interface compiler that runs native on CLI. It is three compilers in one, each targeting a different platform: Echoes for .NET Framework, Mono, WinRT and Windows Phone 8, Cooper for JDK and Android, and Nougat for iOS and macOS.
Legacy products[edit]
Borland Kylix was a Linux variant of Delphi which only targets Intel 32-bit Linux using the Qt library. It does not work out of the box with most modern Linux distributions.
Virtual Pascal was a free 32-bit Turbo Pascal and Delphi compatible compiler for mainly OS/2 and Microsoft Windows. Later, it also received a DOS+ Extender and an experimental Linux cross-compiler. The compiler's development stopped at about the level of Delphi 2. In 2007, its official website ceased to operate, and further development ceased.
Interpreters[edit]
Main article: Pascal Script
Pascal Script (formerly InnerFuse) and DWScript (Delphi Web Script) are open-source Object Pascal interpreters and scripting engines written in Delphi. They support subsets of Object Pascal. DWScript can also compile Object Pascal code into JavaScript code (Smart Pascal), and supports just-in-time compilation (JIT). Modern Pascal provides 3 different interpreters: a command-line interface (CLI), Apache Module (Celerity), and CodeRunner (node.js like solution able to handle different scripts per port), besides the ability to compile and protect a script's source code.[16]

Sample "Hello World" programs[edit]
This section does not cite any sources. Please help improve this section by adding citations to reliable sources. Unsourced material may be challenged and removed. (June 2013) (Learn how and when to remove this message)
Here are several "Hello World" programs in different Object Pascal versions.

Apple version[edit]
program ObjectPascalExample;

   type
      THelloWorld = object
         procedure Put;
      end;

   var
      HelloWorld: THelloWorld;

   procedure THelloWorld.Put;
   begin
      ShowMessage('Hello, World!');
   end;

begin
   New(HelloWorld);
   HelloWorld.Put;
   Dispose(HelloWorld);
end.

Turbo Pascal version[edit]
Still supported in Delphi and Free Pascal. FPC also packages its own substitutes for the libraries/units. Delphi does not. The Free Pascal 1.0 series and the FPC textmode IDE are the largest open codebases in this dialect. Free Pascal 2.0 was rewritten in a more Delphi-like dialect, and the textmode IDE and related frameworks (Free Vision) are the only parts in the TP version of Object Pascal.

Stack based allocation[edit]
program ObjectPascalExample;

   type
      THelloWorld = object
         procedure Put;
      end;

   procedure THelloWorld.Put;
   begin
      WriteLn('Hello, World!');
   end;

var
  HelloWorld: THelloWorld; { allocated on the stack and can be used without explicit allocation. }
begin
   HelloWorld.Put;
end.

Heap based allocation[edit]
program ObjectPascalExample;

   type
      PHelloWorld = ^THelloWorld;
      THelloWorld = object
         procedure Put;
      end;

   procedure THelloWorld.Put;
   begin
      WriteLn('Hello, World!');
   end;

var
  HelloWorld: PHelloWorld; { this is a typed pointer to a THelloWorld }

begin
   New(HelloWorld);
   HelloWorld^.Put;
   Dispose(HelloWorld);
end.

Another example:

program ObjectPascalExample;

   type
      PHelloWorld = ^THelloWorld;
      THelloWorld = object
         procedure Put;
      end;

   procedure THelloWorld.Put;
   begin
      WriteLn('Hello, World!');
   end;

var
  HelloWorld: PHelloWorld; { this is a typed pointer to a THelloWorld }
  HelloWorld2: ^THelloWorld; { this is exactly the same with different syntax } 
  HelloWorld3: ^THelloWorld;                               
  HelloWorld4: PHelloWorld;   
begin
   { This works in a similar way as the code above, note the allocation and de-allocation, though,
     many people get confused. In the past there was a wrong example with wrong comments here... }

   New(HelloWorld);  { one instance }
   HelloWorld4 := HelloWorld; { this is valid - a pointer copy }
   HelloWorld2 := HelloWorld; { this is valid - a pointer copy }
   New(HelloWorld3); { a second instance }
   HelloWorld4 := HelloWorld3; { this is valid - a pointer copy }
   HelloWorld2 := HelloWorld3; { this is valid - a pointer copy }
   Dispose(HelloWorld);  { it allocates only two instances }
   Dispose(HelloWorld3); { so it must release only two instances }
end.

This works based on pointer copy, unless there is a specific allocation for a deeper copy.

Delphi and Free Pascal version[edit]
program ObjectPascalExample;

type
  THelloWorld = class
    procedure Put;
  end;

procedure THelloWorld.Put;
begin
  Writeln('Hello, World!');
end;

var
  HelloWorld: THelloWorld;               { this is an implicit pointer }

begin
  HelloWorld := THelloWorld.Create;      { constructor returns a pointer to an object of type THelloWorld }
  HelloWorld.Put;
  HelloWorld.Free;                       { this line deallocates the THelloWorld object pointed to by HelloWorld }
end.

Note that the object construct is still available in Delphi and Free Pascal.

Oxygene version[edit]
namespace ObjectPascalExample;

   interface

   type
      ConsoleApp = class
         class method Main;
      end;

      THelloWorld = class
         method Put;
      end;

   implementation

   method THelloWorld.Put;
   begin
      Console.WriteLine('Hello, World!');
   end;

   class method ConsoleApp.Main;
   begin
      var HelloWorld := new THelloWorld;
      HelloWorld.Put;
   end;

end.

DWScript (Smart Pascal) version[edit]
type
   THelloWorld = class
      procedure Put;
      begin
         PrintLn('Hello, World!');
      end
   end;

var HelloWorld := THelloWorld.Create;
HelloWorld.Put;

The method implementation can also be made in a distinct location as in other Object Pascal dialects.

Development[edit]
Many features have been introduced continuously to Object Pascal with extensions to Delphi and extensions to FreePascal. In reaction to criticism, Free Pascal has adopted generics with the same syntax as Delphi, provided Delphi compatibility mode is selected, and both Delphi (partial) and Free Pascal (more extensive) support operator overloading. Delphi has also introduced many other features since version 7,[17] including generics. Whereas FreePascal tries to be compatible to Delphi in Delphi compatibility mode, it also usually introduced many new features to the language that are not always available in Delphi.

References[edit]


^ a b Gibson, Steve (May 8, 1989). "Borland and Microsoft Enter the Object-Oriented Pascal Ring". InfoWorld. Vol. 11, no. 19. p. 28. Archived from the original on February 29, 2024. Retrieved September 18, 2021.

^ Tesler, Larry (1985). "Object Pascal Report". Structured Language World. 9 (3): 10–7.

^ Tesler, Larry (February 4, 1985). "Object Pascal for the Macintosh" (PDF). Retrieved March 13, 2025.

^ Seiter, Charles (November 1990). "Think Pascal 3". Macworld. Vol. 7, no. 11. p. 236.

^ 
Arnold, Brian; McCarthy, Guy (November 1995). "MacApp Pascal Rides again". MacTech. Vol. 11, no. 11. pp. 30–31.

^ Arnold, Brian (February 1996). "MacApp 2 for PowerPC in Object Pascal". MacTech. Vol. 12, no. 2. pp. 25–32.

^ Lischner, Ray (2000). Delphi in a nutshell: a desktop quick reference (1st ed.). Sebastopol, CA: O'Reilly and Associates. ISBN 1565926595.

^ Community Letter: Embarcadero Technologies agrees to acquire CodeGear from Borland Archived 2018-03-02 at the Wayback Machine. Edn.embarcadero.com. Retrieved on 2013-07-21.

^ "iPhone/iPod development". Free Pascal development team. Archived from the original on 2009-04-28. Retrieved 2009-04-13.

^ A Smart Book. Leanpub. 18 May 2012. Archived from the original on 25 May 2013. Retrieved 19 June 2013.

^ Funa, Igor (2021). "Turbo51: Turbo Pascal Compiler for 8051 microcontrollers". Archived from the original on 2018-09-25.

^ Draxler, Wolfgang. "WDSibyl: Visual Development Environment". Archived from the original on 2020-02-12.

^ 
"EDM/2: WDSibyl". Archived from the original on 2021-03-24.

^ 
"EDM/2: List of Tools". Archived from the original on 2022-08-21.

^ 
"eCSoft/2: The Complete OS/2 Software Encyclopedia: WDSibyl". Archived from the original on 2021-10-17.

^ "Modern Pascal". Archived from the original on 2018-12-11. Retrieved 2018-10-22.

^ "New Delphi language features since Delphi 7". CodeGear. Archived from the original on 2008-07-02. Retrieved 2008-07-06.


External links[edit]
Introduction to Object Pascal, MacTech Vol 2 Issue 12 1985.
Object Pascal reference guide for Free Pascal. Archived 2009-12-23 at the Wayback Machine "The aim is to list which Pascal constructs are supported, and to show where the Free Pascal implementation differs from the Turbo Pascal or Delphi implementations."
Free Pascal: Reference guide, Reference guide for Free Pascal, version 2.0.0
Major Differences Between the Syntax of C++ and Object Pascal
Think Pascal 4.5 Unofficial page about Symantec's final version of Think Pascal.
Delphi[edit]
Object Pascal Language Guide Covering Borland Delphi 6-7
Delphi Basics, Resource of Delphi project source codes.
Delphi-Help - первая помощь программисту на Delphi
Delphi Programming, Resource of Delphi Programming & Delphi Programming Forums.
vtePascal programming language familyDialects
Pascal
Object Pascal
Pascal Script
Oxygene
Clascal
Concurrent Pascal
Joyce
SuperPascal
CompilersCurrent
Delphi (history)
Oxygene
VSI Pascal
IP Pascal
Free Pascal (Lazarus)
PascalABC.NET
GNU Pascal
Turbo51
Pic Micro Pascal
ACK
Discontinued
Virtual Pascal
Apple Pascal
Borland Kylix
Turbo Pascal
Microsoft Pascal
UCSD Pascal
JRT Pascal
Pascal/MT+
API
CLX
FCL
FireMonkey
LCL
Object Windows Library
OpenWire
RTL
Turbo Vision
Visual Component Library
Microcomputer
Pascal MicroEngine
Comparisons
Pascal and C
Pascal and Delphi
Designer
Niklaus Wirth

Genericity
Related to
ALGOL (1958)
Modula-2 (1977)
Ada (1983)
Oberon (1986)
Modula-3 (1988)
Oberon-2 (1991)
Component Pascal (1991)

vteNiklaus WirthSoftwareProgramminglanguagesEuler (1965) → PL360 (1966) → ALGOL W (1966) → Pascal (1970) → Modula (1975) → Modula-2 (1978) → Object Pascal (1986) → Oberon (1987) → Oberon-2 (1991) → Lola (1995) → Active Oberon (1998) → Oberon-07 (2007)Operating systemsOberon System (1987) → Active Object System (AOS, 2002), Bluebottle (2005), A2 (2008)Formalisms
Wirth's law
Wirth syntax notation
Wirth–Weber precedence relationship
Books
Algorithms + Data Structures = Programs
WorkstationsLilith (1977) → Ceres (1985)Workplaces
Stanford University (1963–67)
University of Zurich (1963–67)
ETH Zurich (1968–99)
Xerox PARC (1976–77, 1984–85)
Collaborators
Jürg Gutknecht
Tony Hoare
de:Hanspeter Mössenböck
Larry Tesler
Awards
Turing Award
SIGPLAN Programming Languages Achievement Award
Fellow of the Computer History Museum
Marcel Benoist Prize

 Category

Authority control databases: National Czech Republic




Retrieved from "https://en.wikipedia.org/w/index.php?title=Object_Pascal&oldid=1281911056"
Categories: BorlandCodeGear softwareDelphi (programming language)Object-oriented programming languagesSystems programming languagesPascal programming language familyProgramming languages created in 1986Hidden categories: Webarchive template wayback linksArticles with short descriptionShort description matches WikidataArticles needing additional references from May 2019All articles needing additional referencesAll articles with unsourced statementsArticles with unsourced statements from January 2025Articles with unsourced statements from August 2009Articles with unsourced statements from August 2024Articles needing additional references from June 2013






 This page was last edited on 23 March 2025, at 06:18 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike 4.0 License;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.


Privacy policy
About Wikipedia
Disclaimers
Contact Wikipedia
Code of Conduct
Developers
Statistics
Cookie statement
Mobile view














Search













Search









Toggle the table of contents







Object Pascal




























32 languages


Add topic
















