https://en.wikipedia.org/wiki/Perl




Perl - Wikipedia




































Jump to content







Main menu





Main menu
move to sidebar
hide



		Navigation
	


Main pageContentsCurrent eventsRandom articleAbout WikipediaContact us





		Contribute
	


HelpLearn to editCommunity portalRecent changesUpload fileSpecial pages



















Search











Search






















Appearance
















Donate

Create account

Log in








Personal tools





Donate Create account Log in





		Pages for logged out editors learn more



ContributionsTalk




























Contents
move to sidebar
hide




(Top)





1
Name and logos








2
History




Toggle History subsection





2.1
Early versions








2.2
1990s








2.3
2000–2020








2.4
Perl 6 and Raku








2.5
Perl 7










3
Design




Toggle Design subsection





3.1
Philosophy








3.2
Features








3.3
Syntax








3.4
Implementation










4
Ports








5
Performance








6
Applications








7
Community








8
See also








9
References








10
Further reading








11
External links


















Toggle the table of contents







Perl



82 languages




AlemannischالعربيةAragonésAsturianuAzərbaycancaবাংলা閩南語 / Bân-lâm-gúБеларускаяБългарскиCatalàЧӑвашлаČeštinaCymraegDanskDeitschDeutschEestiΕλληνικάEspañolEsperantoEuskaraفارسیFrançaisGaeilgeGalegoગુજરાતી한국어Հայերենहिन्दीHrvatskiBahasa IndonesiaItalianoעבריתಕನ್ನಡქართულიҚазақшаKurdîКыргызчаLatinaLatviešuLëtzebuergeschLietuviųLombardMagyarМакедонскиമലയാളംमराठीBahasa Melayuမြန်မာဘာသာNederlandsनेपाल भाषा日本語Norsk bokmålNorsk nynorskଓଡ଼ିଆOʻzbekcha / ўзбекчаPolskiPortuguêsRomânăRuna SimiРусскийСаха тылаShqipSimple EnglishSlovenčinaSlovenščinaکوردیСрпски / srpskiSrpskohrvatski / српскохрватскиSuomiSvenskaதமிழ்ไทยТоҷикӣTürkçeУкраїнськаاردوTiếng Việt吴语粵語Žemaitėška中文

Edit links











ArticleTalk





English

















ReadEditView history







Tools





Tools
move to sidebar
hide



		Actions
	


ReadEditView history





		General
	


What links hereRelated changesUpload filePermanent linkPage informationCite this pageGet shortened URLDownload QR code





		Print/export
	


Download as PDFPrintable version





		In other projects
	


Wikimedia CommonsWikibooksWikiquoteWikiversityWikidata item





















Appearance
move to sidebar
hide










From Wikipedia, the free encyclopedia


Interpreted programming language first released in 1987
For other uses, see Perl (disambiguation).
Not to be confused with PEARL (programming language) or Peril.


PerlParadigmMulti-paradigmDesigned byLarry WallDeveloperLarry WallFirst appearedDecember 18, 1987; 37 years ago (1987-12-18)[1]Stable release5.40.0[2] / 18 January 2025; 3 months ago (2025-01-18)5.38.3[3] / 18 January 2025; 3 months ago (2025-01-18)
Preview release5.41.3[4] / 29 August 2024; 7 months ago (2024-08-29)

Typing disciplineDynamicImplementation languageCOSCross-platformLicenseArtistic 1.0[5][6] or GNU General Public License version 1 or any later version[7]Filename extensions.plx, .pls, .pl, .pm, .xs, .t, .pod, .cgi, .psgiWebsiteperl.orgInfluenced byAWK, BASIC, C, C++, Lisp, sed, Unix shell[8]InfluencedCoffeeScript,[citation needed] Groovy,[citation needed] JavaScript, Julia, LPC, PHP, Python, Raku, Ruby, PowerShell
 Perl Programming at Wikibooks

Perl is a high-level, general-purpose, interpreted, dynamic programming language. Though Perl is not officially an acronym,[9] there are various backronyms in use, including "Practical Extraction and Reporting Language".[10]
Perl was developed by Larry Wall in 1987[11] as a general-purpose Unix scripting language to make report processing easier.[12][11][13] Since then, it has undergone many changes and revisions. Perl originally was not capitalized and the name was changed to being capitalized by the time Perl 4 was released.[13] The latest release is Perl 5, first released in 1994. From 2000 to October 2019 a sixth version of Perl was in development; the sixth version's name was changed to Raku.[14][15] Both languages continue to be developed independently by different development teams which liberally borrow ideas from each other.
Perl borrows features from other programming languages including C, sh, AWK, and sed.[1] It provides text processing facilities without the arbitrary data-length limits of many contemporary Unix command line tools.[16] Perl is a highly expressive programming language: source code for a given algorithm can be short and highly compressible.[17][18]
Perl gained widespread popularity in the mid-1990s as a CGI scripting language, in part due to its powerful regular expression and string parsing abilities.[19][20][21][22] In addition to CGI, Perl 5 is used for system administration, network programming, finance, bioinformatics, and other applications, such as for graphical user interfaces (GUIs). It has been nicknamed "the Swiss Army chainsaw of scripting languages" because of its flexibility and power.[23] In 1998, it was also referred to as the "duct tape that holds the Internet together", in reference to both its ubiquitous use as a glue language and its perceived inelegance.[24]


Name and logos[edit]
The Camel symbol used by O'Reilly MediaThe onion logo used by The Perl Foundation
Perl was originally named "Pearl". Wall wanted to give the language a short name with positive connotations. It is also a Christian reference to the Parable of the Pearl from the Gospel of Matthew.[11][25] However, Wall discovered the existing PEARL language before Perl's official release and dropped the "a" from the name.[26][11]
The name is occasionally expanded as a backronym: Practical Extraction and Report Language[27] and Wall's own Pathologically Eclectic Rubbish Lister, which is in the manual page for perl.[28]
Programming Perl, published by O'Reilly Media, features a picture of a dromedary camel on the cover and is commonly called the "Camel Book".[29] This image has become an unofficial symbol of Perl. O'Reilly owns the image as a trademark but licenses it for non-commercial use, requiring only an acknowledgement and a link to www.perl.com. Licensing for commercial use is decided on a case-by-case basis.[30] O'Reilly also provides "Programming Republic of Perl" logos for non-commercial sites and "Powered by Perl" buttons for any site that uses Perl.[30]
The Perl Foundation owns an alternative symbol, an onion, which it licenses to its subsidiaries, Perl Mongers, PerlMonks, Perl.org, and others.[31] The symbol is a visual pun on pearl onion.[32]

History[edit]
Early versions[edit]
Larry Wall began work on Perl in 1987, while employed as a programmer at Unisys;[16] he released version 1.0 on December 18, 1987.[1][11] Wall based early Perl on some methods existing languages used for text manipulation.[11]
Perl 2, released in June 1988,[33][34] featured a better regular expression engine. Perl 3, released in October 1989,[33] added support for binary data streams.[35]

1990s[edit]
Main article: Perl 5 version history
Originally, the only documentation for Perl was a single lengthy man page. In 1991, Programming Perl, known to many Perl programmers as the "Camel Book" because of its cover, was published and became the de facto reference for the language.[36] At the same time, the Perl version number was bumped to 4, not to mark a major change in the language but to identify the version that was well documented by the book.[37] Perl 4 was released in March 1991.[33]
Perl 4 went through a series of maintenance releases, culminating in Perl 4.036 in 1993, whereupon Wall abandoned Perl 4 to begin work on Perl 5. Initial design of Perl 5 continued into 1994. The perl5-porters mailing list was established in May 1994 to coordinate work on porting Perl 5 to different platforms. It remains the primary forum for development, maintenance, and porting of Perl 5.[38]
Perl 5.000 was released on October 17, 1994.[39] It was a nearly complete rewrite of the interpreter, and it added many new features to the language, including objects, references, lexical (my) variables, and modules. Importantly, modules provided a mechanism for extending the language without modifying the interpreter. This allowed the core interpreter to stabilize, even as it enabled ordinary Perl programmers to add new language features. Perl 5 has been in active development since then.
Perl 5.001 was released on March 13, 1995. Perl 5.002 was released on February 29, 1996 with the new prototypes feature. This allowed module authors to make subroutines that behaved like Perl builtins. Perl 5.003 was released June 25, 1996, as a security release.[40]
One of the most important events in Perl 5 history took place outside of the language proper and was a consequence of its module support. On October 26, 1995, the Comprehensive Perl Archive Network (CPAN) was established as a repository for the Perl language and Perl modules; as of December 2022[update], it carries over 211,850 modules in 43,865 distributions, written by more than 14,324 authors, and is mirrored worldwide at more than 245 locations.[41]
Perl 5.004 was released on May 15, 1997, and included, among other things, the UNIVERSAL package, giving Perl a base object from which all classes were automatically derived and the ability to require versions of modules. Another significant development was the inclusion of the CGI.pm module,[42] which contributed to Perl's popularity as a CGI scripting language.[43]
Perl 5.004 added support for Microsoft Windows, Plan 9, QNX, and AmigaOS.[42]
Perl 5.005 was released on July 22, 1998. This release included several enhancements to the regex engine, new hooks into the backend through the B::* modules, the qr// regex quote operator, a large selection of other new core modules, and added support for several more operating systems, including BeOS.[44]

2000–2020[edit]


Major version[39]

Latest update[45]


Old version, not maintained: 5.4

1999-04-29


Old version, not maintained: 5.5

2004-02-23


Old version, not maintained: 5.6

2003-11-15


Old version, not maintained: 5.8

2008-12-14


Old version, not maintained: 5.10

2009-08-22


Old version, not maintained: 5.12

2012-11-10


Old version, not maintained: 5.14

2013-03-10


Old version, not maintained: 5.16

2013-03-11


Old version, not maintained: 5.18

2014-10-01


Old version, not maintained: 5.20

2015-09-12


Old version, not maintained: 5.22

2017-07-15


Old version, not maintained: 5.24

2018-04-14


Old version, not maintained: 5.26

2018-11-29


Old version, not maintained: 5.28

2020-06-01


Old version, not maintained: 5.30

2020-06-01


Old version, not maintained: 5.32

2021-01-23


Old version, not maintained: 5.34

2023-11-29


Old version, not maintained: 5.36

2023-11-29


Old version, still maintained: 5.38

2025-01-18


Latest version: 5.40

2025-01-18


Legend:Old version, not maintainedOld version, still maintainedLatest versionLatest preview versionFuture version

Perl 5.6 was released on March 22, 2000. Major changes included 64-bit support, Unicode string representation, support for files over 2 GiB, and the "our" keyword.[46][47] When developing Perl 5.6, the decision was made to switch the versioning scheme to one more similar to other open source projects; after 5.005_63, the next version became 5.5.640, with plans for development versions to have odd numbers and stable versions to have even numbers.[48]
In 2000, Wall put forth a call for suggestions for a new version of Perl from the community. The process resulted in 361 RFC (Request for Comments) documents that were to be used in guiding development of Perl 6. In 2001,[49] work began on the "Apocalypses" for Perl 6, a series of documents meant to summarize the change requests and present the design of the next generation of Perl. They were presented as a digest of the RFCs, rather than a formal document. At this time, Perl 6 existed only as a description of a language.[citation needed]
Perl 5.8 was first released on July 18, 2002, and further 5.X versions have been released approximately yearly since then. Perl 5.8 improved Unicode support, added a new I/O implementation, added a new thread implementation, improved numeric accuracy, and added several new modules.[50] As of 2013, this version was still the most popular Perl version and was used by Red Hat Linux 5, SUSE Linux 10, Solaris 10, HP-UX 11.31, and AIX 5.
In 2004, work began on the "Synopses" – documents that originally summarized the Apocalypses, but which became the specification for the Perl 6 language. In February 2005, Audrey Tang began work on Pugs, a Perl 6 interpreter written in Haskell.[51] This was the first concerted effort toward making Perl 6 a reality. This effort stalled in 2006.[52]
The Perl On New Internal Engine (PONIE) project existed from 2003 until 2006. It was to be a bridge between Perl 5 and 6, and an effort to rewrite the Perl 5 interpreter to run on the Perl 6 Parrot virtual machine. The goal was to ensure the future of the millions of lines of Perl 5 code at thousands of companies around the world.[53] The PONIE project ended in 2006 and is no longer being actively developed. Some of the improvements made to the Perl 5 interpreter as part of PONIE were folded into that project.[54]
On December 18, 2007, the 20th anniversary of Perl 1.0, Perl 5.10.0 was released. Perl 5.10.0 included notable new features, which brought it closer to Perl 6. These included a switch statement (called "given"/"when"), regular expressions updates, and the smart match operator (~~).[55][56]
Around this same time, development began in earnest on another implementation of Perl 6 known as Rakudo Perl, developed in tandem with the Parrot virtual machine. As of November 2009, Rakudo Perl has had regular monthly releases and now is the most complete implementation of Perl 6.
A major change in the development process of Perl 5 occurred with Perl 5.11; the development community has switched to a monthly release cycle of development releases, with a yearly schedule of stable releases. By that plan, bugfix point releases will follow the stable releases every three months.[citation needed]
On April 12, 2010, Perl 5.12.0 was released. Notable core enhancements include new package NAME VERSION syntax, the yada yada operator (intended to mark placeholder code that is not yet implemented), implicit strictures, full Y2038 compliance, regex conversion overloading, DTrace support, and Unicode 5.2.[57]
On May 14, 2011, Perl 5.14 was released with JSON support built-in.[58]
On May 20, 2012, Perl 5.16 was released. Notable new features include the ability to specify a given version of Perl that one wishes to emulate, allowing users to upgrade their version of Perl, but still run old scripts that would normally be incompatible.[59][failed verification] Perl 5.16 also updates the core to support Unicode 6.1.[59]
On May 18, 2013, Perl 5.18 was released. Notable new features include the new dtrace hooks, lexical subs, more CORE:: subs, overhaul of the hash for security reasons, support for Unicode 6.2.[60]
On May 27, 2014, Perl 5.20 was released. Notable new features include subroutine signatures, hash slices/new slice syntax, postfix dereferencing (experimental), Unicode 6.3, and a rand() function using a consistent random number generator.[61]
Some observers credit the release of Perl 5.10 with the start of the Modern Perl movement.[62] In particular, this phrase describes a style of development that embraces the use of the CPAN, takes advantage of recent developments in the language, and is rigorous about creating high quality code.[63] While the book Modern Perl[64] may be the most visible standard-bearer of this idea, other groups such as the Enlightened Perl Organization[65] have taken up the cause.
In late 2012 and 2013, several projects for alternative implementations for Perl 5 started: Perl5 in Perl6 by the Rakudo Perl team,[66] moe by Stevan Little and friends,[67] p2[68] by the Perl11 team under Reini Urban, gperl by goccy,[69] and rperl, a Kickstarter project led by Will Braswell and affiliated with the Perl11 project.[70]

Perl 6 and Raku[edit]
Main article: Raku (programming language)
Camelia, the logo for the Perl 6 project[71]
At the 2000 Perl Conference, Jon Orwant made a case for a major new language initiative.[72] This led to a decision to begin work on a redesign of the language, to be called Perl 6. Proposals for new language features were solicited from the Perl community at large, which submitted more than 300 RFCs.[73]
Wall spent the next few years digesting the RFCs and synthesizing them into a coherent framework for Perl 6. He presented his design for Perl 6 in a series of documents called "apocalypses" – numbered to correspond to chapters in Programming Perl. As of January 2011[update], the developing specification of Perl 6 was encapsulated in design documents called Synopses – numbered to correspond to Apocalypses.[74]
Thesis work by Bradley M. Kuhn, overseen by Wall, considered the possible use of the Java virtual machine as a runtime for Perl.[75] Kuhn's thesis showed this approach to be problematic. In 2001, it was decided that Perl 6 would run on a cross-language virtual machine called Parrot.
In 2005, Audrey Tang created the Pugs project, an implementation of Perl 6 in Haskell. This acted as, and continues to act as, a test platform for the Perl 6 language (separate from the development of the actual implementation), allowing the language designers to explore. The Pugs project spawned an active Perl/Haskell cross-language community centered around the Libera Chat #raku IRC channel. Many functional programming influences were absorbed by the Perl 6 design team.[76]
In 2012, Perl 6 development was centered primarily on two compilers:[77]

Rakudo, an implementation running on the Parrot virtual machine and the Java virtual machine.[78]
Niecza, which targets the Common Language Runtime.
In 2013, MoarVM ("Metamodel On A Runtime"), a C language-based virtual machine designed primarily for Rakudo was announced.[79]
In October 2019, Perl 6 was renamed to Raku.[80]
As of 2017[update] only the Rakudo implementation and MoarVM are under active development, and other virtual machines, such as the Java Virtual Machine and JavaScript, are supported.[81]

Perl 7[edit]
In June 2020, Perl 7 was announced as the successor to Perl 5.[82] Perl 7 was to initially be based on Perl 5.32 with a release expected in first half of 2021, and release candidates sooner.[83]
This plan was revised in May 2021, without any release timeframe or version of Perl 5 for use as a baseline specified.[84] When Perl 7 would be released, Perl 5 would have gone into long term maintenance. Supported Perl 5 versions however would continue to get important security and bug fixes.[85]
Perl 7 was announced on 24 June 2020 at "The Perl Conference in the Cloud" as the successor to Perl 5.[83][82] Based on Perl 5.32, Perl 7 was planned to be backward compatible with modern Perl 5 code; Perl 5 code, without boilerplate (pragma) header needs adding use compat::perl5; to stay compatible, but modern code can drop some of the boilerplate.
The plan to go to Perl 7 brought up more discussion, however, and the Perl Steering Committee canceled it to avoid issues with backward compatibility for scripts that were not written to the pragmas and modules that would become the default in Perl 7. Perl 7 will only come out when the developers add enough features to warrant a major release upgrade.[86]

Design[edit]
Main article: Perl language structure
Philosophy[edit]
According to Wall, Perl has two slogans. The first is "There's more than one way to do it," commonly known as TMTOWTDI, (pronounced Tim Toady). As proponents of this motto argue, this philosophy makes it easy to write concise statements.[87][88][89]
The second slogan is "Easy things should be easy and hard things should be possible".[16]
The design of Perl can be understood as a response to three broad trends in the computer industry: falling hardware costs, rising labor costs, and improvements in compiler technology. Many earlier computer languages, such as Fortran and C, aimed to make efficient use of expensive computer hardware. In contrast, Perl was designed so that computer programmers could write programs more quickly and easily.[90]
Perl has many features that ease the task of the programmer at the expense of greater CPU and memory requirements. These include automatic memory management; dynamic typing; strings, lists, and hashes; regular expressions; introspection; and an eval() function. Perl follows the theory of "no built-in limits",[29] an idea similar to the Zero One Infinity rule.
Wall was trained as a linguist, and the design of Perl is very much informed by linguistic principles. Examples include Huffman coding (common constructions should be short), good end-weighting (the important information should come first), and a large collection of language primitives. Perl favors language constructs that are concise and natural for humans to write, even where they complicate the Perl interpreter.[91]
Perl's syntax reflects the idea that "things that are different should look different."[92] For example, scalars, arrays, and hashes have different leading sigils. Array indices and hash keys use different kinds of braces. Strings and regular expressions have different standard delimiters.
There is a broad practical bent to both the Perl language and the community and culture that surround it. The preface to Programming Perl begins: "Perl is a language for getting your job done."[16] One consequence of this is that Perl is not a tidy language. It includes many features, tolerates exceptions to its rules, and employs heuristics to resolve syntactical ambiguities. Because of the forgiving nature of the compiler, bugs can sometimes be hard to find. Perl's function documentation remarks on the variant behavior of built-in functions in list and scalar contexts by saying, "In general, they do what you want, unless you want consistency."[93]

Features[edit]
The overall structure of Perl derives broadly from C. Perl is procedural in nature, with variables, expressions, assignment statements, brace-delimited blocks, control structures, and subroutines.[94]
Perl also takes features from shell programming. All variables are marked with leading sigils, which allow variables to be interpolated directly into strings. However, unlike the shell, Perl uses sigils on all accesses to variables, and unlike most other programming languages that use sigils, the sigil doesn't denote the type of the variable but the type of the expression. So for example, while an array is denoted by the sigil "@" (for example @arrayname), an individual member of the array is denoted by the scalar sigil "$" (for example $arrayname[3]). Perl also has many built-in functions that provide tools often used in shell programming (although many of these tools are implemented by programs external to the shell) such as sorting, and calling operating system facilities.[citation needed]
Perl takes hashes ("associative arrays") from AWK and regular expressions from sed. These simplify many parsing, text-handling, and data-management tasks. Shared with Lisp is the implicit return of the last value in a block, and all statements are also expressions which can be used in larger expressions themselves.[citation needed]
Perl 5 added features that support complex data structures, first-class functions (that is, closures as values), and an object-oriented programming model. These include references, packages, class-based method dispatch, and lexically scoped variables, along with compiler directives (for example, the strict pragma). A major additional feature introduced with Perl 5 was the ability to package code as reusable modules. Wall later stated that "The whole intent of Perl 5's module system was to encourage the growth of Perl culture rather than the Perl core."[95]
All versions of Perl do automatic data-typing and automatic memory management. The interpreter knows the type and storage requirements of every data object in the program; it allocates and frees storage for them as necessary using reference counting (so it cannot deallocate circular data structures without manual intervention). Legal type conversions – for example, conversions from number to string – are done automatically at run time; illegal type conversions are fatal errors.[citation needed]

Syntax[edit]
Perl has been referred to as "line noise" and a "write-only language" by its critics. Randal L. Schwartz in the first edition of the book Learning Perl,[96] in the first chapter states: Yes, sometimes Perl looks like line noise to the uninitiated, but to the seasoned Perl programmer, it looks like checksummed line noise with a mission in life.[97] He also stated that the accusation that Perl is a write-only language could be avoided by coding with "proper care".[97] The Perl overview document perlintro states that the names of built-in "magic" scalar variables "look like punctuation or line noise".[98] However, the English module provides both long and short English alternatives. perlstyle document states that line noise in regular expressions could be mitigated using the /x modifier to add whitespace.[99]
According to the Perl 6 FAQ,[100] Perl 6 was designed to mitigate "the usual suspects" that elicit the "line noise" claim from Perl 5 critics, including the removal of "the majority of the punctuation variables" and the sanitization of the regex syntax. The Perl 6 FAQ also states that what is sometimes referred to as Perl's line noise is "the actual syntax of the language" just as gerunds and prepositions are a part of the English language.[100] In a December 2012 blog posting, despite claiming that "Rakudo Perl 6 has failed and will continue to fail unless it gets some adult supervision", chromatic stated that the design of Perl 6 has a "well-defined grammar", an improved type system, a unified object system with an intelligent metamodel, metaoperators, and a clearer system of context that provides for such niceties as pervasive laziness.[101] He also stated that Perl 6 has a coherence and a consistency that Perl 5 lacks.[101]
In Perl, one could write the "Hello, World!" program as:

print "Hello, World!\n";

Here is a more complex Perl program, that counts down seconds from a given starting value:

#!/usr/bin/perl
use strict;
use warnings;

my ( $remaining, $total );

$remaining=$total=shift(@ARGV);

STDOUT->autoflush(1);

while ( $remaining ) {
    printf ( "Remaining %s/%s \r", $remaining--, $total );
    sleep 1;
}

print "\n";

The Perl interpreter can also be used for one-off scripts on the command line. The following example (as invoked from an sh-compatible shell, such as Bash) translates the string "Bob" in all files ending with .txt in the current directory to "Robert":

$ perl -i.bak -lp -e 's/Bob/Robert/g' *.txt

Implementation[edit]
No written specification or standard for the Perl language exists for Perl versions through Perl 5, and there are no plans to create one for the current version of Perl. There has been only one implementation of the interpreter, and the language has evolved along with it. That interpreter, together with its functional tests, stands as a de facto specification of the language. Perl 6, however, started with a specification,[102] and several projects[103] aim to implement some or all of the specification.[citation needed]
Perl is implemented as a core interpreter, written in C, together with a large collection of modules, written in Perl and C. As of 2010[update], the interpreter is 150,000 lines of C code and compiles to a 1 MB executable on typical machine architectures. Alternatively, the interpreter can be compiled to a link library and embedded in other programs. There are nearly 500 modules in the distribution, comprising 200,000 lines of Perl and an additional 350,000 lines of C code (much of the C code in the modules consists of character encoding tables).[citation needed]
The interpreter has an object-oriented architecture. All of the elements of the Perl language—scalars, arrays, hashes, coderefs, file handles—are represented in the interpreter by C structs. Operations on these structs are defined by a large collection of macros, typedefs, and functions; these constitute the Perl C API. The Perl API can be bewildering to the uninitiated, but its entry points follow a consistent naming scheme, which provides guidance to those who use it.[citation needed]
The life of a Perl interpreter divides broadly into a compile phase and a run phase.[104] According to Aluín et al., "Perl cannot be parsed by a straight Lex/Yacc lexer/parser combination. Instead, the interpreter implements its own lexer, which coordinates with a modified GNU bison parser to resolve ambiguities in the language."[105]
Most of what happens in Perl's compile phase is compilation, and most of what happens in Perl's run phase is execution, but there are significant exceptions. Perl makes important use of its capability to execute Perl code during the compile phase. Perl will also delay compilation into the run phase. The terms that indicate the kind of processing that is actually occurring at any moment are compile time and run time. Perl is in compile time at most points during the compile phase, but compile time may also be entered during the run phase. The compile time for code in a string argument passed to the eval built-in occurs during the run phase. Perl is often in run time during the compile phase and spends most of the run phase in run time. Code in BEGIN blocks executes at run time but in the compile phase.
At compile time, the interpreter parses Perl code into a syntax tree. At run time, it executes the program by walking the tree. Text is parsed only once, and the syntax tree is subject to optimization before it is executed, so that execution is relatively efficient. Compile-time optimizations on the syntax tree include constant folding and context propagation, but peephole optimization is also performed.[106]
Perl has a Turing-complete grammar because parsing can be affected by run-time code executed during the compile phase.[107] The code cannot be parsed by a straight Lex/Yacc lexer/parser. To resolve ambiguities in the language the interpreter must implement its own lexer to coordinate with a modified GNU bison parser.[108]
It is often said that "Only perl can parse Perl",[109] meaning that only the Perl interpreter (perl) can parse the Perl language (Perl), but even this is not, in general, true. Because the Perl interpreter can simulate a Turing machine during its compile phase, it would need to decide the halting problem in order to complete parsing in every case. It is a longstanding result that the halting problem is undecidable, and therefore not even Perl can always parse Perl. Perl makes the unusual choice of giving the user access to its full programming power in its own compile phase. The cost in terms of theoretical purity is high, but practical inconvenience seems to be rare.[110]
Other programs that undertake to parse Perl, such as source-code analyzers and auto-indenters, have to contend not only with ambiguous syntactic constructs but also with the undecidability of Perl parsing in the general case. Adam Kennedy's PPI project focused on parsing Perl code as a document (retaining its integrity as a document), instead of parsing Perl as executable code (that not even Perl itself can always do). It was Kennedy who first conjectured that "parsing Perl suffers from the 'halting problem',"[111] which was later proved.[112]
Perl is distributed with over 250,000 functional tests for core Perl language and over 250,000 functional tests for core modules. These run as part of the normal build process and extensively exercise the interpreter and its core modules. Perl developers rely on the functional tests to ensure that changes to the interpreter do not introduce software bugs; further, Perl users who see that the interpreter passes its functional tests on their system can have a high degree of confidence that it is working properly.[citation needed]

Ports[edit]
Perl is dual licensed under both the Artistic License 1.0[5][6] and the GNU General Public License.[7] Distributions are available for most operating systems. It is particularly prevalent on Unix and Unix-like systems, but it has been ported to most modern (and many obsolete) platforms. With only six[citation needed] reported exceptions, Perl can be compiled from source code on all POSIX-compliant, or otherwise-Unix-compatible, platforms.[113]
Because of unusual changes required for the classic Mac OS environment, a special port called MacPerl was shipped independently.[114]
The Comprehensive Perl Archive Network carries a complete list of supported platforms with links to the distributions available on each.[115] CPAN is also the source for publicly available Perl modules that are not part of the core Perl distribution.[citation needed]
ActivePerl is a closed-source distribution from ActiveState that has regular releases that track the core Perl releases.[116] The distribution previously included the Perl package manager (PPM),[117] a popular tool for installing, removing, upgrading, and managing the use of common Perl modules; however, this tool was discontinued as of ActivePerl 5.28.[118] Included also is PerlScript, a Windows Script Host (WSH) engine implementing the Perl language. Visual Perl is an ActiveState tool that adds Perl to the Visual Studio .NET development suite. A VBScript-to-Perl converter, a Perl compiler for Windows, and converters of AWK and sed to Perl have also been produced by this company and included on the ActiveState CD for Windows, which includes all of their distributions plus the Komodo IDE and all but the first on the Unix–Linux–POSIX variant thereof in 2002 and afterward.[citation needed]

Performance[edit]
The Computer Language Benchmarks Game compares the performance of implementations of typical programming problems in several programming languages.[119] The submitted Perl implementations typically perform toward the high end of the memory-usage spectrum and give varied speed results. Perl's performance in the benchmarks game is typical for interpreted languages.[120]
Large Perl programs start more slowly than similar programs in compiled languages because Perl has to compile the source every time it runs. In a talk at the YAPC::Europe 2005 conference and subsequent article "A Timely Start", Jean-Louis Leroy found that his Perl programs took much longer to run than expected because the perl interpreter spent significant time finding modules within his over-large include path.[121] Unlike Java, Python, and Ruby, Perl has only experimental support for pre-compiling.[122] Therefore, Perl programs pay this overhead penalty on every execution. The run phase of typical programs is long enough that amortized startup time is not substantial, but benchmarks that measure very short execution times are likely to be skewed due to this overhead.[123]
A number of tools have been introduced to improve this situation. The first such tool was Apache's mod_perl, which sought to address one of the most-common reasons that small Perl programs were invoked rapidly: CGI Web development. ActivePerl, via Microsoft ISAPI, provides similar performance improvements.[124]
Once Perl code is compiled, there is additional overhead during the execution phase that typically isn't present for programs written in compiled languages such as C or C++. Examples of such overhead include bytecode interpretation, reference-counting memory management, and dynamic type-checking.[125]
The most critical routines can be written in other languages (such as C), which can be connected to Perl via simple Inline modules or the more complex, but flexible, XS mechanism.[126]

Applications[edit]
Perl has many and varied applications, compounded by the availability of many standard and third-party modules.
Perl has chiefly been used to write CGI scripts: large projects written in Perl include cPanel, Slash, Bugzilla, RT, TWiki, and Movable Type; high-traffic websites that use Perl extensively include Priceline.com, Craigslist,[127] IMDb,[128] LiveJournal, DuckDuckGo,[129][130] Slashdot and Ticketmaster. 
It is also an optional component of the popular LAMP technology stack for Web development, in lieu of PHP or Python. Perl is used extensively as a system programming language in the Debian Linux distribution.[131]
Perl is often used as a glue language, tying together systems and interfaces that were not specifically designed to interoperate, and for "data munging",[132] that is, converting or processing large amounts of data for tasks such as creating reports. These strengths are linked intimately. The combination makes Perl a popular all-purpose language for system administrators, particularly because short programs, often called "one-liner programs", can be entered and run on a single command line.[citation needed]
Perl code can be made portable across Windows and Unix; such code is often used by suppliers of software (both commercial off-the-shelf (COTS) and bespoke) to simplify packaging and maintenance of software build- and deployment-scripts.[citation needed]
Perl/Tk and wxPerl are commonly used to add graphical user interfaces to Perl scripts.
Perl's text-handling capabilities can be used for generating SQL queries; arrays, hashes, and automatic memory management make it easy to collect and process the returned data. For example, in Tim Bunce's Perl DBI application programming interface (API), the arguments to the API can be the text of SQL queries; thus it is possible to program in multiple languages at the same time (e.g., for generating a Web page using HTML, JavaScript, and SQL in a here document). The use of Perl variable interpolation to programmatically customize each of the SQL queries, and the specification of Perl arrays or hashes as the structures to programmatically hold the resulting data sets from each SQL query, allows a high-level mechanism for handling large amounts of data for post-processing by a Perl subprogram.[133]
In early versions of Perl, database interfaces were created by relinking the interpreter with a client-side database library. This was sufficiently difficult that it was done for only a few of the most-important and most widely used databases, and it restricted the resulting perl executable to using just one database interface at a time.[134]
In Perl 5, database interfaces are implemented by Perl DBI modules. The DBI (Database Interface) module presents a single, database-independent interface to Perl applications, while the DBD (Database Driver) modules handle the details of accessing some 50 different databases; there are DBD drivers for most ANSI SQL databases.[135]
DBI provides caching for database handles and queries, which can greatly improve performance in long-lived execution environments such as mod_perl,[136] helping high-volume systems avert load spikes as in the Slashdot effect.[137]
In modern Perl applications, especially those written using web frameworks such as Catalyst, the DBI module is often used indirectly via object-relational mappers such as DBIx::Class, Class::DBI[138] or Rose::DB::Object[139] that generate SQL queries and handle data transparently to the application author.[140]

Community[edit]
Perl's culture and community has developed alongside the language itself. Usenet was the first public venue in which Perl was introduced, but over the course of its evolution, Perl's community was shaped by the growth of broadening Internet-based services including the introduction of the World Wide Web. The community that surrounds Perl was, in fact, the topic of Wall's first "State of the Onion" talk.[141]
State of the Onion is the name for Wall's yearly keynote-style summaries on the progress of Perl and its community. They are characterized by his hallmark humor, employing references to Perl's culture, the wider hacker culture, Wall's linguistic background, sometimes his family life, and occasionally even his Christian background.[142] Each talk is first given at various Perl conferences and is eventually also published online.
In email, Usenet, and message board postings, "Just another Perl hacker" (JAPH) programs are a common trend, originated by Randal L. Schwartz, one of the earliest professional Perl trainers.[143] In the parlance of Perl culture, Perl programmers are known as Perl hackers, and from this derives the practice of writing short programs to print out the phrase "Just another Perl hacker, [sic]". In the spirit of the original concept, these programs are moderately obfuscated and short enough to fit into the signature of an email or Usenet message. The "canonical" JAPH as developed by Schwartz includes the comma at the end, although this is often omitted.[144]

Perl "golf" is the pastime of reducing the number of characters (key "strokes") used in a Perl program to the bare minimum, much in the same way that golf players seek to take as few shots as possible in a round. The phrase's first use[145] emphasized the difference between pedestrian code meant to teach a newcomer and terse hacks likely to amuse experienced Perl programmers, an example of the latter being JAPHs that were already used in signatures in Usenet postings and elsewhere. Similar stunts had been an unnamed pastime in the language APL in previous decades. The use of Perl to write a program that performed RSA encryption prompted a widespread and practical interest in this pastime.[146] In subsequent years, the term "code golf" has been applied to the pastime in other languages.[147] A Perl Golf Apocalypse was held at Perl Conference 4.0 in Monterey, California in July 2000.
As with C, obfuscated code competitions were a well known pastime in the late 1990s. The Obfuscated Perl Contest was a competition held by The Perl Journal from 1996 to 2000 that made an arch virtue of Perl's syntactic flexibility. Awards were given for categories such as "most powerful"—programs that made efficient use of space—and "best four-line signature" for programs that fit into four lines of 76 characters in the style of a Usenet signature block.[148]
Perl poetry is the practice of writing poems that can be compiled as legal Perl code, for example the piece known as "Black Perl". Perl poetry is made possible by the large number of English words that are used in the Perl language. New poems are regularly submitted to the community at PerlMonks.[149]

See also[edit]

Free and open-source software portalComputer programming portal
Outline of Perl
Perl Data Language
Perl Object Environment
Plain Old Documentation
References[edit]


^ a b c Ashton, Elaine (1999). "The Timeline of Perl and its Culture (v3.0_0505)". Archived from the original on January 11, 2013. Retrieved March 12, 2004.

^ "Perl v5.40.1 is now available". www.nntp.perl.org. Retrieved January 19, 2025.

^ "Perl 5.38.3 is now available". www.nntp.perl.org. Retrieved January 19, 2025.

^ "Release announcement for perl v5.41.3". www.nntp.perl.org. Retrieved August 29, 2024.

^ a b "The "Artistic License" - dev.perl.org". dev.perl.org. Archived from the original on July 24, 2018. Retrieved June 24, 2016.

^ a b Artistic Archived July 25, 2018, at the Wayback Machine - file on the Perl 5 git repository

^ a b "Perl Licensing". dev.perl.org. Archived from the original on January 22, 2011. Retrieved January 8, 2011.

^ Wall, Larry (December 12, 2007). "Programming is Hard, Let's Go Scripting..." Archived from the original on July 28, 2017. Retrieved April 14, 2019. All language designers have their occasional idiosyncracies. I'm just better at it than most.

^ Lapworth, Leo. "General Questions About Perl". Perl FAQ. Perl.org. Archived from the original on May 28, 2013. Retrieved February 24, 2012.

^ "perl(1): Practical Extraction/Report Language - Linux man page". Linux.die.net. Archived from the original on June 3, 2013. Retrieved July 23, 2013.

^ a b c d e f Long, Tony. "Dec. 18, 1987: Perl Simplifies the Labyrinth That Is Programming Language". Wired. ISSN 1059-1028. Retrieved February 14, 2023.

^ Sheppard, Doug (October 16, 2000). "Beginner's Introduction to Perl". dev.perl.org. Archived from the original on June 5, 2011. Retrieved January 8, 2011.

^ a b "Larry Wall, the Guru of Perl". Linux Journal. Retrieved August 30, 2023.

^ "About Perl". perl.org. Archived from the original on November 6, 2015. Retrieved April 20, 2013. "Perl" is a family of languages, "Perl 6" is part of the family, but it is a separate language that has its own development team. Its existence has no significant impact on the continuing development of "Perl 5".

^ "Path to Raku". GitHub. Archived from the original on November 12, 2020. Retrieved January 14, 2021. This document describes the steps to be taken to effectuate a rename of Perl 6 to Raku

^ a b c d Wall, Larry; Christiansen, Tom; Orwant, Jon (July 2000). Programming Perl, Third Edition. O'Reilly Media. ISBN 978-0-596-00027-1.

^ "How programs are measured". Computer Language Benchmarks Game, Debian.net. Archived from the original on July 12, 2020. Retrieved October 5, 2020.

^ "RSA in 3 lines of perl - Everything2.com". everything2.com. Archived from the original on October 8, 2020. Retrieved October 5, 2020.

^ "Language Evaluations". Archived from the original on March 10, 2015. Retrieved January 30, 2015. Perl's strongest point is its extremely powerful built-in facilities for pattern-directed processing of textual, line-oriented data formats; it is unsurpassed at this.

^ "You Used Perl to Write WHAT?!". January 24, 2008. Archived from the original on February 4, 2015. Retrieved February 4, 2015. perl has always been the go-to language for any task that involves pattern-matching input

^ "The Importance of Perl". Archived from the original on February 2, 2015. Retrieved February 4, 2015. Perl's unparalleled ability to process text...

^ Smith, Roderick W. (June 21, 2002). Advanced Linux Networking. Addison-Wesley Professional. p. 594. ISBN 978-0-201-77423-8.

^ Sheppard, Doug (October 16, 2000). "Beginner's Introduction to Perl". O'Reilly Media. Archived from the original on June 4, 2008. Retrieved July 27, 2008.

^ Leonard, Andrew. "The joy of Perl". Salon.com. Archived from the original on July 6, 2012. Retrieved June 5, 2012.

^ "Scripting on the Lido Deck". Wired. March 7, 2016. Archived from the original on March 7, 2016. Retrieved February 14, 2023.

^ Richardson, Marjorie (May 1, 1999). "Larry Wall, the Guru of Perl". Linux Journal. Archived from the original on July 20, 2013. Retrieved January 3, 2011.

^ Schwartz, Randal; foy, brian; Phoenix, Tom (June 16, 2011). Learning Perl. O'Reilly Media, Inc. p. 4. ISBN 978-1449313142. Perl is sometimes called the "Practical Extraction and Report Language", although it has also been called a "Pathologically Eclectic Rubbish Lister", among other expansions. It's actually a backronym, not an acronym, since Larry Wall, Perl's creator, came up with the name first and the expansion later. That's why 'Perl' isn't in all caps. There's no point in arguing that expansion is correct: Larry endorses both.

^ Wall, Larry. "perl - The Perl language interpreter". Perl 5 version 12.2 documentation. Archived from the original on July 1, 2013. Retrieved January 26, 2011.

^ a b Schwartz, Randal L; Phoenix, Tom; Foy, Brian (December 6, 2007). Learning Perl, Third Edition. O'Reilly Media. ISBN 978-0-596-00132-2.

^ a b "The Perl Camel Usage and Trademark Information". O'Reilly Media. Archived from the original on April 25, 2018. Retrieved January 9, 2011.

^ "Perl Trademark". The Perl Foundation. Archived from the original on May 3, 2011. Retrieved January 9, 2011.

^ Gillmore, Dan (October 25, 1998). "Republic Of Perl". Chicago Tribune. Archived from the original on April 30, 2011. Retrieved January 10, 2011.

^ a b c Kalita, Jugal (December 2003). On Perl: Perl for Students and Professionals. Universal-Publishers. ISBN 978-1-58112-550-4.

^ "Perl Culture". docstore.mik.ua. Retrieved March 16, 2023.

^ Holloway, Ruth. "Perl turns 30 and its community continues to thrive". Opensource.com. Retrieved June 23, 2023.

^ "Programming Perl, 3rd Edition [Book]". www.oreilly.com. Retrieved April 11, 2023.

^ "perlhist - the Perl history records - Perldoc Browser". perldoc.perl.org. Retrieved July 28, 2023.

^ "perl.perl5.porters archive". perl.org. Archived from the original on May 1, 2011. Retrieved January 13, 2011.

^ a b "perlhist: the Perl history records". Perl 5 version 12.2 documentation. perldoc.perl.org. Archived from the original on January 13, 2011. Retrieved January 21, 2011.

^ "Perl: Definition, History, & Facts". Britannica.com. Retrieved June 15, 2022.

^ "CPAN". CPAN. Archived from the original on October 3, 2019. Retrieved December 19, 2022.

^ a b "perl5004delta – what's new for perl5.004". Perl 5 version 12.2 documentation. perldoc.perl.org. Archived from the original on February 27, 2011. Retrieved January 8, 2011.

^ Patwardhan, Nathan; Siever, Ellen; Spainhour, Stephen (2002). Perl in a Nutshell, Second Edition. O'Reilly Media. ISBN 978-0-596-00241-1.

^ "perl5005delta - what's new for perl5.005". Perl 5 version 12.2 documentation. perldoc.perl.org. Archived from the original on February 3, 2011. Retrieved January 21, 2011.

^ "Perl Source". cpan.org. Retrieved November 26, 2023.

^ "perl56delta - what's new for perl v5.6.0". Perl 5 version 12.2 documentation. perldoc.perl.org. Archived from the original on February 2, 2011. Retrieved January 21, 2011.

^ "perl56delta - what's new for perl v5.6.x". Perl 5 version 12.2 documentation. perldoc.perl.org. Archived from the original on November 18, 2010. Retrieved January 21, 2011.

^ "Perl | Definition, History, & Facts | Britannica". www.britannica.com. Retrieved June 15, 2022.

^ Wall, Larry. "Apocalypse 1: The Ugly, the Bad, and the Good". Archived from the original on November 23, 2010. Retrieved January 8, 2011.

^ "perl58delta - what is new for perl v5.8.0". Perl 5 version 12.2 documentation. perldoc.perl.org. Archived from the original on November 21, 2010. Retrieved January 21, 2011.

^ "A Plan for Pugs". O'Reilly Media. March 3, 2005. Archived from the original on September 8, 2012. Retrieved January 27, 2011.

^ Tang, Audrey (April 21, 2010). "Re: How to Implement Perl 6 in Ten Years". PerlMonks. Archived from the original on May 11, 2011. Retrieved January 3, 2011.

^ Broadwell, Geoff (August 8, 2005), OSCON 4.4: Inside Ponie, the Bridge from Perl 5 to Perl 6, O'Reilly ONLamp Blog, archived from the original on March 14, 2012, retrieved June 27, 2016

^ Vincent, Jesse (August 23, 2006), Ponie has been put out to pasture, The Perl Foundation, archived from the original on June 27, 2009, retrieved January 15, 2019

^ "perl5100delta - what is new for perl 5.10.0". Perl 5 version 12.2 documentation. perldoc.perl.org. Archived from the original on December 21, 2010. Retrieved January 8, 2011.

^ "perlsyn - Perl syntax". Perl 5 version 12.2 documentation. perldoc.perl.org. Archived from the original on August 26, 2013. Retrieved January 21, 2011.

^ "perl5120delta - what is new for perl v5.12.0". Perl 5 version 12.2 documentation. perldoc.perl.org. Archived from the original on January 4, 2011. Retrieved January 8, 2011.

^ "perl5140delta - what is new for perl v5.14.0 - metacpan.org". metacpan.org. Archived from the original on July 25, 2018. Retrieved July 22, 2017.

^ a b "perl5160delta - what is new for perl v5.16.0". perldoc.perl.org. Retrieved May 21, 2012.

^ "perl5180delta - what is new for perl v5.18.0 - Perl programming language". Perl 5 version 18.0 documentation. metacpan.org. Archived from the original on October 29, 2013. Retrieved October 27, 2013.

^ "perl5200delta - what is new for perl v5.20.0 - Perl programming language". Perl 5 version 20.0 documentation. metacpan.org. Archived from the original on May 27, 2014. Retrieved May 27, 2014.

^ Milestones in the Perl Renaissance – Modern Perl Programming Archived October 27, 2012, at the Wayback Machine. Modernperlbooks.com. Retrieved on 2013-07-17.

^ Preface (Modern Perl 2011-2012) Archived September 28, 2012, at the Wayback Machine. Modernperlbooks.com. Retrieved on 2013-07-17.

^ Modern Perl 2011-2012 edition by chromatic |Onyx Neon Press Archived December 22, 2011, at the Wayback Machine. Onyxneon.com. Retrieved on 2013-07-17.

^ "Enlightened Perl". Enlightened Perl. Archived from the original on February 5, 2014. Retrieved September 28, 2012.

^ "YAPC::NA 2013 – June 3–5, Austin, Texas". Yapcna.org. June 4, 2013. Archived from the original on June 22, 2013. Retrieved April 11, 2014.

^ Little, Stevan (February 8, 2013). "What is Moe (a clarification) | Stevan Little". Blogs.perl.org. Archived from the original on December 19, 2013. Retrieved April 11, 2014.

^ "p2 on potion". Perl11.org. February 7, 2004. Archived from the original on September 24, 2013. Retrieved April 11, 2014.

^ "goccy/gperl 路 GitHub". GitHub.com. Archived from the original on February 23, 2015. Retrieved April 11, 2014.

^ "rperl". RPerl.org. Archived from the original on October 18, 2014. Retrieved August 11, 2014.

^ "Perl 6". The Perl 6 Project. Archived from the original on February 21, 2011. Retrieved February 27, 2011.

^ Torkington, Nathan. "Transcription of Larry's talk". nntp.perl.org. Archived from the original on May 1, 2011. Retrieved January 25, 2011.

^ "Perl6 - The future of Perl". www.java-samples.com. Retrieved May 18, 2021.

^ "Official Perl 6 Documentation". The Perl 6 Project. Archived from the original on August 31, 2009. Retrieved January 25, 2011.

^ Kuhn, Bradley M. (January 2001). Considerations on Porting Perl to the Java Virtual Machine (MS thesis). University of Cincinnati. Archived from the original on March 21, 2008. Retrieved June 28, 2008.

^ chromatic (2015). Modern Perl. Pragmatic Bookshelf. ISBN 978-1-68050-088-2.

^ "Feature comparison of Perl 6 compilers". Archived from the original on August 11, 2017. Retrieved March 28, 2012.

^ Worthington, Jonathan (July 15, 2013). "Rakudo JVM News: More tests, plus Thread and Promise prototypes". 6guts. Archived from the original on October 5, 2013. Retrieved July 24, 2013.

^ Worthington, Jonathan (May 31, 2013). "MoarVM: A virtual machine for NQP and Rakudo". 6guts. Archived from the original on July 9, 2013. Retrieved July 24, 2013.

^ "rename-lwn". Archived from the original on October 17, 2019. Retrieved November 10, 2019.

^ "rakudo/rakudo - GitHub". GitHub.com. Archived from the original on July 29, 2017. Retrieved September 21, 2013.

^ a b "Perl 7 announced at Perl Conference in the Cloud". perlfoundation.org. June 24, 2020. Archived from the original on June 26, 2020. Retrieved June 24, 2020.

^ a b "Announcing Perl 7". perl.com. June 24, 2020. Archived from the original on June 24, 2020. Retrieved June 24, 2020.

^ Clark, Nicholas (May 9, 2021). "Steering Council meeting #019 2021-05-06". www.nntp.perl.org. Archived from the original on May 18, 2021. Retrieved May 17, 2021. The plan remains that there will be a Perl 7 bump, but not immediately after 5.34.0 is released. ... We don't think that we can deliver on [Perl 7] in 12 months.

^ Preparing for Perl 7d. leanpub.com. June 24, 2020. Archived from the original on June 25, 2020. Retrieved June 24, 2020.

^ Perl Steering Council. "What happened to Perl 7?". blogs.perl.org. Retrieved July 7, 2022.

^ Richardson, Marjorie. "Larry Wall, the Guru of Perl | Linux Journal". www.linuxjournal.com. Linux Journal. Retrieved January 16, 2023.

^ Schwartz, Alan (December 1998). "Tutorial: Perl, a psychologically efficient reformatting language". Behavior Research Methods, Instruments, & Computers. 30 (4): 605–609. doi:10.3758/BF03209477. ISSN 0743-3808. S2CID 61028367.

^ Gilbert, James G. R. (March 2002). "How to become a programming tadpole". Nature Biotechnology. 20 (3): 221. doi:10.1038/nbt0302-221. ISSN 1087-0156. S2CID 38728402.

^ Myhrvold, Conor (February 13, 2014). "The Fall Of Perl, The Web's Most Promising Language". FastCompany.

^ Wall, Larry. "perl - The Perl 5 language interpreter - Perldoc Browser". perldoc.perl.org. Retrieved June 24, 2021.

^ Wall, Larry (March 1, 1997). "Wherefore Art, Thou?". Linux Journal. Archived from the original on December 9, 2010. Retrieved March 13, 2011.

^ "perlfunc - Perl builtin functions". Perl 5 version 12.2 documentation. perldoc.perl.org. Archived from the original on January 6, 2011. Retrieved January 10, 2011.

^ Nagpal, D.P. (2010). Web Design Technology. India: S. Chand. p. 700. ISBN 978-8121927635.

^ "title unknown". May 10, 1997. Usenet: 199705101952.MAA00756@wall.org.[dead link]

^ "Developer Update". Dr. Dobb's Developer Update. 2. Miller-Freeman: 15. 1995.

^ a b Schwartz, Randal L. (1993). Learning Perl. O'Reilly & Associates. Bibcode:1993lepe.book.....S.

^ "perlintro". Perl 5 version 18.0 documentation. Perl 5 Porters and perldoc.perl.org. Archived from the original on January 9, 2011. Retrieved June 30, 2013.

^ "perlstyle". Perl 5 version 18.0 documentation. Perl 5 Porters and perldoc.perl.org. Archived from the original on June 26, 2013. Retrieved June 30, 2013.

^ a b "Perl 6 FAQ". Perl 6 Project. Archived from the original on July 1, 2013. Retrieved June 30, 2013.

^ a b chromatic (December 31, 2012). "The Implementation of Perl 5 versus Perl 6". Archived from the original on July 29, 2013. Retrieved June 30, 2013.

^ "Perl 6 Specification". The Perl 6 Project. Archived from the original on December 2, 2009. Retrieved January 27, 2011.

^ "Perl 6 Compilers". The Perl 6 Project. Archived from the original on December 2, 2009. Retrieved January 27, 2011.

^ A description of the Perl 5 interpreter can be found in Programming Perl, 3rd Ed., chapter 18. See particularly page 467, which carefully distinguishes run phase and compile phase from run time and compile time. Perl "time" and "phase" are often confused.

^ Abuin, Jose M.; Pichel, Juan C.; Pena, Tomas F.; Gamallo, Pablo; Garcia, Marcos (2014). "Perldoop: Efficient execution of Perl scripts on Hadoop clusters". 2014 IEEE International Conference on Big Data (Big Data). IEEE. pp. 766–771. doi:10.1109/BigData.2014.7004303. ISBN 978-1-4799-5666-1.

^ "perlguts - Introduction to the Perl API - Perldoc Browser". perldoc.perl.org. Retrieved January 24, 2022.

^ Schwartz, Randal. "On Parsing Perl". Archived from the original on September 27, 2007. Retrieved January 3, 2007.

^ Abuin, Jose M.; Pichel, Juan C.; Pena, Tomas F.; Gamallo, Pablo; Garcia, Marcos (2014). "Perldoop: Efficient execution of Perl scripts on Hadoop clusters". 2014 IEEE International Conference on Big Data (Big Data). IEEE. pp. 766–771. doi:10.1109/BigData.2014.7004303. ISBN 978-1-4799-5666-1.

^ "The Perl Journal #19/9.26" (PDF). O'Reilly Media. Retrieved February 4, 2011.[permanent dead link]

^ Kegler, Jeffrey (October 7, 2011). "Perl and Parsing 11: Are all Perl programs parseable?". Retrieved October 25, 2022. ... we seem to be giving up absolutely nothing. Nobody has ever been able to show a practical downside

^ Kennedy, Adam (2006). "PPI—Parse, Analyze and Manipulate Perl (without perl)". CPAN. Archived from the original on September 3, 2013. Retrieved September 16, 2013.

^ "Rice's Theorem". The Perl Review. 4 (3): 23–29. Summer 2008. and "Perl is Undecidable". The Perl Review. 5: 7–11. Fall 2008., available online at Kegler, Jeffrey. "Perl and Undecidability". Archived from the original on August 17, 2009. Retrieved January 4, 2009.

^ Hietaniemi, Jarkko (1998). "Perl Ports (Binary Distributions)". CPAN.org. Archived from the original on April 18, 2006. Retrieved April 16, 2006.

^ "The MacPerl Pages". Prime Time Freeware. 1997. Archived from the original on January 18, 2006. Retrieved January 18, 2006.

^ "Perl Ports (Binary Distributions)". CPAN. Archived from the original on April 18, 2006. Retrieved January 27, 2011.

^ "ActivePerl is Perl for Windows, Mac, Linux, AIX, HP-UX & Solaris". ActiveState Software. Archived from the original on March 31, 2016. Retrieved January 9, 2011.

^ "Using PPM". ActiveState Software. Archived from the original on August 27, 2010. Retrieved January 9, 2011.

^ Crane, Dana (July 23, 2019). "Goodbye PPM, Hello State Tool". Activestate.com. Archived from the original on July 28, 2020. Retrieved April 16, 2020.

^ "Alioth: The Computer Language Benchmarks Game: Project Info". Alioth. Archived from the original on March 25, 2013. Retrieved January 13, 2011.

^ "Which programs are fastest?". Computer Language Benchmarks Game. Alioth. Archived from the original on May 17, 2013. Retrieved January 13, 2011.

^ Leroy, Jean-Louis (December 1, 2005). "A Timely Start". O'Reilly. Archived from the original on June 13, 2006. Retrieved May 22, 2006.

^ Beattie, Malcolm & Enache Adrian (2003). "B::Bytecode Perl compiler's bytecode backend". CPAN. Archived from the original on March 30, 2021. Retrieved September 16, 2013.

^ Schwartz, Randal; foy, brian; Phoenix, Tom (June 23, 2011). Learning Perl. "O'Reilly Media, Inc.". ISBN 978-1-4493-0358-7.

^ Stein, Lincoln; MacEachern, Doug (1999). Writing Apache Modules with Perl and C: The Apache API and Mod_perl. "O'Reilly Media, Inc.". ISBN 978-1-56592-567-0.

^ Bekman, Stas; Cholet, Eric (2003). Practical Mod_perl. "O'Reilly Media, Inc.". ISBN 978-0-596-00227-5.

^ Ingerson, Brian. "Inline - metacpan.org". CPAN. Archived from the original on June 13, 2013. Retrieved January 26, 2011.

^ Gilmore, W. J. (2010). Beginning PHP and MySQL: From Novice to Professional, Fourth Edition. Apress. p. 484. ISBN 978-1-4302-3114-1.

^ "IMDb Helpdesk: What software/hardware are you using to run the site?". Internet Movie Database. Archived from the original on March 9, 2017. Retrieved February 12, 2011.

^ DuckDuckGo handles a large amount of search queries at 4.5 million queries per day . https://duckduckgo.com/traffic.html Archived February 15, 2012, at the Library of Congress Web Archives

^ DuckDuckGo uses Perl https://web.archive.org/web/20101231135106/http://www.gabrielweinberg.com/blog/2009/03/duck-duck-go-architecture.html

^ "Perl FAQ". Archived from the original on August 6, 2019. Retrieved August 6, 2019. Perl is used quite extensively in Debian. Not only are some core functions written in Perl, but there are over 700 packages in unstable that have perl in their name (Mar 2004).

^ "Perl Books - Book: Data Munging with Perl". Perl.org. Archived from the original on September 7, 2011. Retrieved December 30, 2010.

^ Descartes, Alligator; Bunce, Tim (2000). Programming the Perl DBI : [database programming with Perl] (1 ed.). Beijing [u.a.]: O'Reilly. ISBN 978-1-56592-699-8.

^ "Perl Programming - Principles of Programming Languages". sites.google.com. Archived from the original on October 8, 2020. Retrieved May 18, 2021.

^ Bunce, Tim; Descartes, Alligator (February 4, 2000). Programming the Perl DBI: Database programming with Perl. "O'Reilly Media, Inc.". ISBN 978-1-4493-1536-8.

^ Bekman, Stas. "Efficient Work with Databases under mod_perl". Archived from the original on August 22, 2007. Retrieved September 1, 2007.

^ Pachev, Sasha (April 10, 2007). Understanding MySQL Internals: Discovering and Improving a Great Database. "O'Reilly Media, Inc.". ISBN 978-0-596-55280-0.

^ "Class::DBI - Simple Database Abstraction - metacpan.org". metacpan.org. Archived from the original on August 6, 2020. Retrieved April 8, 2020.

^ "Rose::DB::Object - Extensible, high performance object-relational mapper (ORM). - metacpan.org". metacpan.org. Archived from the original on August 6, 2020. Retrieved April 8, 2020.

^ "T sql querying developer reference". pdfpremiumfree.com. Retrieved May 18, 2021.

^ Wall, Larry (May 22, 2014). "Perl Culture (AKA the first State of the Onion)". Archived from the original on May 22, 2014. Retrieved May 22, 2014.

^ Wall, Larry. "2nd State of the Onion". Archived from the original on July 17, 2012. Retrieved October 12, 2012. (Search for 'church')

^ Schwartz, Randal L. (May 2, 1999). "Who is Just another Perl hacker?". Newsgroup: comp.lang.perl.misc. Usenet: m1hfpvh2jq.fsf@halfdome.holdit.com. Archived from the original on July 8, 2012. Retrieved December 5, 2014.

^ Schwartz, Randal (March 31, 2005). "Canonical JAPH". PerlMonks. Archived from the original on July 22, 2011. Retrieved May 16, 2011.

^ Bacon, Greg (May 28, 1999). "Re: Incrementing a value in a slice". Newsgroup: comp.lang.perl.misc. Usenet: 7imnti$mjh$1@info2.uah.edu. Archived from the original on July 7, 2011. Retrieved July 12, 2011.

^ Back, Adam. "RSA in 5 lines of perl". Archived from the original on January 19, 2011. Retrieved January 10, 2011.

^ "Code Golf: What is Code Golf?". 29degrees. 2007. Archived from the original on January 13, 2012. Retrieved November 26, 2018.

^ Gallo, Felix (2003). "The Zeroth Obfuscated Perl Contest" (PDF). In Jon Orwant (ed.). Games, diversions, and Perl culture: best of the Perl journal. O'Reilly Media. Archived from the original (PDF) on November 22, 2009. Retrieved January 12, 2011.

^ "Perl Poetry". PerlMonks. Archived from the original on September 27, 2007. Retrieved January 27, 2011.


Further reading[edit]
Learning Perl 6th Edition (2011), O'Reilly. Beginner-level introduction to Perl.
Beginning Perl 1st Edition (2012), Wrox. A beginner's tutorial for those new to programming or just new to Perl.
Modern Perl Archived December 22, 2011, at the Wayback Machine 2nd Edition (2012), Onyx Neon. Describes Modern Perl programming techniques.
Programming Perl 4th Edition (2012), O'Reilly. The definitive Perl reference.
Effective Perl Programming 2nd Edition (2010), Addison-Wesley. Intermediate- to advanced-level guide to writing idiomatic Perl.
Perl Cookbook, ISBN 0-596-00313-7. Practical Perl programming examples.
Dominus, Mark Jason (2005). Higher Order Perl. Morgan Kaufmann. ISBN 978-1-55860-701-9. Functional programming techniques in Perl.
External links[edit]


Perl  at Wikipedia's sister projects

Definitions from WiktionaryMedia from CommonsQuotations from WikiquoteTextbooks from WikibooksResources from Wikiversity

Official website 
vtePerlThings
CPAN
Perl Foundation
Perl Mongers
PerlMonks
archives
module
Perl VM
YAPC
Frameworks
BioPerl
Catalyst
Dancer
DBI
DBIx::Class
LWP
Mojolicious
Moose
Plack
PSGI
Template Toolkit
Software
Amavis
Argus
@SSP
AWStats
BackupPC
Bricolage
Bugzilla
Dada Mail
ikiwiki
Makepp
Movable Type
Munin
OTRS
Request Tracker
SpamAssassin
TWiki/Foswiki
W3Perl
Webmin
Related
Parrot
Raku
Rakudo
rules
MoarVM
Books
Programming Perl
Learning Perl
Intermediate Perl
Perl Best Practices
People
Larry Wall
Randal L. Schwartz
Damian Conway
Allison Randal
Audrey Tang
Sean M. Burke
chromatic
brian d foy
Jesse Vincent

Outline
Category

vteProgramming languages
Comparison
Timeline
History

Ada
ALGOL
Simula
APL
Assembly
BASIC
Visual Basic
classic
.NET
C
C++
C#
COBOL
Erlang
Elixir
Forth
Fortran
Go
Haskell
Java
JavaScript
Julia
Kotlin
Lisp
Lua
MATLAB
ML
Caml 
OCaml
Pascal
Object Pascal
Perl 
Raku
PHP
Prolog
Python
R
Ruby
Rust
SAS
SQL
Scratch
Shell
Smalltalk
Swift
more...

 Lists: Alphabetical
Categorical
Generational
Non-English-based
 Category

vteFree and open-source softwareGeneral
Alternative terms for free software
Comparison of open-source and closed-source software
Comparison of source-code-hosting facilities
Free software
Free software project directories
Gratis versus libre
Long-term support
Open-source software
Open-source software development
Outline
Timeline
Softwarepackages
Audio
Bioinformatics
Codecs
Configuration management
Drivers
Graphics
Wireless
Health
Mathematics
Office suites
Operating systems
Routing
Television
Video games
Web applications
E-commerce
Android apps
iOS apps
Commercial
Formerly proprietary
Formerly open-source
Community
Free software movement
History
Open-source-software movement
Events
Advocacy
Organisations
Free Software Movement of India
Free Software Foundation
Licenses
AFL
Apache
APSL
Artistic
Beerware
BSD
Creative Commons
CDDL
EPL
Free Software Foundation
GNU GPL
GNU AGPL
GNU LGPL
ISC
MIT
MPL
Python
Python Software Foundation License
Shared Source Initiative
Sleepycat
Unlicense
WTFPL
zlib
Types and standards
Comparison of licenses
Contributor License Agreement
Copyleft
Debian Free Software Guidelines
Definition of Free Cultural Works
Free license
The Free Software Definition
The Open Source Definition
Open-source license
Permissive software license
Public domain

Challenges
Digital rights management
License proliferation
Mozilla software rebranding
Proprietary device drivers
Proprietary firmware
Proprietary software
SCO/Linux controversies
Software patents
Software security
Tivoization
Trusted Computing
Related topics
Forking
GNU Manifesto
Microsoft Open Specification Promise
Open-core model
Open-source hardware
Shared Source Initiative
Source-available software
The Cathedral and the Bazaar
Revolution OS

 Portal
 Category

Authority control databases NationalGermanyUnited StatesFranceBnF dataCzech RepublicSpainIsraelOtherELMCIP




Retrieved from "https://en.wikipedia.org/w/index.php?title=Perl&oldid=1287647591"
Categories: PerlAmerican inventionsProgramming languagesC programming language familyCross-platform softwareDynamic programming languagesDynamically typed programming languagesFree and open source interpretersFree software programmed in CHigh-level programming languagesMulti-paradigm programming languagesObject-oriented programming languagesProcedural programming languagesProgramming languages created in 1987Scripting languagesSoftware using the Artistic licenseText-oriented programming languagesUnix programming toolsHidden categories: Webarchive template wayback linksAll articles with dead external linksArticles with dead external links from November 2014Articles with dead external links from August 2024Articles with permanently dead external linksWebarchive template other archivesArticles with short descriptionShort description matches WikidataUse mdy dates from September 2014All articles with unsourced statementsArticles with unsourced statements from January 2016Articles with unsourced statements from February 2016Pages using multiple image with auto scaled imagesArticles containing potentially dated statements from December 2022All articles containing potentially dated statementsArticles with unsourced statements from December 2020All articles with failed verificationArticles with failed verification from June 2022Articles containing potentially dated statements from January 2011Articles containing potentially dated statements from 2017Articles containing potentially dated statements from 2010Articles with unsourced statements from November 2017Articles with unsourced statements from April 2025Pages using Sister project links with wikidata namespace mismatchPages using Sister project links with hidden wikidataPages using Sister project links with default searchArticles with example Perl code






 This page was last edited on 27 April 2025, at 15:49 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike 4.0 License;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.


Privacy policy
About Wikipedia
Disclaimers
Contact Wikipedia
Code of Conduct
Developers
Statistics
Cookie statement
Mobile view














Search













Search









Toggle the table of contents







Perl




























82 languages


Add topic
















