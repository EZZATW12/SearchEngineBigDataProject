https://en.wikipedia.org/wiki/Intel_8088




Intel 8088 - Wikipedia



































Jump to content







Main menu





Main menu
move to sidebar
hide



		Navigation
	


Main pageContentsCurrent eventsRandom articleAbout WikipediaContact us





		Contribute
	


HelpLearn to editCommunity portalRecent changesUpload fileSpecial pages



















Search











Search






















Appearance
















Donate

Create account

Log in








Personal tools





Donate Create account Log in





		Pages for logged out editors learn more



ContributionsTalk




























Contents
move to sidebar
hide




(Top)





1
History and description




Toggle History and description subsection





1.1
Differences from the 8086








1.2
Performance








1.3
Selection for use in the IBM PC










2
Gallery








3
Peripherals








4
See also








5
Notes








6
References








7
External links


















Toggle the table of contents







Intel 8088



28 languages




العربيةБеларускаяБългарскиCatalàČeštinaDeutschEestiΕλληνικάEspañolFrançais한국어Bahasa IndonesiaItalianoMagyarBahasa MelayuNederlands日本語Norsk bokmålPolskiPortuguêsРусскийSlovenčinaСрпски / srpskiSuomiTürkçeУкраїнськаTiếng Việt中文

Edit links











ArticleTalk





English

















ReadEditView history







Tools





Tools
move to sidebar
hide



		Actions
	


ReadEditView history





		General
	


What links hereRelated changesUpload filePermanent linkPage informationCite this pageGet shortened URLDownload QR code





		Print/export
	


Download as PDFPrintable version





		In other projects
	


Wikimedia CommonsWikidata item





















Appearance
move to sidebar
hide










From Wikipedia, the free encyclopedia


Intel microprocessor model


Intel 8088D8088 in a ceramic DIP with silver pinsGeneral informationLaunched1979Discontinued1998[1]Common manufacturerIntel, AMD, NEC, Fujitsu, Harris (Intersil), OKI, Siemens, Texas Instruments, MitsubishiPerformanceMax. CPU clock rate5 MHz to 16 MHzData width8 bitsAddress width20 bitsArchitecture and classificationApplicationDesktop, EmbeddedTechnology node3 µmInstruction setx86-16Physical specificationsTransistors29K 3 μmCo-processorIntel 8087Packages40-pin DIP44-pin PLCCSocketDIP40Products, models, variantsVariantThe Intel 8088 is a variant of the Intel 8086.HistoryPredecessorIntel 8085Successors80186 and 80286 (both of which were introduced in early 1982)Support statusUnsupported
The Intel 8088 ("eighty-eighty-eight", also called iAPX 88)[2][3][4] microprocessor is a variant of the Intel 8086. Introduced on June 1, 1979,[5][6][7][8] the 8088 has an eight-bit external data bus instead of the 16-bit bus of the 8086. The 16-bit registers and the one megabyte address range are unchanged, however. In fact, according to the Intel documentation, the 8086 and 8088 have the same execution unit (EU)—only the bus interface unit (BIU) is different. The 8088 was used in the original IBM PC and in IBM PC compatible clones.


History and description[edit]
Die of AMD 8088
The 8088 was designed at Intel's laboratory in Haifa, Israel, as were a large number of Intel's processors.[9]  The 8088 was targeted at economical systems by allowing the use of an eight-bit data path and eight-bit support and peripheral chips; complex circuit boards were still fairly cumbersome and expensive when it was released. The prefetch queue of the 8088 was shortened to four bytes, from the 8086's six bytes, and the prefetch algorithm was slightly modified to adapt to the narrower bus.[a] These modifications of the basic 8086 design were one of the first jobs assigned to Intel's new design office and laboratory in Haifa.
Variants of the 8088 with more than 5 MHz maximal clock frequency include the 8088–2, which was fabricated using Intel's new enhanced nMOS process called HMOS and specified for a maximal frequency of 8 MHz. Later followed the 80C88, a fully static CHMOS design, which could operate with clock speeds from 0 to 8 MHz. There were also several other, more or less similar, variants from other manufacturers. For instance, the NEC V20 was a pin-compatible and slightly faster (at the same clock frequency) variant of the 8088, designed and manufactured by NEC. Successive NEC 8088 compatible processors would run at up to 16 MHz. In 1984, Commodore International signed a deal to manufacture the 8088 for use in a licensed Dynalogic Hyperion clone, in a move that was regarded as signaling a major new direction for the company.[10]  The available CMOS version was outsourced to Oki Electronic Industry Co., Ltd.[11]  When announced, the list price of the 8088 was US$124.80.[12][13]  The plastic package version was introduced in July 1981 for USD $14.10. Prices was quoted are for quantities of 100.[14]  Intel second sourced this microprocessor to Fujitsu Limited.[15]

Differences from the 8086[edit]
The 8088 is architecturally very similar to the 8086.  The main difference is that there are only eight data lines instead of the 8086's 16 lines.  All of the other pins of the device perform the same function as they do with the 8086 with two exceptions.  First, pin 34 is no longer BHE (this is the high-order byte select on the 8086—the 8088 does not have a high-order byte on its eight-bit data bus).[16]: 5–97   Instead it outputs a maximum mode status, SS0.  Combined with the IO/M and DT/R signals, the bus cycles can be decoded (it generally indicates when a write operation or an interrupt is in progress).  The second change is the pin that signals whether a memory access or input/output access is being made has had its sense reversed.  The pin on the 8088 is IO/M.  On the 8086 part it is IO/M.  The reason for the reversal is that it makes the 8088 compatible with the 8085.[16]: 5–98 

Performance[edit]
Depending on the clock frequency, the number of memory wait states, as well as on the characteristics of the particular application program, the average performance for the Intel 8088 ranged approximately from 0.33 to 1 million instructions per second.[17] Meanwhile, the mov reg,reg and ALU[b] reg,reg instructions, taking two and three cycles respectively, yielded an absolute peak performance of between 1⁄3 and 1⁄2 MIPS per MHz, that is, somewhere in the range 3–5 MIPS at 10 MHz.
The speed of the execution unit (EU) and the bus of the 8086 CPU was well balanced; with a typical instruction mix, an 8086 could execute instructions out of the prefetch queue a good bit of the time.  Cutting down the bus to eight bits made it a serious bottleneck in the 8088.  With the speed of instruction fetch reduced by 50% in the 8088 as compared to the 8086, a sequence of fast instructions can quickly drain the four-byte prefetch queue.  When the queue is empty, instructions take as long to complete as they take to fetch.  Both the 8086 and 8088 take four clock cycles to complete a bus cycle; whereas for the 8086 this means four clocks to transfer two bytes, on the 8088 it is four clocks per byte.  Therefore, for example, a two-byte shift or rotate instruction, which takes the EU only two clock cycles to execute, actually takes eight clock cycles to complete if it is not in the prefetch queue.  A sequence of such fast instructions prevents the queue from being filled as fast as it is drained, and 
in general, because so many basic instructions execute in fewer than four clocks per instruction byte—including almost all the ALU and data-movement instructions on register operands and some of these on memory operands—it is practically impossible to avoid idling the EU in the 8088 at least 1⁄4 of the time while executing useful real-world programs, and it is not hard to idle it half the time.  In short, an 8088 typically runs about half as fast as 8086 clocked at the same rate, because of the bus bottleneck (the only major difference).
A side effect of the 8088 design, with the slow bus and the small prefetch queue, is that the speed of code execution can be very dependent on instruction order.  When programming the 8088, for CPU efficiency, it is vital to interleave long-running instructions with short ones whenever possible.  For example, a repeated string operation or a shift by three or more will take long enough to allow time for the 4-byte prefetch queue to completely fill.  If short instructions (i.e. ones totaling few bytes) are placed between slower instructions like these, the short ones can execute at full speed out of the queue.  If, on the other hand, the slow instructions are executed sequentially, back to back, then after the first of them the bus unit will be forced to idle because the queue will already be full, with the consequence that later more of the faster instructions will suffer fetch delays that might have been avoidable.  As some instructions, such as single-bit-position shifts and rotates, take literally 4 times as long to fetch as to execute,[c] the overall effect can be a slowdown by a factor of two or more.  If those code segments are the bodies of loops, the difference in execution time may be very noticeable on the human timescale.
The 8088 is also (like the 8086) slow at accessing memory.  The same ALU that is used to execute arithmetic and logic instructions is also used to calculate effective addresses.  There is a separate adder for adding a shifted segment register to the offset address, but the offset EA itself is always calculated entirely in the main ALU.  Furthermore, the loose coupling of the EU and BIU (bus unit) inserts communication overhead between the units, and the four-clock period bus transfer cycle is not particularly streamlined.  Contrast this with the two-clock period bus cycle of the 6502 CPU and the 80286's three-clock period bus cycle with pipelining down to two cycles for most transfers.  Most 8088 instructions that can operate on either registers or memory, including common ALU and data-movement operations, are at least four times slower for memory operands than for only register operands.  Therefore, efficient 8088 (and 8086) programs avoid repeated access of memory operands when possible, loading operands from memory into registers to work with them there and storing back only the finished results.  The relatively large general register set of the 8088 compared to its contemporaries assists this strategy.  When there are not enough registers for all variables that are needed at once, saving registers by pushing them onto the stack and popping them back to restore them is the fastest way to use memory to augment the registers, as the stack PUSH and POP instructions are the fastest memory operations.  The same is probably not true on the 80186 and later; they have dedicated address ALUs and perform memory accesses much faster than the 8088 and 8086.
Finally, because calls, jumps, and interrupts reset the prefetch queue, and because loading the IP register requires communication between the EU and the BIU (since the IP register is in the BIU, not in the EU, where the general registers are), these operations are costly.  All jumps and calls take at least 15 clock cycles.  Any conditional jump requires four clock cycles if not taken, but if taken, it requires 16 cycles in addition to resetting the prefetch queue; therefore, conditional jumps should be arranged to be not taken most of the time, especially inside loops.  In some cases, a sequence of logic and movement operations is faster than a conditional jump that skips over one or two instructions to achieve the same result.
Intel datasheets for the 8086 and 8088 advertised the dedicated multiply and divide instructions (MUL, IMUL, DIV, and IDIV), but they are very slow, on the order of 100–200 clock cycles each.  Many simple multiplications by small constants (besides powers of 2, for which shifts can be used) can be done much faster using dedicated short subroutines.  The 80286 and 80386 each greatly increase the execution speed of these multiply and divide instructions.[d]

Selection for use in the IBM PC[edit]
IBM Personal Computer 
The original IBM PC is the most influential microcomputer to use the 8088. It has a clock frequency of 4.77 MHz (4/3 the NTSC colorburst frequency). Some of IBM's engineers and other employees wanted to use the IBM 801 processor, some preferred the new Motorola 68000,[e] and others argued for a small and simple microprocessor, such as the MOS Technology 6502 or Zilog Z80, which are in earlier personal computers. However, IBM already had a history of using Intel chips in its products and had also acquired the rights to manufacture the 8086 family.[f]
IBM chose the 8088 over the 8086 because Intel offered a better price for the former and could supply more units.[18] Another factor was that the 8088 allowed the computer to be based on a modified 8085 design, as it could easily interface with most nMOS chips with 8-bit databuses. These were mature, and therefore economical, components. This included ICs originally intended for support and peripheral functions around the 8085 and similar processors (not exclusively Intel's), which were already well known by many engineers, further reducing cost.[g]
The descendants of the 8088 include the 80188, 80186, 80286, 80386, 80486, and later software-compatible processors, including the Intel Core processors, which are popular today.

Gallery[edit]



Intel 8088, original 5 MHz nMOS variant in plastic DIP package



Plastic DIP40 8088, top view



Plastic DIP40 8088, bottom view



Intel 80C88A-2, later CMOS variant



Intel 80C88 in PLCC44 package[gallery 1][19]




^ Sampling Q4 1985


Peripherals[edit]
Intel 8282/8283: 8-bit latch
Intel 8284: clock generator
Intel 8286/8287: bidirectional 8-bit driver.  Both Intel I8286/I8287 (industrial grade) version were available for US$16.25 in quantities of 100.[20]
Intel 8288: bus controller
Intel 8289: bus arbiter
Intel 8087: Math Co-Processor
See also[edit]
x86 architecture
IBM Personal Computer
Motorola 68008
Maximum mode
Minimum mode
iAPX for the iAPX designation
Professional Graphics Controller
Transistor count
Notes[edit]


^ Specifically, the most obvious change is that the 8088 bus unit will prefetch a byte when it can if at least one byte of the queue is empty; the 8086 bus unit will not prefetch unless at least two of the six queue bytes are empty, so that it can prefetch a whole aligned 16-bit word, which it does in one bus cycle.  The 8088, having an 8-bit external data bus, can only fetch one byte per bus cycle, so waiting to prefetch a whole word would have no benefit and would only delay, reducing the chance that the next instruction byte is already in the prefetch queue when it is needed.

^ ALU stands for one of the instructions ADD, ADC, SUB, SBC, CMP, AND, OR, XOR, TEST.

^ On the 8088, a shift instruction with an implied shift count of 1, which can execute in two clock cycles, is two bytes long and so takes eight clock cycles to fetch.

^ Most of the technical information in this section is sourced from the Intel iAPX 86,88 User's Manual, August 1981 (Order Number: 210201-001) by Intel Corporation.

^ Later used for the IBM Instruments Laboratory Computer.

^ In exchange for giving Intel the rights to its bubble memory designs. However, due to fierce competition from Japanese manufacturers, who were able to undercut by cost, Intel soon left this market and changed focus to microprocessors.

^ 68000 components were not widely available at the time, though it could use Motorola 6800 components to an extent.


References[edit]


^ CPU History – The CPU Museum – Life Cycle of the CPU.

^ "iAPX 86, iAPX 88 user's manual" (PDF). Retrieved October 5, 2024.

^ "iAPX 86, 88, 186 Microprocessors Part I, Workshop Notebook" (PDF). June 1984.

^ "iAPX 286 Programmers' Reference Manual" (PDF). 1983. page 1-1.

^ "Microprocessor Quick Reference Guide". Intel. Intel. Retrieved June 1, 2019.

^ "Microprocessor Quick Reference Guide". Intel. Intel. Retrieved June 1, 2019.

^ Singh, Renu (2006). Microprocessor Interfacing and Applications. New Age International. pp. 2–27. ISBN 81-224-1400-1. Retrieved June 1, 2019.

^ Govindarajalu, B. (2002). IBM PC and Clones: Hardware, Troubleshooting and Maintenance (2nd ed.). McGraw-Hill. p. 248. ISBN 978-0-07-048286-9. Retrieved June 1, 2019.

^ Gilder, George F. (October 10, 2013). The Israel Test. Encounter Books. p. 100. ISBN 978-1594036125.

^ Cook, Karen (April 17 – May 1, 1984). "Commodore Adds Hyperion, Chips". PC Magazine. Vol. 1, no. 8. p. 52.

^ Intel Corporation, "NewsBit: Intel Licenses Oki on CMOS Version of Several Products", Solutions, July/August 1984, Page 1.

^ "Intel Brings Out 8-Bit MPU featuring 16-Bit Architecture". Computerworld. Vol. XIII, no. 20. May 14, 1979. p. 71. Retrieved November 21, 2011.

^ Intel Corporation, "Microcomputer Components: Intel Introduces the 8089 IOP, an I/O processor for the advanced 8088/8086 CPU family, the first of a series of new subsystem components", Intel Preview, May/June 1979, Pg 9.

^ Intel Corporation, "News Bits", Solutions, July/August 1981, Page 1

^ Intel Corporation, "NewsBits: Second Source News", Solutions, January/February 1985, Page 1

^ a b Osborne 16 bit Processor Handbook (Adam Osborne & Gerry Kane) ISBN 0-931988-43-8.

^ "Olympus MIC-D: Integrated Circuit Gallery - Intel 8088 Microprocessor". Archived from the original on May 19, 2009.

^ Freiberger, Paul (August 23, 1982). "Bill Gates, Microsoft and the IBM Personal Computer". InfoWorld. Vol. 4, no. 33. p. 22. Retrieved January 29, 2015.

^ Ashborn, Jim; "Advanced Packaging: A Little Goes A Long Way", Intel Corporation, Solutions, January/February 1986, Page 2

^ 8086 Available for industrial environment, Intel Preview Special Issue: 16-Bit Solutions, Intel Corporation, May/June 1980, page 29.


External links[edit]
chipdb.org - Intel datasheet for 8088
PCJS: Original IBM PC simulation that runs in your web browser
vteIntel processorsLists
Processors
Atom
Celeron
Pentium
Pro
II
III
4
D
M
Core
2
i3
i5
i7
i9
M
Xeon
Quark
Itanium
Microarchitectures
Chipsets
MicroarchitecturesIA-32 (32-bit x86)
P5
P6
P6 variant (Pentium M)
P6 variant (Enhanced Pentium M)
NetBurst
x86-64 (64-bit)
Core
Penryn
Nehalem
Westmere
Sandy Bridge
Ivy Bridge
Haswell
Broadwell
Skylake
Cannon Lake
Sunny Cove
Cypress Cove
Willow Cove
Golden Cove
Raptor Cove
Redwood Cove
Lion Cove
x86 ULV
Bonnell
Saltwell
Silvermont
Goldmont
Goldmont Plus
Tremont
Gracemont
Current productsx86-64 (64-bit)
Atom
Celeron
Pentium
Core
10th gen
11th gen
12th gen
13th gen
14th gen
Core Ultra
1st gen
2nd gen
Xeon
DiscontinuedBCD oriented (4-bit)
4004 (1971)
4040 (1974)
pre-x86 (8-bit)
8008 (1972)
8080 (1974)
8085 (1977)
Early x86 (16-bit)
8086 (1978)
8088 (1979)
80186 (1982)
80188 (1982)
80286 (1982)
x87 (external FPUs)
8/16-bit databus
8087 (1980)
16-bit databus
80C187
80287
80387SX
32-bit databus
80387DX
80487
IA-32 (32-bit x86)
i386
SX
376
EX
i486
SX
DX2
DX4
SL
RapidCAD
OverDrive
A100/A110
Atom
CE
SoC
Celeron (1998)
M
D (2004)
Pentium
Original i586
OverDrive
Pro
II
III
4
M
Dual-Core
Core
Xeon
P6-based
NetBurst-based
Core-based
Quark
Tolapai
x86-64 (64-bit)
Atom
SoC
CE
Celeron
D
Dual-Core
Pentium
4
D
Extreme Edition
Dual-Core
Core
2
1st gen
2nd gen
3rd gen
4th gen
5th gen
6th gen
7th gen
8th gen
9th gen
10th gen
11th gen
M
Xeon
Nehalem-based
Sandy Bridge-based
Ivy Bridge-based
Haswell-based
Broadwell-based
Skylake-based
Other
CISC
iAPX 432
EPIC
Itanium
RISC
i860
i960
StrongARM
XScale
Related
Tick–tock model
Process–architecture–optimization model
Intel GPUs
GMA
Intel HD, UHD, and Iris Graphics
Xe
Arc
PCHs
SCHs
ICHs
PIIXs
Stratix
Codenames
Larrabee

Authority control databases: National United StatesFranceBnF dataIsrael




Retrieved from "https://en.wikipedia.org/w/index.php?title=Intel_8088&oldid=1286055104"
Categories: Intel x86 microprocessors16-bit microprocessorsComputer-related introductions in 1979X86 microarchitecturesHidden categories: Articles with short descriptionShort description is different from WikidataUse American English from January 2023All Wikipedia articles written in American EnglishUse mdy dates from January 2023






 This page was last edited on 17 April 2025, at 12:56 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike 4.0 License;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.


Privacy policy
About Wikipedia
Disclaimers
Contact Wikipedia
Code of Conduct
Developers
Statistics
Cookie statement
Mobile view














Search













Search









Toggle the table of contents







Intel 8088




























28 languages


Add topic
















