https://en.wikipedia.org/wiki/Firmware




Firmware - Wikipedia



































Jump to content







Main menu





Main menu
move to sidebar
hide



		Navigation
	


Main pageContentsCurrent eventsRandom articleAbout WikipediaContact us





		Contribute
	


HelpLearn to editCommunity portalRecent changesUpload fileSpecial pages



















Search











Search






















Appearance
















Donate

Create account

Log in








Personal tools





Donate Create account Log in





		Pages for logged out editors learn more



ContributionsTalk




























Contents
move to sidebar
hide




(Top)





1
History and etymology








2
Applications




Toggle Applications subsection





2.1
Computers








2.2
Home and personal-use products








2.3
Automobiles








2.4
Other examples










3
Flashing








4
Firmware hacking




Toggle Firmware hacking subsection





4.1
HDD firmware hacks










5
Security risks








6
See also








7
References


















Toggle the table of contents







Firmware



61 languages




AfrikaansالعربيةবাংলাБеларуская (тарашкевіца)БългарскиBosanskiCatalàЧӑвашлаČeštinaCymraegDanskDeutschEestiΕλληνικάEspañolEsperantoEuskaraفارسیFrançaisGaeilgeGalego한국어HrvatskiIgboBahasa IndonesiaInterlinguaÍslenskaItalianoעבריתLatviešuLietuviųMagyarമലയാളംBahasa MelayuMinangkabauМонголNederlands日本語Norsk bokmålਪੰਜਾਬੀPlattdüütschPolskiPortuguêsRomânăРусскийShqipසිංහලSimple EnglishSlovenčinaSlovenščinaСрпски / srpskiSuomiSvenskaTagalogไทยTürkçeУкраїнськаTiếng Việt吴语粵語中文

Edit links











ArticleTalk





English

















ReadEditView history







Tools





Tools
move to sidebar
hide



		Actions
	


ReadEditView history





		General
	


What links hereRelated changesUpload filePermanent linkPage informationCite this pageGet shortened URLDownload QR code





		Print/export
	


Download as PDFPrintable version





		In other projects
	


Wikimedia CommonsWikidata item





















Appearance
move to sidebar
hide










From Wikipedia, the free encyclopedia


Low-level computer software
Firmware is commonly stored in an EEPROM or Flash memory,[1] which makes use of an I/O protocol such as SPI.
In computing, firmware is software that provides low-level control of computing device hardware. 
For a relatively simple device, firmware may perform all control, monitoring and data manipulation functionality.
For a more complex device, firmware may provide relatively low-level control as well as hardware abstraction services to higher-level software such as an operating system.
Firmware is found in a wide range of computing devices including personal computers, smartphones, home appliances, vehicles, computer peripherals and in many of the integrated circuits inside each of these larger systems.
Firmware is stored in non-volatile memory – either read-only memory (ROM) or programmable memory such as EPROM, EEPROM, or flash. Changing a device's firmware stored in ROM requires physically replacing the memory chip – although some chips are not designed to be removed after manufacture. Programmable firmware memory can be reprogrammed via a procedure sometimes called flashing.[2]
Common reasons for changing firmware include fixing bugs and adding features.


History and etymology[edit]
Ascher Opler used the term firmware in a 1967 Datamation article, as an intermediary term between hardware and software. Opler projected that fourth-generation computer systems would have a writable control store (a small specialized high-speed memory) into which microcode firmware would be loaded. Many software functions would be moved to microcode, and instruction sets could be customized, with different firmware loaded for different instruction sets.[3]
As computers began to increase in complexity, it became clear that various programs needed to first be initiated and run to provide a consistent environment necessary for running more complex programs at the user's discretion. This required programming the computer to run those programs automatically. Furthermore, as companies, universities, and marketers wanted to sell computers to laypeople with little technical knowledge, greater automation became necessary to allow a lay-user to easily run programs for practical purposes. This gave rise to a kind of software that a user would not consciously run, and it led to software that a lay user wouldn't even know about.[4]
As originally used, firmware contrasted with hardware (the CPU itself) and software (normal instructions executing on a CPU). It was not composed of CPU machine instructions, but of lower-level microcode involved in the implementation of machine instructions. It existed on the boundary between hardware and software; thus the name firmware. Over time, popular usage extended the word firmware to denote any computer program that is tightly linked to hardware, including BIOS on PCs, boot firmware on smartphones, computer peripherals, or the control systems on simple consumer electronic devices such as microwave ovens and remote controls.

Applications[edit]
Computers[edit]
ROM BIOS firmware on a Baby AT motherboard
In some respects, the various firmware components are as important as the operating system in a working computer. However, unlike most modern operating systems, firmware rarely has a well-evolved automatic mechanism of updating itself to fix any functionality issues detected after shipping the unit.
A computer's firmware may be manually updated by a user via a small utility program. In contrast, firmware in mass storage devices (hard-disk drives, optical disc drives, flash memory storage e.g. solid state drive) is less frequently updated, even when flash memory (rather than ROM, EEPROM) storage is used for the firmware.
Most computer peripherals are themselves special-purpose computers. Devices such as printers, scanners, webcams, and USB flash drives have internally-stored firmware; some devices may also permit field upgrading of their firmware. For modern simpler devices, such as USB keyboards, USB mouses and USB sound cards, the trend is to store the firmware in on-chip memory in the device's microcontroller, as opposed to storing it in a separate EEPROM chip.
Examples of computer firmware include:

The BIOS firmware used on PCs
The (U)EFI-compliant firmware used on Itanium systems, Intel-based Macs, and many newer PCs
Hard disk drive, solid-state drive, optical disc drive and optical disc recorder firmware[5]
Video BIOS of a graphics card
Open Firmware, used in SPARC-based computers from Sun Microsystems and Oracle Corporation, PowerPC-based computers from Apple, and computers from Genesi
ARCS, used in computers from Silicon Graphics
Kickstart, used in the Amiga line of computers (POST, hardware init + Plug and Play auto-configuration of peripherals, kernel, etc.)
RTAS (Run-Time Abstraction Services), used in System i and System p computers from IBM
The Common Firmware Environment (CFE) for Broadcom systems-on-chip (SoCs)
Updating the firmware of a Fuji Instax camera
Home and personal-use products[edit]
Consumer appliances like gaming consoles, digital cameras and portable music players support firmware upgrades. Some companies use firmware updates to add new playable file formats (codecs). Other features that may change with firmware updates include the GUI or even the battery life. Smartphones have a firmware over the air upgrade capability for adding new features and patching security issues.

Automobiles[edit]
Since 1996, most automobiles have employed an on-board computer and various sensors to detect mechanical problems. As of 2010[update], modern vehicles also employ computer-controlled anti-lock braking systems (ABS) and computer-operated transmission control units (TCUs). The driver can also get in-dash information while driving in this manner, such as real-time fuel economy and tire pressure readings. Local dealers can update most vehicle firmware.

Other examples[edit]
Other firmware applications include:

In home and personal-use products:
Timing and control systems for washing machines
Controlling sound and video attributes, as well as the channel list, in modern televisions
In routers, switches, and firewalls:
LibreCMC –  a 100% free software router distribution based on the Linux-libre kernel
IPFire –  an open-source firewall/router distribution based on the Linux kernel
fli4l –  an open-source firewall/router distribution based on the Linux kernel
OpenWrt –  an open-source firewall/router distribution based on the Linux kernel
m0n0wall –  an embedded firewall distribution of FreeBSD
Proprietary firmware
In NAS systems:
NAS4Free –  an open-source NAS operating system based on FreeBSD
Openfiler –  an open-source NAS operating system based on the Linux kernel
Proprietary firmware
Field-Programmable Gate Array (FPGA) code may be referred to as firmware
Flashing[edit]
Flashing[6] is a process that involves the overwriting of existing firmware or data, contained in EEPROM or flash memory module present in an electronic device, with new data.[6] This can be done to upgrade a device[7] or to change the provider of a service associated with the function of the device, such as changing from one mobile phone service provider to another or installing a new operating system. If firmware is upgradable, it is often done via a program from the provider, and will often allow the old firmware to be saved before upgrading so it can be reverted to if the process fails, or if the newer version performs worse. Free software replacements for vendor flashing tools have been developed, such as Flashrom.

Firmware hacking[edit]
Main article: Custom firmware
Sometimes, third parties develop an unofficial new or modified ("aftermarket") version of firmware to provide new features or to unlock hidden functionality; this is referred to as custom firmware. An example is Rockbox as a firmware replacement for portable media players. There are many homebrew projects for various devices, which often unlock general-purpose computing functionality in previously limited devices (e.g., running Doom on iPods).
Firmware hacks usually take advantage of the firmware update facility on many devices to install or run themselves. Some, however, must resort to exploits to run, because the manufacturer has attempted to lock the hardware to stop it from running unlicensed code.
Most firmware hacks are free software.

HDD firmware hacks[edit]
The Moscow-based Kaspersky Lab discovered that a group of developers it refers to as the Equation Group has developed hard disk drive firmware modifications for various drive models, containing a trojan horse that allows data to be stored on the drive in locations that will not be erased even if the drive is formatted or wiped.[8]  Although the Kaspersky Lab report did not explicitly claim that this group is part of the United States National Security Agency (NSA), evidence obtained from the code of various Equation Group software suggests that they are part of the NSA.[9][10]
Researchers from the Kaspersky Lab categorized the undertakings by Equation Group as the most advanced hacking operation ever uncovered, also documenting around 500 infections caused by the Equation Group in at least 42 countries.

Security risks[edit]
Mark Shuttleworth, the founder of the company Canonical, which created the Ubuntu Linux distribution, has described proprietary firmware as a security risk, saying that "firmware on your device is the NSA's best friend" and calling firmware "a trojan horse of monumental proportions". He has asserted that low-quality, closed source firmware is a major threat to system security:[11] "Your biggest mistake is to assume that the NSA is the only institution abusing this position of trust –  in fact, it's reasonable to assume that all firmware is a cesspool of insecurity, courtesy of incompetence of the highest degree from manufacturers, and competence of the highest degree from a very wide range of such agencies".  As a potential solution to this problem, he has called for declarative firmware, which would describe "hardware linkage and dependencies" and "should not include executable code".[12] Firmware should be open-source so that the code can be checked and verified.
Custom firmware hacks have also focused on injecting malware into devices such as smartphones or USB devices. One such smartphone injection was demonstrated on the Symbian OS at MalCon,[13][14] a hacker convention. A USB device firmware hack called BadUSB was presented at the Black Hat USA 2014 conference,[15] demonstrating how a USB flash drive microcontroller can be reprogrammed to spoof various other device types to take control of a computer, exfiltrate data, or spy on the user.[16][17] Other security researchers have worked further on how to exploit the principles behind BadUSB,[18] releasing at the same time the source code of hacking tools that can be used to modify the behavior of different USB devices.[19]

See also[edit]

Electronics portal
Bootloader
Computer hardware
Coreboot
Custom firmware
Microcode
Proprietary device driver
Real-time operating system
ROM image
References[edit]


^ "W25X20CL Datasheet". Winbond. Retrieved 2024-08-30.

^ "What is firmware?". 23 January 2013.

^ 
Opler, Ascher (January 1967). "Fourth-Generation Software". Datamation. 13 (1): 22–24.

^ "Introduction to Computer Applications and Concepts. Module 3: System Software". Lumen.

^ Mielewczik, Michael (2000). "Firmware-Update. Mehr Speed und Sicherheit". PC Praxis (in German). 1/2000: 68.

^ a b "Flashing Firmware". Tech-Faq.com. Archived from the original on September 27, 2011. Retrieved July 8, 2011.

^ "HTC Developer Center". HTC. Archived from the original on April 26, 2011. Retrieved July 8, 2011.

^ "Equation Group: The Crown Creator of Cyber-Espionage". Kaspersky Lab. February 16, 2015. Archived from the original on December 2, 2015.

^ Dan Goodin (February 2015). "How "omnipotent" hackers tied to NSA hid for 14 years—and were found at last". Ars Technica. Archived from the original on 2016-04-24.

^ "Breaking: Kaspersky Exposes NSA's Worldwide, Backdoor Hacking of Virtually All Hard-Drive Firmware". Daily Kos. February 17, 2015. Archived from the original on February 25, 2015.

^ "Shuttleworth Calls for Declarative Firmware". Linux Magazine. No. 162. May 2014. p. 9.

^ Shuttleworth, Mark (March 17, 2014). "ACPI, firmware and your security". Archived from the original on March 15, 2015.

^ "MalCon 2010 Technical Briefings". Malcon.org. Archived from the original on 2011-07-04.

^ "Hacker plants back door in Symbian firmware". H-online.com. 2010-12-08. Archived from the original on 21 May 2013. Retrieved 2013-06-14.

^ "Why the Security of USB Is Fundamentally Broken". Wired.com. 2014-07-31. Archived from the original on 2014-08-03. Retrieved 2014-08-04.

^ "BadUSB - On Accessories that Turn Evil". BlackHat.com. Archived from the original on 2014-08-08. Retrieved 2014-08-06.

^ Karsten Nohl; Sascha Krißler; Jakob Lell (2014-08-07). "BadUSB – On accessories that turn evil" (PDF). srlabs.de. Archived (PDF) from the original on 2016-10-19. Retrieved 2014-08-23.

^ "BadUSB Malware Released — Infect millions of USB Drives". The Hacking Post. Archived from the original on 6 October 2014. Retrieved 7 October 2014.

^ Greenberg, Andy. "The Unpatchable Malware That Infects USBs Is Now on the Loose". WIRED. Archived from the original on 7 October 2014. Retrieved 7 October 2014.


vteFirmware and bootingProcesses
Windows
9x
NT
Linux
Android
Booting firmwareTypes
Proprietary firmware
Open-source firmware
Custom firmware
Interfaces
UEFI
BIOS
Video BIOS
Open Firmware
ACPI
MultiProcessor Specification
APM
Legacy Plug and Play
AlphaBIOS
SRM
SFI
Implementations
SeaBIOS
Award BIOS
American Megatrends
AMIBIOS
AMI Aptio
InsydeH2O
Phoenix SecureCore UEFI
TianoCore EDK II
OpenBIOS
Coreboot
Libreboot
LinuxBoot
Kickstart
Run-Time Abstraction Services
Hybrid firmware bootloader
Common Firmware Environment 
Das U-Boot
ARCS
Bootloaders
Bootloader unlocking
Comparison of bootloaders
Implementations
Acronis OS Selector
Barebox
BootManager
BootX (Apple)
BootX (Linux)
GNU GRUB
iBoot
systemd-boot
Limine
loadlin
MILO
NTLDR
OpeniBoot
Plop Boot Manager
RedBoot
rEFInd
rEFIt
SYSLINUX
Windows Boot Manager
xOSL
Yaboot

Partition layouts
GUID Partition Table
Master boot record
Apple Partition Map
Partitions
EFI system partition
BIOS boot partition
/boot/
UtilitiesSoftware
flashrom
fwupd
UEFITool
Odin
Heimdall
Hardware
Bus Pirate
Raspberry Pi
ft2232
Network boot
Preboot Execution Environment
gPXE
iPXE
NetBoot
Remote Initial Program Load
Wake-on-LAN
Wake-on-ring
ROM variants
ROM
PROM
EPROM
EEPROM
Related
Boot ROM
ROM hacking
ROM image
Execute in place
Devicetree
Fastboot
Instant-on
Power-on self-test
EDL mode

vteEmbedded systemsGeneral terms
ASIC
Board support package
Bootloader
Consumer electronics
Cross compiler
Embedded database
Embedded hypervisor
Embedded OS
Embedded software
FPGA
IoT
Memory footprint
Microcontroller
Single-board computer
Raspberry Pi
SoC
Firmware and controls
Firmware
Custom firmware
Proprietary firmware
Closed platform
Crippleware
Defective by Design
Hacking of consumer electronics
Homebrew (video games)
iOS jailbreaking
PlayStation 3 Jailbreak
Rooting (Android)
UEFI
Vendor lock-in
Boot loaders
U-Boot
Barebox
Software libraries
uClibc
dietlibc
Embedded GLIBC
lwIP
musl
Programming tools
Almquist shell
BitBake
Buildroot
BusyBox
OpenEmbedded
Stand-alone shell
Toybox
Yocto Project
Operating systems
Linux on embedded systems
Linux for mobile devices
Light-weight Linux distribution
Real-time operating system
Windows IoT
Win CE
Programming languages
Ada
Assembly language
CAPL
Embedded C
Embedded C++
Embedded Java
MISRA C
MicroPython

Lightweight browsers
List of open-source hardware
Open-source robotics

Authority control databases InternationalFAST2NationalGermanyUnited StatesIsrael




Retrieved from "https://en.wikipedia.org/w/index.php?title=Firmware&oldid=1282730500"
Category: FirmwareHidden categories: CS1: long volume valueCS1 German-language sources (de)CS1: unfit URLArticles with short descriptionShort description is different from WikidataArticles containing potentially dated statements from 2010All articles containing potentially dated statements






 This page was last edited on 28 March 2025, at 07:24 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike 4.0 License;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.


Privacy policy
About Wikipedia
Disclaimers
Contact Wikipedia
Code of Conduct
Developers
Statistics
Cookie statement
Mobile view














Search













Search









Toggle the table of contents







Firmware




























61 languages


Add topic
















