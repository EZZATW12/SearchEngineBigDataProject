https://en.wikipedia.org/wiki/Zilog_Z8000




Zilog Z8000 - Wikipedia



































Jump to content







Main menu





Main menu
move to sidebar
hide



		Navigation
	


Main pageContentsCurrent eventsRandom articleAbout WikipediaContact us





		Contribute
	


HelpLearn to editCommunity portalRecent changesUpload fileSpecial pages



















Search











Search






















Appearance
















Donate

Create account

Log in








Personal tools





Donate Create account Log in





		Pages for logged out editors learn more



ContributionsTalk




























Contents
move to sidebar
hide




(Top)





1
History




Toggle History subsection





1.1
Z80








1.2
16-bit design








1.3
Introduction








1.4
Later versions










2
Architecture




Toggle Architecture subsection





2.1
Registers








2.2
Memory handling








2.3
Example code








2.4
Other features










3
Support chips




Toggle Support chips subsection





3.1
Zilog








3.2
Sharp










4
Z8000 CPU based systems








5
Limited success








6
Second sources








7
Notes








8
References




Toggle References subsection





8.1
Citations








8.2
Bibliography










9
Further reading


















Toggle the table of contents







Zilog Z8000



12 languages




CatalàDeutschEspañolFrançais한국어ItalianoMagyar日本語PolskiРусскийSvenskaУкраїнська

Edit links











ArticleTalk





English

















ReadEditView history







Tools





Tools
move to sidebar
hide



		Actions
	


ReadEditView history





		General
	


What links hereRelated changesUpload filePermanent linkPage informationCite this pageGet shortened URLDownload QR code





		Print/export
	


Download as PDFPrintable version





		In other projects
	


Wikimedia CommonsWikidata item





















Appearance
move to sidebar
hide










From Wikipedia, the free encyclopedia


16-bit microprocessor


Zilog Z8000 architectureDesignerZilogBits16-bitIntroduced1979; 46 years ago (1979)DesignCISCTypeRegister–MemoryBranchingCondition registerSuccessorZ80000Registers16 × 16-bit general purpose24-bit PC16-bit status
Zilog Z8001Z8001 on the motherboard of an Olivetti M20 computerGeneral informationLaunched1979; 46 years ago (1979)Designed byZilogPerformanceData width16 bitsAddress width23 bitsPhysical specificationsTransistors17,500Packages48-pin DIP (8001)40-pin DIP (8002)
The Zilog Z8000 is a 16-bit microprocessor architecture designed by Zilog and introduced in early 1979. Two chips were initially released, differing only in the width of the address bus; the Z8001 had a 23-bit bus while the Z8002 had a 16-bit bus.
Bernard Peuto designed the architecture, while Masatoshi Shima did the logic and physical implementation, assisted by a small group. In contrast to most designs of the era, the Z8000 does not use microcode, which allowed it to be implemented in only 17,500 transistors. The Z8000 is not Z80-compatible, but includes a number of design elements from it, such as combining two registers into one with twice the number of bits. The Z8000 expanded on the Z80 by allowing two 16-bit registers to operate as a 32-bit register, or four to operate as a 64-bit register.
Although it saw some use in the early 1980s, it was never as popular as the Z80. It was released after the 16-bit 8086 (April 1978) and the same time as the less-expensive 8088, and only months before the 68000 (September 1979) with a 32-bit instruction set architecture and which is roughly twice as fast. The Z80000 was a 32-bit follow-on design that made it to a test sampling phase in 1986 without ever being released commercially.[1]


History[edit]
Z80[edit]
In the early 1970s, Intel's management saw the microprocessor not so much as a product on its own, but as a way to create demand for their other products like static RAM and ROM. A reorganization in early 1974 further diluted the role of the microprocessor in the company. The designer of the Intel 4004 and Intel 8080, Federico Faggin, decided to leave the company and start one dedicated to microprocessor design. Faggin left on 31 October 1974, joined by Ralph Ungermann and, later, the logic designer Masatoshi Shima.[2]
Initially working on a concept for a simple microcontroller, Faggin eventually concluded that the economics of the industry demanded that they introduce a product at the high-end, not the low-end. This led to a new concept initially known as the "Super 80", but eventually emerging as the Zilog Z80. The Z80 was a significant advance on the 8080, running on a single +5V power supply and adding several nice features from the Motorola 6800. Released in 1976, it was soon a huge hit.[3]

16-bit design[edit]
While Shima was still working on the Z80 layout, Faggin began considering its future replacement by a 16-bit design, with the goal of being the first company to bring a new 16-bit single-chip design to market.[a] He felt that expanding the Z80 to 16-bits was not appropriate, the larger computer word size meant that many more features could be offered in the instruction set and the deliberately simple instructions of earlier designs would lead to chips that would be outperformed by freshly-designed 16-bit designs.[5]
In January 1976, Faggin hired Bernard Peuto, formerly of Amdahl Corporation. Peuto had previously studied and published extensively on the topic of word length, instruction sets and code density. The initial meetings on the concept were held at the end of March, at which time Faggin told Peuto he wanted the architecture completed in three months. The instruction set was delivered on time, but then it was time to turn that into a complete design.[6] Peuto's design included the ability to work with 8-, 16- and 32-bit data, flexible addressing modes, and dedicated coprocessor support.[7]
It was during this time that Ungermann explained the economics of the chip industry to Peuto, which were strongly influenced by the size of the chip. At the time, most processors used 40-pin dual in-line packages (DIPs), but some used 28-pin packages for lower-cost systems, while others were using 48 or 64-pin packages for more powerful systems like minicomputers. The need to balance cost and power ultimately led to the idea of having two versions of the chip, the Z8001 with 23 address bus pins in a 48-pin chip, and the Z8002 with 16 address pins in a 40-pin chip.[7]
In order to have a single instruction set that could be used on either design, they made the decision to use segmented memory.[7] In this concept, the basic instruction set uses 16-bit addresses, which could then be run on either version of the chip. To access larger amounts of memory, a separate set of instructions could set a 7-bit "segment number". On the 23-pin versions, the 7-bit segment number was sent out at the same time as the 16-bit base address, creating a single 23-bit address. This early design choice would ultimately have a profound effect on the desirability of the Z8000 series.[8]
Shima would be responsible for turning the conceptual design into a physical one, and with the basic design completed, Shima first began considering it on 11 June 1976. At the time the system was to have eight 16-bit registers, and Shima began laying out such a design. But very late in the process the design team concluded that it needed more, and when they asked in October, Shima stated he had laid it out with enough room left over that they could double the number of registers.[9]

Introduction[edit]
In June 1978, while Shima was still working on the design of the Z8000, Intel introduced the Intel 8086. Zilog had missed its chance to be the first company with a new, dedicated 16-bit design. In some ways the 8086 was similar to the Z8000, including the use of segmented memory, but in general it was a less advanced design with fewer processor registers and a much smaller maximum memory of 1 megabyte rather than the 8000's 8 MB.[9]
It was not until early 1979 that production samples of the Z8000 were released. Zilog stated that the Z8001 and Z8002 were merely differently packaged versions of the same Z8000 chip, "the difference being achieved by a bonding option during manufacture".[10]
Even with 48 pins, there were not enough connections to allow for a complete 16-bit data bus and 24-bit address bus, as that would leave only 8 free pins, which is not nearly enough for various other interfacing needs like power, clocks and interrupts. To address this, the Z8001 multiplexed the address and data pins together. The first 16 pins of the 23-pin address bus were used on alternate cycles as a 16-bit data bus. This meant that every memory access took two complete memory cycles: first the address would be presented and had to be "latched" using external circuity, and then on the next cycle 16 bit of data would be read or written using the same pins.[11] This means the Z8000 would run roughly half as fast as something like the 68000, which had separate 16 data pins and 24 address pins on a larger 64-pin chip.[dubious – discuss]
Zilog already had a strategy to deal with this problem, the Zilog 8010 memory controller. The 8010 automatically folded the 7 and 16-bit parts of the address back together into a single 23-bit address, as well as offering a number of memory mapping features that made it useful for supporting multitasking and virtual memory. However, the 8010 was not ready when the 8001 was introduced. This meant that for 18 months, Intel had a single-chip solution that could access 1 MB, while the 8000 series was still practically limited to 64 kB. The 8010 was eventually released almost a year later, and even then it required two chips to do what the 8086 did with one.[12]
The delays with the 8010 was particularly hurtful. In September 1979, Motorola introduced the Motorola 68000, which had a complete 24-bit address bus, which allowed it to access up to 16 MB without segmentation. It also offered all of the features Zilog advertised as being more advanced than the 8086, such as more registers and a wide set of addressing modes. The market generally chose Intel for lower-end offerings and the 68000 for the high-end. Shima left the company to return to Japan in 1980, and Faggin left shortly thereafter.[13]

Later versions[edit]
The series was later expanded to include the Z8003 and Z8004 updated versions of the Z8001 and Z8002, respectively. These versions were designed to provide improved support for virtual memory, adding new status registers to indicate segmentation faults (test and set) and provide an abort capability.

Architecture[edit]

Z8001 registers


15

14

13

12

11

10

09

08

07

06

05

04

03

02

01

00

(bit position)


 

Grouping


Main registers

16-bit

32-bit

64-bit


RH0

RL0

R0

RR0

RQ0


RH1

RL1

R1


RH2

RL2

R2

RR2


RH3

RL3

R3


RH4

RL4

R4

RR4

RQ4


RH5

RL5

R5


RH6

RL6

R6

RR6


RH7

RL7

R7


 

R8

RR8

RQ8


 

R9


 

R10

RR10


 

R11


 

R12

RR12

RQ12


 

R13


Normal Stack Pointer Segment

R14

RR14


Normal Stack Pointer Offset

R15


System Stack Pointer Segment

R14


System Stack Pointer Offset

R15


Refresh register


RE

Rate

Row Address

0

Refresh


Program status area pointer


0

Segment

0 0 0 0 0 0 0 0

Segment


Upper offset

0 0 0 0 0 0 0 0

Offset


Program counter


0

Segment

0 0 0 0 0 0 0 0

Program Counter


Address


Status register


S

SN

E

V

M

-

-

-

C

Z

S

PO

D

H

-

-

Flags

Registers[edit]
There are sixteen 16-bit registers, labeled R0 through R15. The registers can be concatenated into eight 32-bit registers, labeled RR0/RR2/../RR14, or into four 64-bit registers, labeled RQ0/RQ4/RQ8/RQ12. The first eight registers can be also subdivided into sixteen 8-bit registers, labeled RL0 though RL7 for the lower byte and RH0 through RH7 for the upper (high) byte. Register R15 is designated as stack pointer. On the Z8001, register R14 is used to include a fixed segment in the stack pointer, and the program counter is expanded to 32 bits to include a similar segment.
There is both a user mode ("normal") and a supervisor mode, selected by bit 14 in the flag register. In supervisor mode, the stack registers point to the system stack and all privileged instructions are available. In user mode, the stack registers point to the normal stack and all privileged instructions will generate a fault. Having separate modes and stacks greatly adds to the performance of context switches between user programs and an operating system.[14]: 6.1 

Die of Zilog Z8002
Memory handling[edit]
Like the Z80, the Z8000 includes a system to automatically refresh dynamic RAM. In most systems this is normally handled by the video display controller or external logic. This was implemented via a separate Refresh Counter (RC) register that held the currently updating page of memory. The feature is turned on by setting the most significant bit of the RC, bit 15, to 1. The following six bits, 14 through 9 are a rate, measured in terms of every 4th clock cycle. With a standard 4 MHz clock, that allows the refresh to be called every 1 to 64 microseconds. The remaining 8 bits select a row in memory to refresh.[14]: 6.5, 6.28 
The Z8000 has a segmented memory map, with a 7-bit "segment number" and a 16-bit offset. Both numbers are represented by pins on the Z8001, meaning that it can directly address a 23-bit memory, or 8 MB.[14]: 6.19  Instructions can only directly access a 16-bit offset. This allows the instruction format to be smaller; a system with direct access to a 23-bit address would need to read three bytes (24 bits) from memory for every address referred to in the code, thus requiring two reads on a 16-bit bus. With segments, the addresses need only a single 16-bit read which is then added to a segment number to produce the complete address. The segment number only needs to be updated when the data crosses the 16-bit/64 KB boundaries.[14]: 6.3 
Internally, addresses are all 32 bits: an upper 16-bit word with a leading 0 in bit 15, the 7-bit segment number, and then 8 zeros. This requires more memory to store, as each 23-bit address uses up 32 bits of register space, but allows the addresses to be cleanly stored in the 16-bit registers and can be more easily pushed and popped from the stack, which occurs in 16-bit words.[14]: 6.6 
The optional 48-pin Z8010 memory management unit (MMU) expands the memory map to 16 MB by translating the 23-bit address from the CPU to a 24-bit one. A Z8010 has 64 segment descriptor registers, each of which contains a 16-bit base physical address, an 8-bit limit, and an 8-bit set of attributes. When the CPU attempts to access a particular segment, a 7-bit value, the Z8010 uses the lower 6 bits of the segment number to select a segment descriptor register, checks the 16-bit offset in the segment against the limit value in that register and checks the permission bits in the attributes to see whether the access is allowed and, if the access is allowed, adds the base physical address to the segment offset to generate a physical address. This allows multiple programs to be spread out in physical RAM, each given its own space to work in while believing it is accessing the entire 8 MB of RAM. The segments are variable length, expanding up to 64 KB in order to allow the entire memory to be accessed from 64 segments. If more than 64 segments are needed, multiple Z8010s can be used, with the upper bit of the 7-bit segment number selecting which Z8010 is used.[15][16] The Z8010 was not available at the time of launch, and was ultimately nine months to a year late.[17]
With the release of the Z8003/Z8004, the Z8015 was added to the lineup, adding paged memory support. The main difference is that the Z8015 breaks down the memory into 64 2 KB blocks, whereas the Z8010 broke memory into 64 variable-sized blocks, up to 64 KB each. Additionally, the Z8015 expands the segment number from 7 to 12 bits, and then using those as the most significant bits of the 23-bit overall address, overriding the upper bits of the original 16-bit offset. The advantage to this access scheme is that it is easy to read or write 2 KB blocks to a hard drive, so this pattern more closely matches what will ultimately happen on a page fault.[15]

Example code[edit]
The following Z8000 assembly source code is for a subroutine named MEMCPY that copies a block of data words from one location to another. The data block is copied one word at a time, and the data movement and looping logic utilizes 16-bit operations. It demonstrates a variety of instructions but in practice it would not be coded this way as the Z8000 has a single instruction that will replace this entire subroutine: LDIR. The sample code will move one word every 34 cycles. Substituting the LDIR instruction will move a word in only 9 cycles.



 
 
 
 
 
 
 
 
 
 
 

 
 
 
 1000
 1000 93F4
 1002
 1002 2114
 1004 2F24
 1006 A911
 1008 A921
 100A F285
 100C
 100C 97F4
 100E 9E08
 1010


 ; memcpy --
 ; Copy a block of memory from one location to another.
 ; This routine is the equivalent of
 ; LDIR @R2,@R1,R0 (LDIR @dst,@src,cnt)
 ;
 ; Entry registers
 ; R1 - Address of source data block
 ; R2 - Address of destination data block
 ; R0 - Number of words to copy
 ;
 ; Return registers
 ; R1 - First word after source data block
 ; R2 - First word after destination data block
 ; R0 - Zero
 
             ORG     1000h       ;Origin at 1000h
 MEMCPY:     PUSH    @R15,R4     ;Save temp register like LDIR
 
 LOOP:       LD      R4,@R1      ;Load source word
             LD      @R2,R4      ;save it
             INC     R1,#2       ;Bump source by 2 for words
             INC     R2,#2       ;Bump dest pointer by 2
             DJNZ    R0,LOOP     ;Bump count, loop if != 0
             
             POP     R4,@R15     ;Restore temp register
             RET
             END


Other features[edit]
One uncommon feature found on the Z8000, more commonly associated with minicomputers, is direct support for vectored interrupts. Interrupts are used by external devices to notify the processor that some condition has been met; a common use is to indicate that data from a slow process like reading a floppy disk is now available and the CPU can read the data into memory.
Normally on small machines, an interrupt causes special code to run that examines various status bits and memory locations to decide what device actually called the interrupt and why. In some designs, especially those intended for realtime computing, an area of memory is set aside as a set of pointers, or vectors, to the code handling a particular device. The devices causing the interrupt then set some state, typically via pins on the CPU, to indicate a particular interrupt number, N. When the interrupt is called, the CPU immediately jumps through Nth entry in the table, avoiding any need to decode the interrupt. This can greatly speed up the interrupt servicing by avoiding having to run additional operations, while also simplifying the interrupt handling code.
In the Z8000, a new register supports vectors, the Program Status Area Pointer. This was similar to a memory address in a register, consisting of two 16-bit values with the upper 16 bits holding the segment number in its upper 8 bits. The lower 16 bits are then divided in half, the upper 8 bits containing an offset and the lower 8 bits zeroed. To call a particular vector, the external device presents the lower 8 bits (or 9 in some cases) on the address/data bus, and the complete vector address is constructed from the three values.[14]: 6.8 

Support chips[edit]
Zilog[edit]
Z8010: Memory management Unit[18]
Z8016: Direct Memory Access Transfer Controller[19]
Z8030: Serial Communications Controller[20]
Z8036: Counter/Timer and Parallel I/O Unit[21]
Z8090: Universal Peripheral Controller[22]
Z8531: Clock Generator and Controller[23]
Sharp[edit]
LH8010/LH8010A: Z8010/Z8010A compatible Memory Management Unit[24]
LH8036/LH8036A: Z8036/Z8036A compatible Counter/Timer and Parallel I/O Unit[25]
LH8072: serial parallel combination controller with internal 128-byte FIFO[26]
LH8073: GPIB controller[27]
LH8090: Z8090 compatible Universal Peripheral Controller.[28]
Z8000 CPU based systems[edit]
In the early 1980s, the Zilog Z8000 CPU was popular for desktop-sized Unix machines. These low-cost Unix systems allowed small businesses to run a true multi-user system and share resources (disk, printers) before networking was common. They usually had only RS-232 serial ports (4–16) and parallel printer ports instead of built-in graphics, as was typical for servers of the time.
Z8000-based computer systems included Zilog's own System 8000 series, as well as other manufacturers: 

1980: C8002 made by Onyx Systems used the Z8002, ran Version 7 Unix, had C, FORTRAN 77 and COBOL compilers available. It had eight serial ports for terminal connections, 1 QIC tape drive and cost ~$25k. The main processor offloaded the disk, tape, and serial I/O operations to a Z80 processor on a second board.[29]
1981: Zilog Systems Z-Lab 8000 Programmer's Development System, available as a Model 20 system with 256 KB of RAM and single 24 MB hard drive, priced at $27,000, or a Model 30 system with 512 KB of RAM and dual hard drives, priced at $33,950, ran the Zeus enhanced version of Unix from Zilog.[30] Zilog followed up with the Series 8000, a multi-user business system that, like the Z-Lab 8000, was based on the 6 MHz Z8001A with three Z8010A memory management units.[31]
1981-1982: Plexus Computers P/40 employed the Z8001[32] along with a number of peripheral controllers designed to maximise data transfer performance, claiming direct memory access throughput of up to 3 MB per second. A "typical eight-user P/40 configuration" with 512 KB of RAM and 72 MB hard drive cost $49,500, with a Unix licence costing $5,000 extra.[33] Plexus followed up with the P/25 in 1982, claiming similar performance to a PDP-11/70 system.[34] A later Plexus model, the P/60, employed the Z8000 as an input/output controller but introduced the Motorola 68000 as the main CPU.[35] The Plexus P/35 retained this general architecture.[36]
1982: BDC-600 from Bleasdale Computer Systems was offered in a configuration featuring the Z8000 running Xenix, providing 256 KB of RAM, a floppy drive system and 10 MB hard drive, supporting eight input/output ports. Based on the Multibus standard, other processor configurations were also announced involving boards utilising the 68000, Z80, 6809 and 8086.[37] Bleasdale later focused on the 68000 architecture with its BDC-680 series.[38]: 8 
1982: Olivetti M20, a non-IBM-compatible PC that ran Olivetti PCOS, a derivative of COSMOS or CP/M 8000.[39]
1982-1983: C5002A, C8002A and Sundance-16 from Onyx Systems used the Z8001 and ran Unix System III.[40][41]
1983: Zilog Systems 8000 Series Two featured a faster 11.1 MHz Z8001B processor with 32 KB of cache memory, available in three models with 512 KB of RAM expandable to 2 MB in the base model and 4 MB in the other models, with prices for minimal configurations ranging from $19,950 to $29,950. These systems ran Unix System III.[42]
1983: Exxon Office Systems 500 series and 8400 series.[43][44]
1980-1986: Olivetti Linea 1 S1000, S6000, M30, M40, M50, M60, M70. These minicomputers from Olivetti all ran BCOS/COSMOS.[39]
1985: the cancelled Commodore 900 computer project
1987–1989: the East German EAW (Elektro-Apparate-Werke) produced the Workstation/Multiuser System P8000 based on the East German U8000 clone of the Z8000.[45]
The Zilog S8000 computer came out with a version of Unix called ZEUS (Zilog Enhanced Unix System). ZEUS was a port of Unix Version 7 and included what were referred to as 'the Berkeley Enhancements'. ZEUS included a version of COBOL called RM/COBOL (Ryan McFarland COBOL). The availability of RM/COBOL allowed many commercial applications to be quickly ported to the S8000 computer although this did not help its long-term success. The S8000 did find some success with the IRS and tax preparers in United States, who used the model for processing of electronically filed tax returns.[46]
The Z8000 featured in Steve Ciarcia's Trump Card project for his Circuit Cellar column in Byte magazine, providing an expansion card with the Z8001 processor and 512 KB of RAM suitable for use with an IBM-compatible PC.[47] Compilers for BASIC and C were supplied with the board, along with an assembler and a Z80 emulator that could run programs written for CP/M-80. It was envisaged that Unix would also be made available for the Trump Card.[48]
Despite a somewhat positive reception as "a reasonably fast supermicro with generally good performance for the price", the 16-bit architectural limitations of the Z8000, with segment handling required to access more than 64 KB in a process, led to questions about the longevity of the Series 8000 products as 32-bit processor architectures from Motorola and National Semiconductor became more widely adopted.[49] Zilog Systems eventually adopted AT&T's 32-bit WE32100 processor, introducing it in a new product, the System 8000/32, alongside 32-bit upgrades to its existing System 8000 Series 2 models. This enabled the introduction of Unix System V on Zilog Systems' products.[50]
The adoption by Zilog's Systems Division of the WE32100, in preference to the continued use of products from Zilog's Component Division, was driven by diverging requirements. Zilog sought to introduce its 32-bit successor to the Z8000, the Z80000, to build on successful adoption of the 16-bit product in military and graphical applications, whereas its Systems Division prioritised Unix support and commercial applications. The conclusion was reached to adopt the WE32100 as "the premier UNIX chip".[51] Zilog subsequently announced an agreement to manufacture the WE32100 chipset for a five year period, being the first alternative source of these products.[52]
There was a Z8000 version of the Xenix Operating System.[53] In 1982, Digital Research and Zilog announced an agreement to make CP/M available for the Z8000.[54]
Namco used the Z8000 series in its Pole Position and Pole Position II arcade games. The machines used two Z8002's, the 64 KB versions of the Z8000.
In one instance, the Z8001 was used to implement a capability-based architecture, employing the segment number in the addressing model of the Z8001 to indicate a capability register in a virtual processor. Such virtual processors were provided through the augmentation of the Z8001 with an "intelligent memory device", this providing memory management and context switching facilities, with additional capability-related instructions being supported through emulation.[55]
The reported inclusion of the device within military designs[56] perhaps provides an explanation for the continued survival of the Z8000, in the shape of the Zilog Z16C01/02 CPUs. Also, the Standard Central Air Data Computer (SCADC) was using the Z8002.[57] However, the end of life notice from Zilog was sent in 2012.[58]

Limited success[edit]
This section possibly contains original research. Please improve it by verifying the claims made and adding inline citations. Statements consisting only of original research should be removed. (February 2023) (Learn how and when to remove this message)
While the Z8000 did see some use in the early 1980s, it was passed over for other designs relatively quickly.[59]
Federico Faggin, then CEO of Zilog, later suggested this was due to Zilog's financing arrangement with Exxon's venture capital arm, Exxon Enterprises. Enterprises had made a number of investments in the computer field, and by the early 1980s was positioning itself as a competitor to IBM in the large system space. Faggin suggested that IBM thus saw Zilog as a competitor, and refused to consider the Z8000 as a result.[59]
However, Faggin did concede that the segmented architecture of the Z8000 was a disadvantage for emerging "graphics-based applications", where systems such as the Apple Macintosh needed to readily access more than 64 KB of memory in a single address space. The longer than anticipated process of bringing the product to market was also acknowledged as having contributed to its lack of adoption, Faggin noting that "being first and having the strongest marketing and the strongest momentum", as Intel had found itself with the 8086, would have been the only remaining route to success for a product of this kind.[60]
An examination of the choices available to designers in the early 1980s suggests there are several prosaic reasons the Z8000 was not more popular:
Comparing assembly language versions of the Byte Sieve, one sees that the 5.5 MHz Z8000's 1.1 seconds is impressive when compared to the 8-bit designs it replaced, including Zilog's 4 MHz Z80 at 6.8 seconds, and the popular 1 MHz MOS 6502 at 13.9. Even the newer 1 MHz Motorola 6809 was much slower, at 5.1 seconds.[61] It also fares well against the 8 MHz Intel 8086 which turned in a time of 1.9 seconds, or the less expensive 5 MHz Intel 8088 at 4 seconds.[61]
While the Intel processors were easily outperformed by the Z8001, they were packaged in 40-pin DIPs, which made them less expensive to implement than the 48-pin Z8001. The Z8002 also used a 40-pin package, but had a 16-bit address bus that could only access 64 KB of RAM, whereas the Intel processors had a 20-bit bus that could access 1 MB of RAM. Internally, the 23-bit addresses of the Z8000 were also more complex to process than Intel's simpler system using 16-bit base addresses and separate segment registers. For those looking for a low-cost option able to access (what was then) large amounts of memory, the Intel designs were competitive and available over a year earlier.[61][better source needed]
For those looking for pure performance, the Z8000 was the fastest CPU available in early 1979. But this was true only for a period of a few months. The 16/32-bit 8 MHz Motorola 68000 came to market later the same year and turns in a time of 0.49 seconds on the same Sieve test, over twice as fast as the Z8000.[61] Although it used an even larger 64-pin DIP layout, for those willing to move to more than 40 pins this was a small price to pay for what was by far the fastest processor of its era. Its 32-bit instructions and registers, combined with a 24-bit address bus with flat 16 MB addressing, also made it much more attractive to designers, something Faggin admits to.[59]
To add to its problems, when the Z8000 was first released it contained a number of bugs. This was due to its complex instruction decoder, which, unlike most processors of the era, did not use microcode and was dependent on logic implemented directly in the CPU. This allowed the design to eliminate the microcode storage and the associated decoding logic, which reduced the transistor count to 17,500.[62] In contrast, the contemporary Intel 8088 used 29,000 transistors,[63] while the Motorola 68000 of a few months later used 68,000.[64]

Second sources[edit]
Several third parties manufactured the Z8000 including AMD,[65] SGS-Ates, Toshiba and Sharp.[66]


Zilog Z8000 second sources


AMD Z8002APC



VEB Mikroelektronik "Karl Marx" Erfurt (MME) UB8001C



Sharp LH8002P


Notes[edit]


^ Several multi-chip 16-bit microprocessors existed by this point, but they were all based on existing minicomputer designs and were generally too expensive for general use. Single-chip versions of these emerged, but they remained expensive.[4]


References[edit]
Citations[edit]


^ "The Z8000 / Z80,000 / Z16C00 CPU homepage". Retrieved 2024-11-10.

^ Slater 2007, pp. 2–3.

^ Slater 2007, p. 4.

^ Slater 2007, pp. 4, 5.

^ Slater 2007, pp. 2, 3.

^ Slater 2007, p. 3.

^ a b c Slater 2007, p. 6.

^ Slater 2007, p. 7.

^ a b Slater 2007, p. 9.

^ Pittman, Phil (July 1981). "Zilog writes". Personal Computer World. pp. 62–63. Retrieved 2024-05-13.

^ Z8000 (Technical report).

^ Slater 2007, pp. 7, 8.

^ Slater 2007, p. 23.

^ a b c d e f Abramovitz, Bob; Enger, Janice; Ingraham, Curtis; Jacobson, Susanna; McGuire, Patrick (1981). Osborne 16-Bit Microprocessor Handbook. Osborne/McGraw-Hill. ISBN 0-931988-43-8.

^ a b Fawcett, B. K. (1983). "A tutorial overview of the Z8003 and Z8004 microprocessors and the Z8010 and Z8015 memory management units". Journal of Microcomputer Applications. 6 (2): 163–178. doi:10.1016/0745-7138(83)90028-3.

^ Z8000 Family Data Book (PDF). Zilog. November 1988. pp. 163–178.

^ OHP_2010_Z8000, p. 20.

^ "Z8010 Z8000 MMU Memory Management Unit Product Specification" (PDF). Zilog. April 1985.

^ "Z8000 Z8016 Z-DTC Direct Memory Access Transfer Controller Product Specification" (PDF). Zilog. April 1985.

^ "Z8030 Z8000 Z-SCC Serial Communications Controller Product Specification" (PDF). Zilog. April 1985.

^ "Z8036 Z8000 Z-CIO Counter/Timer and Parallel I/O Unit" (PDF). Zilog. April 1985.

^ "Z8090 Z8000 Z-UPC Universal Peripheral Controller Product Specification". 1982/83 Data Book (PDF). Zilog. 1982. pp. 313–332.

^ "Z8581 Clock Generator and Controller Product Specification" (PDF). Zilog. April 1985.

^ "Sharp 1986 Semiconductor Data Book" (PDF). p. 332-341. Retrieved 2024-01-01.

^ "Sharp 1986 Semiconductor Data Book" (PDF). p. 356-376. Retrieved 2024-01-01.

^ "Sharp 1986 Semiconductor Data Book" (PDF). p. 413-420. Retrieved 2024-01-01.

^ "Sharp 1986 Semiconductor Data Book" (PDF). p. 421-422. Retrieved 2024-01-13.

^ "Sharp 1986 Semiconductor Data Book" (PDF). p. 434-450. Retrieved 2024-01-22.

^ Eisenbach, Sue (March 1981). "Onyx C8002". Personal Computer World. pp. 52–53, 55–57. Retrieved 2023-02-26.

^ "Z8000 Development System Runs Under Unix". Computerworld. 1981-03-16. p. 50. Retrieved 2023-03-10.

^ "Version of Z-Lab 8000 Handles Multiple Users". Computer Business News. 1981-09-07. p. 10. Retrieved 2023-03-13.

^ Myers, Curtis; Munsey, Grant (February 1982). "A Multiprocessor Minicomputer Designed for UNIX" (PDF). Computer Design. pp. 87–88, 90, 92, 94, 96. Retrieved 2025-02-16.

^ Beeler, Jeffry (1981-09-28). "New Firm Has Mini 'Custom-Made' for Unix". Computerworld. p. 5. Retrieved 2023-03-10.

^ "Plexus Unveils 16-Bit Multiprocessor Mini". Computerworld. 1982-04-05. p. 69. Retrieved 2023-03-10.

^ "Benetics Offers Micro-Based Turnkey System". Computerworld. 1983-10-10. p. 77. Retrieved 2023-03-10.

^ Mackinlay, Bruce (April 1983). "The Plexus Challenge: Reviewing the P/35". UNIX/WORLD. pp. 84–90. Retrieved 2023-03-10.

^ "BDC-600 operates in the Unix tradition". Practical Computing. May 1982. p. 46. Retrieved 2024-03-29.

^ "Why British?". Practical Computing (British Micro Guide). October 1983. Retrieved 2024-03-29.

^ a b Kranenborg, Jurjen; Elvey, Dwight K.; Groessler, Christian. "The Z8000 / Z80,000 / Z16C00 CPU homepage". Retrieved 2009-07-16.

^ C5002A, C8002A Series Product Description. Onyx Systems Inc. February 1983. Retrieved 2023-03-03.

^ Sundance-16 Product Description. Onyx Systems Inc. October 1982. Retrieved 2023-03-02.

^ Sullivan, Kathleen (1984-09-10). "Zilog introduces Unix-based multiuser computer systems". Computerworld. p. 101. Retrieved 2023-03-10.

^ Rifkin, Glenn (1984-08-15). "The Future – Or the Shock?". Computerworld. pp. 21–22, 24. Retrieved 2023-03-10.

^ Hoard, Bruce (1983-02-28). "HP, DG Sign Pacts With PBX Makers". Computerworld. pp. 1, 14. Retrieved 2023-03-10.

^ "E. German Businesses See Tough Times After Merger". Sun Sentinel. Archived from the original on 2015-07-05. Retrieved 2015-07-03.

^ "efile History - Electronic Tax Filing in the United States". Retrieved 2012-12-13.

^ Ciarcia, Steve (May 1984). "Trump Card Part 1: Hardware". Byte. pp. 40–52, 54–55. Retrieved 2023-03-22.

^ Ciarcia, Steve (June 1984). "Trump Card Part 2: Software". Byte. pp. 115–122. Retrieved 2023-03-22.

^ Mackinlay, Bruce (November 1985). "The Zilog System 8000". UNIX/WORLD. pp. 56–57, 59–60, 64, 66–68. Retrieved 2023-03-10.

^ McEnaney, Maura (1985-11-18). "Zilog Unix-based system bows". Computerworld. p. 2. Retrieved 2023-03-10.

^ "Zilog: Synergic but Separate". UNIX Review. January 1986. pp. 91–92. Retrieved 2023-03-10.

^ "Zilog to make AT&T chip". Computerworld. 1986-05-19. p. 125. Retrieved 2023-03-10.

^ Bezroukov, Nikolai (2008-11-15). "XENIX—Microsoft's Short-lived Love Affair with Unix". Softpanorama. Retrieved 2009-07-16.

^ "Supershorts". Computerworld. 1982-11-01. p. 82. Retrieved 2023-03-10.

^ Corsini, Paolo; Lopriore, Lanfranco (June 1987). "The Architecture of a Capability-Based Microprocessor System". IEEE Micro. Vol. 7, no. 3. pp. 35–51. doi:10.1109/MM.1987.304982. Retrieved 2023-04-08.

^ "Z8000". TechEncyclopedia. TechWeb. Archived from the original on 2011-06-11. Retrieved 2009-07-16.

^ Standard Central Air Data Computer (PDF). GEC Avionics. 1985.

^ "Z16C0110PSG and Z16C0210PSG End of Life (EOL) Notification" (PDF). Retrieved 2016-07-17.

^ a b c Hendrie, Gardner (2006). "Oral History of Federico Faggin" (PDF) (Interview). Computer History Museum. Retrieved 2017-01-24.

^ Faggin, Federico; Peuto, Bernard; Shima, Masatoshi; Ungermann, Ralph (2007-04-27). "Oral History Panel on the Development and Promotion of the Zilog Z8000 Microprocessor" (PDF) (Interview).

^ a b c d Gilbreath, Jim; Gilbreath, Gary (January 1983). "Eratosthenes Revisited: Once More through the Sieve". Byte. pp. 283–325.

^ Bayko, John (December 2003). "Zilog Z-8000, another direct competitor". Great Microprocessors of the Past and Present.

^ "Chip Hall of Fame: Intel 8088 Microprocessor". IEEE Spectrum. Institute of Electrical and Electronics Engineers. 2017-06-30. Retrieved 2020-06-19.

^ "Chip Hall of Fame: Motorola MC68000 Microprocessor". IEEE Spectrum. Institute of Electrical and Electronics Engineers. 2017-06-30. Retrieved 2019-06-19.

^ Nelson, Harold (May 1982). "Sweet Sixteen – Micros Come of Age". Microcomputing. pp. 36–38. Retrieved 2023-03-10.

^ "Zilog Z8000". Digital History: Time Line. old-computers.com. April 1979. Retrieved 2009-07-16.


Bibliography[edit]
Fawcett, B. K. (1983). "A tutorial overview of the Z8003 and Z8004 microprocessors and the Z8010 and Z8015 memory management units". Journal of Microcomputer Applications. 6 (2): 163–178. doi:10.1016/0745-7138(83)90028-3.
Granneman, Scott. "Computing History 1968–Present". Retrieved 2009-07-16.
Z8000 Family Data Book (PDF). Zilog. November 1988. pp. 163–178.
Kranenborg, Jurjen; Elvey, Dwight K.; Groessler, Christian. "The Z8000 / Z80,000 / Z16C00 CPU homepage". Retrieved 2009-07-16.
"E. German Businesses See Tough Times After Merger". Sun Sentinel. Archived from the original on 2015-07-05. Retrieved 2015-07-03.
"efile History - Electronic Tax Filing in the United States". Retrieved 2012-12-13.
Bezroukov, Nikolai (2008-11-15). "XENIX—Microsoft's Short-lived Love Affair with Unix". Softpanorama. Retrieved 2009-07-16.
"Z8000". TechEncyclopedia. TechWeb. Archived from the original on 2011-06-11. Retrieved 2009-07-16.
Standard Central Air Data Computer (PDF). GEC Avionics. 1985.
"Z16C0110PSG and Z16C0210PSG End of Life (EOL) Notification" (PDF). Retrieved 2016-07-17.
"Zilog Z8000". Digital History: Time Line. old-computers.com. April 1979. Retrieved 2009-07-16.
Slater, Michael (2007-04-27). "Development and Promotion of the Zilog Z8000 Microprocessor" (PDF) (Interview).
Further reading[edit]
Zilog Z8000 CPU Technical Manual (PDF). San Jose, California: Zilog. Retrieved 2009-07-16.
Zilog Z8000 CPU User's Reference Manual (PDF). San Jose, California: Zilog. 1982. Retrieved 2009-07-16.
"Z16C01/Z16C02 Product Specification" (PDF). San Jose, California: Zilog. 1995. Retrieved 2009-07-15.
Levanthal, Lance. Z8000 Assembly Language Programming, Osborne/McGraw-Hill, 1980.
Lehmann, Oliver. "poto.de: Zilog S8000". Retrieved 2009-07-16.
Fawcett, Bradly K. (1982). "The Z8000 microprocessor: a design handbook" (PDF). Englewood Cliffs, N.J.: Prentice-Hall. Retrieved 2013-03-06.
vteZilogProductsZ80 series
Z80
Z180
Z280
Z800
Z380
eZ80
Z8000 series
Z8000
Z80000
Microcontroller
Z8
Z8 Encore!
Z80182
Encore! 32
Operating systems
Z80-RIO
RelatedZ80 compatibles
ASCII R800
Hitachi HD64180, Zilog Z64180
NEC µPD780C
Sharp LH0080
Toshiba TLCS-870
Rabbit 2000
КР1858ВМ1
U880
MMN80CPU
People
Federico Faggin
Ralph Ungermann
Masatoshi Shima

Authority control databases InternationalFASTNationalGermanyUnited StatesFranceBnF dataIsrael




Retrieved from "https://en.wikipedia.org/w/index.php?title=Zilog_Z8000&oldid=1287043570"
Categories: Computer-related introductions in 1979Zilog microprocessorsJapanese inventions16-bit microprocessorsHidden categories: Articles with short descriptionShort description matches WikidataUse dmy dates from March 2020All accuracy disputesArticles with disputed statements from March 2025Articles that may contain original research from February 2023All articles that may contain original researchAll articles lacking reliable referencesArticles lacking reliable references from June 2023






 This page was last edited on 23 April 2025, at 16:46 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike 4.0 License;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.


Privacy policy
About Wikipedia
Disclaimers
Contact Wikipedia
Code of Conduct
Developers
Statistics
Cookie statement
Mobile view














Search













Search









Toggle the table of contents







Zilog Z8000




























12 languages


Add topic
















