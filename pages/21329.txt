https://en.wikipedia.org/wiki/Open_source_software




Open-source software - Wikipedia



































Jump to content







Main menu





Main menu
move to sidebar
hide



		Navigation
	


Main pageContentsCurrent eventsRandom articleAbout WikipediaContact us





		Contribute
	


HelpLearn to editCommunity portalRecent changesUpload fileSpecial pages



















Search











Search






















Appearance
















Donate

Create account

Log in








Personal tools





Donate Create account Log in





		Pages for logged out editors learn more



ContributionsTalk




























Contents
move to sidebar
hide




(Top)





1
Definitions








2
Open-source software development




Toggle Open-source software development subsection





2.1
Development model








2.2
Advantages








2.3
Development tools










3
Opportunities for participation




Toggle Opportunities for participation subsection





3.1
Contributing








3.2
Industry participation








3.3
Prominent organizations










4
Legal and economic issues




Toggle Legal and economic issues subsection





4.1
Licensing








4.2
Legal issues








4.3
Economic/business implications








4.4
Government uses










5
Open software movement




Toggle Open software movement subsection





5.1
History








5.2
Future










6
Comparisons with other software licensing/development models




Toggle Comparisons with other software licensing/development models subsection





6.1
Closed source / proprietary software








6.2
Free software








6.3
Source-available software








6.4
Open-sourcing








6.5
Other










7
Society and culture




Toggle Society and culture subsection





7.1
Demographics








7.2
Motivations








7.3
Disparities










8
Adoption and application




Toggle Adoption and application subsection





8.1
Key projects








8.2
Extensions for non-software use










9
Value








10
See also








11
References








12
Further reading








13
External links


















Toggle the table of contents







Open-source software



63 languages




AfrikaansالعربيةAsturianuAzərbaycancaবাংলা閩南語 / Bân-lâm-gúभोजपुरीБългарскиBosanskiCatalàČeštinaEestiΕλληνικάEspañolEsperantoEuskaraفارسیFrançaisFryskGalego한국어हिन्दीHrvatskiIdoBahasa IndonesiaÍslenskaעבריתКыргызчаLatinaLietuviųMagyarമലയാളംमराठीBahasa Melayuမြန်မာဘာသာNederlands日本語ଓଡ଼ିଆOʻzbekcha / ўзбекчаਪੰਜਾਬੀPolskiPortuguêsQaraqalpaqshaRomânăRuna SimiРусскийShqipSicilianuසිංහලSlovenčinaSlovenščinaکوردیСрпски / srpskiSrpskohrvatski / српскохрватскиதமிழ்తెలుగుไทยTürkçeУкраїнськаTiếng Việt吴语粵語中文

Edit links











ArticleTalk





English

















ReadEditView history







Tools





Tools
move to sidebar
hide



		Actions
	


ReadEditView history





		General
	


What links hereRelated changesUpload filePermanent linkPage informationCite this pageGet shortened URLDownload QR code





		Print/export
	


Download as PDFPrintable version





		In other projects
	


Wikidata item





















Appearance
move to sidebar
hide









Checked


From Wikipedia, the free encyclopedia

(Redirected from Open source software)
Page version statusThis is an accepted version of this pageThis is the latest accepted revision, reviewed on 11 April 2025.
Software licensed to ensure source code usage rights
Open-source software shares similarities with free software and is part of the broader term free and open-source software.


For broader coverage of this topic, see open-source-software movement.
A screenshot of Manjaro Linux running the Cinnamon desktop environment, Firefox accessing Wikipedia which uses MediaWiki, LibreOffice Writer, Vim, GNOME Calculator, VLC and Nemo file manager, all of which are open-source software
Open-source software (OSS) is computer software that is released under a license in which the copyright holder grants users the rights to use, study, change, and distribute the software and its source code to anyone and for any purpose.[1][2] Open-source software may be developed in a collaborative, public manner. Open-source software is a prominent example of open collaboration, meaning any capable user is able to participate online in development, making the number of possible contributors indefinite. The ability to examine the code facilitates public trust in the software.[3]
Open-source software development can bring in diverse perspectives beyond those of a single company. A 2024 estimate of the value of open-source software to firms is $8.8 trillion, as firms would need to spend 3.5 times the amount they currently do without the use of open source software.[4]
Open-source code can be used for studying and allows capable end users to adapt software to their personal needs in a similar way user scripts and custom style sheets allow for web sites, and eventually publish the modification as a fork for users with similar preferences, and directly submit possible improvements as pull requests.


Definitions[edit]
The logo of the Open Source Initiative
The Open Source Initiative's (OSI) definition is recognized by several governments internationally[5] as the standard or de facto definition. OSI uses The Open Source Definition to determine whether it considers a software license open source. The definition was based on the Debian Free Software Guidelines, written and adapted primarily by Bruce Perens.[6][7][8] Perens did not base his writing on the "four freedoms" from the Free Software Foundation (FSF), which were only widely available later.[9]
Under Perens' definition, open source is a broad software license that makes source code available to the general public with relaxed or non-existent restrictions on the use and modification of the code. It is an explicit "feature" of open source that it puts very few restrictions on the use or distribution by any organization or user, in order to enable the rapid evolution of the software.[10]
According to Feller et al. (2005), the terms "free software" and "open-source software" should be applied to any "software products distributed under terms that allow users" to use, modify, and redistribute the software "in any manner they see fit, without requiring that they pay the author(s) of the software a royalty or fee for engaging in the listed activities."[11]
Despite initially accepting it,[12] Richard Stallman of the FSF now flatly opposes the term "Open Source" being applied to what they refer to as "free software". Although he agrees that the two terms describe "almost the same category of software", Stallman considers equating the terms incorrect and misleading.[13] Stallman also opposes the professed pragmatism of the Open Source Initiative, as he fears that the free software ideals of freedom and community are threatened by compromising on the FSF's idealistic standards for software freedom.[14] The FSF considers free software to be a subset of open-source software, and Richard Stallman explained that DRM software, for example, can be developed as open source, despite that it does not give its users freedom (it restricts them), and thus does not qualify as free software.[13]

Open-source software development[edit]
Main article: Open-source software development model
See also: GitHub
Development model[edit]
In his 1997 essay The Cathedral and the Bazaar, open-source influential contributor Eric S. Raymond suggests a model for developing OSS known as the bazaar model.[15] Raymond likens the development of software by traditional methodologies to building a cathedral, with careful isolated work by individuals or small groups.[15] He suggests that all software should be developed using the bazaar style, with differing agendas and approaches.[15]
In the traditional model of development, which he called the cathedral model, development takes place in a centralized way.[15] Roles are clearly defined.[15] Roles include people dedicated to designing (the architects), people responsible for managing the project, and people responsible for implementation.[15] Traditional software engineering follows the cathedral model.[15]
The bazaar model, however, is different.[15] In this model, roles are not clearly defined.[15] Some proposed characteristics of software developed using the bazaar model should exhibit the following patterns:[16]
Users should be treated as co-developers: The users are treated like co-developers and so they should have access to the source code of the software.[16] Furthermore, users are encouraged to submit additions to the software, code fixes for the software, bug reports, documentation, etc. Having more co-developers increases the rate at which the software evolves.[16] Linus's law states that given enough eyeballs all bugs are shallow.[16] This means that if many users view the source code, they will eventually find all bugs and suggest how to fix them.[16] Some users have advanced programming skills, and furthermore, each user's machine provides an additional testing environment.[16] This new testing environment offers the ability to find and fix a new bug.[16]
Early releases: The first version of the software should be released as early as possible so as to increase one's chances of finding co-developers early.[16]
Frequent integration: Code changes should be integrated (merged into a shared code base) as often as possible so as to avoid the overhead of fixing a large number of bugs at the end of the project life cycle.[16][17] Some open-source projects have nightly builds where integration is done automatically.[16]
Several versions: There should be at least two versions of the software.[16] There should be a buggier version with more features and a more stable version with fewer features.[16] The buggy version (also called the development version) is for users who want the immediate use of the latest features and are willing to accept the risk of using code that is not yet thoroughly tested.[16] The users can then act as co-developers, reporting bugs and providing bug fixes.[16][18]
High modularization: The general structure of the software should be modular allowing for parallel development on independent components.[16]
Dynamic decision-making structure: There is a need for a decision-making structure, whether formal or informal, that makes strategic decisions depending on changing user requirements and other factors.[16] Compare with extreme programming.[16]
The process of Open source development begins with a requirements elicitation where developers consider if they should add new features or if a bug needs to be fixed in their project.[18] This is established by communicating with the OSS community through avenues such as bug reporting and tracking or mailing lists and project pages.[18] Next, OSS developers select or are assigned to a task and identify a solution. Because there are often many different possible routes for solutions in OSS, the best solution must be chosen with careful consideration and sometimes even peer feedback.[18] The developer then begins to develop and commit the code.[18] The code is then tested and reviewed by peers.[18] Developers can edit and evolve their code through feedback from continuous integration.[18] Once the leadership and community are satisfied with the whole project, it can be partially released and user instruction can be documented.[18] If the project is ready to be released, it is frozen, with only serious bug fixes or security repairs occurring.[18] Finally, the project is fully released and only changed through minor bug fixes.[18]

Advantages[edit]
Open source implementation of a standard can increase adoption of that standard.[19] This creates developer loyalty as developers feel empowered and have a sense of ownership of the end product.[20]
Moreover, lower costs of marketing and logistical services are needed for OSS.[21] OSS can be a tool to promote a company's image, including its commercial products.[22] The OSS development approach has helped produce reliable, high quality software quickly and inexpensively.[21]
Open source development offers the potential to quicken innovation and create of social value.[23] In France for instance, a policy that incentivized government to favor free open-source software increased to nearly 600,000 OSS contributions per year, generating social value by increasing the quantity and quality of open-source software.[23] This policy also led to an estimated increase of up to 18% of tech startups and a 14% increase in the number of people employed in the IT sector.[23]
OSS can be highly reliable when it has thousands of independent programmers testing and fixing bugs of the software.[16] Open source is not dependent on the company or author that originally created it.[24] Even if the company fails, the code continues to exist and be developed by its users.[24]
OSS is flexible because modular systems allow programmers to build custom interfaces, or add new abilities to it and it is innovative since open-source programs are the product of collaboration among a large number of different programmers.[16] The mix of divergent perspectives, corporate objectives, and personal goals speeds up innovation.[25]
Moreover, free software can be developed in accordance with purely technical requirements.[26] It does not require thinking about commercial pressure that often degrades the quality of the software.[26] Commercial pressures make traditional software developers pay more attention to customers' requirements than to security requirements, since such features are somewhat invisible to the customer.[26]

Development tools[edit]
In open-source software development, tools are used to support the development of the product and the development process itself.[18]
Version control systems such as Centralized Version control system (CVCS) and the distributed version control system (DVCS)  are examples of tools, often open source, that help manage the source code files and the changes to those files for a software project in order to foster collaboration.[27] CVCS are centralized with a central repository while DVCS are decentralized and have a local repository for every user.[27] Concurrent Versions System (CVS) and later Subversion (SVN) and Git are examples of CVCS.[27] The repositories are hosted and published on source-code-hosting facilities such as GitHub.[27]
Open-source projects use utilities such as issue trackers to organize open-source software development. Commonly used bug trackers include Bugzilla and Redmine.[18]
Tools such as mailing lists and IRC provide means of coordination and discussion of bugs among developers.[18] Project web pages, wiki pages, roadmap lists and newsgroups allow for the distribution of project information that focuses on end users.[18]

Opportunities for participation[edit]
Contributing[edit]
The basic roles OSS participants can fall into multiple categories, beginning with leadership at the center of the project who have control over its execution.[28] Next are the core contributors with a great deal of experience and authority in the project who may guide the other contributors.[28] Non-core contributors have less experience and authority, but regularly contribute and are vital to the project's development.[28] New contributors are the least experienced but with mentorship and guidance can become regular contributors.[28]
Some possible ways of contributing to open-source software include such roles as programming, user interface design and testing, web design, bug triage, accessibility design and testing, UX design, code testing, and security review and testing.[28] However, there are several ways of contributing to OSS projects even without coding skills.[28] For example, some less technical ways of participating are documentation writing and editing, translation, project management, event organization and coordination, marketing, release management, community management, and public relations and outreach.[28]
Funding is another way that individuals and organizations choose to contribute to open source projects. Groups like Open Collective provide a means for individuals to contribute monthly to supporting their favorite projects.[29] Organizations like the Sovereign Tech Fund is able to contribute to millions to supporting the tools the German Government uses.[30] The National Science Foundation established a Pathways to Enable Open-Source Ecosystems (POSE) program to support open source innovation.[31]

Industry participation[edit]
The adoption of open-source software by industry is increasing over time.[32] OSS is popular in several industries such as telecommunications, aerospace, healthcare, and media & entertainment due to the benefits it provides.[33] Adoption of OSS is more likely in larger organizations and is dependent on the company's IT usage, operating efficiencies, and the productivity of employees.[32]
Industries are likely to use OSS due to back-office functionality, sales support, research and development, software features, quick deployment, portability across platforms and avoidance of commercial license management.[32] Additionally, lower cost for hardware and ownership are also important benefits.[32]

Prominent organizations[edit]
Organizations that contribute to the development and expansions of free and open-source software movements exist all over the world.[28] These organizations are dedicated to goals such as teaching and spreading technology.[28] As listed by a former vice president of the Open Source Initiative, some American organizations include the Free Software Foundation, Software Freedom Conservancy, the Open Source Initiative and Software in the Public Interest.[28] Within Europe some notable organizations are Free Software Foundation Europe, open-source projects EU (OSP) and OpenForum Europe (OFE).[28] One Australian organization is Linux Australia while Asia has Open source Asia and FOSSAsia.[28] Free and open source software for Africa (FOSSFA) and OpenAfrica are African organizations and Central and South Asia has such organizations as FLISOL and GRUP de usuarios de software libre Peru.[28] Outside of these, many more organizations dedicated to the advancement of open-source software exist.[28]

Legal and economic issues[edit]
Licensing[edit]
Main article: Open-source license
Further information: Free-software license
See also: Free and open-source software § Licensing, and Software license
FOSS products are generally licensed under two types of licenses: permissive licensing and copyleft licensing.[34] Both of these types of licenses are different than proprietary licensing in that they can allow more users access to the software and allow for the creation of derivative works as specified by the terms of the specific license, as each license has its own rules.[34] Permissive licenses allow recipients of the software to implement the author's copyright rights without having to use the same license for distribution.[34] Examples of this type of license include the BSD, MIT, and Apache licenses.[34] Copyleft licenses are different in that they require recipients to use the same license for at least some parts of the distribution of their works.[34] Strong copyleft licenses require all derivative works to use the same license while weak copyleft licenses require the use of the same license only under certain conditions.[34] Examples of this type of license include the GNU family of licenses, and the MPL and EPL licenses.[34] The similarities between these two categories of licensing include that they provide a broad grant of copyright rights, require that recipients preserve copyright notices, and that a copy of the license is provided to recipients with the code.[34]
One important legal precedent for open-source software was created in 2008, when the Jacobson v Katzer case enforced terms of the Artistic license, including attribution and identification of modifications.[34] The ruling of this case cemented enforcement under copyright law when the conditions of the license were not followed.[34] Because of the similarity of the Artistic license to other open-source software licenses, the ruling created a precedent that applied widely.[34]
Examples of free-software license / open-source licenses include Apache licenses, BSD licenses, GNU General Public Licenses, GNU Lesser General Public License, MIT License, Eclipse Public License and Mozilla Public License.[34]

Legal issues[edit]
Several gray areas exist within software regulation that have great impact on open-source software, such as if software is a good or service, what can be considered a modification, governance through contract vs license, ownership and right of use.[34] While there have been developments on these issues, they often lead to even more questions.[34] The existence of these uncertainties in regulation has a negative impact on industries involved in technologies as a whole.[34]
Within the legal history of software as a whole, there was much debate on whether to protect it as intellectual property under patent law, copyright law or establishing a unique regulation.[34] Ultimately, copyright law became the standard with computer programs being considered a form of literary work, with some tweaks of unique regulation.[34]
Software is generally considered source code and object code, with both being protectable, though there is legal variety in this definition.[34] Some jurisdictions attempt to expand or reduce this conceptualization for their own purposes.[34] For example, The European Court of Justice defines a computer program as not including the functionality of a program, the programing language, or the format of data files.[34] By limiting protections of the different aspects of software, the law favors an open-source approach to software use.[34] The US especially has an open approach to software, with most open-source licenses originating there.[34] However, this has increased the focus on patent rights within these licenses, which has seen backlash from the OSS community, who prefer other forms of IP protection.[34]
Another issue includes technological protection measures (TPM) and digital rights management (DRM) techniques which were internationally legally recognized and protected in the 1996 World Intellectual Property Organization (WIPO) Treaty.[34] Open source software proponents disliked these technologies as they constrained end-users potentially beyond copyright law.[34] Europe responded to such complaints by putting TPM under legal controls, representing a victory for OSS supporters.[34]

Economic/business implications[edit]
In open-source communities, instead of owning the software produced, the producer owns the development of the evolving software.[35] In this way, the future of the software is open, making ownership or intellectual property difficult within OSS.[35] Licensing and branding can prevent others from stealing it, preserving its status as a public good.[35] Open source software can be considered a public good as it is available to everyone and does not decrease in value for others when downloaded by one person.[35] Open source software is unique in that it becomes more valuable as it is used and contributed to, instead of diminishing the resource. This is explained by concepts such as investment in reputation and network effects.[35]
The economic model of open-source software can be explained as developers contribute work to projects, creating public benefits.[35] Developers choose projects based on the perceived benefits or costs, such as improved reputation or value of the project.[35] The motivations of developers can come from many different places and reasons, but the important takeaway is that money is not the only or even most important incentivization.[35]
Because economic theory mainly focuses on the consumption of scarce resources, the OSS dynamic can be hard to understand. In OSS, producers become consumers by reaping the rewards of contributing to a project.[35] For example, a developer becomes well regarded by their peers for a successful contribution to an OSS project.[35] The social benefits and interactions of OSS are difficult to account for in economic models as well.[35] Furthermore, the innovation of technology creates constantly changing value discussions and outlooks, making economic model unable to predict social behavior.[35]
Although OSS is theoretically challenging in economic models, it is explainable as a sustainable social activity that requires resources.[35] These resources include time, money, technology and contributions.[35] Many developers have used technology funded by organizations such as universities and governments, though these same organizations benefit from the work done by OSS.[35] As OSS grows, hybrid systems containing OSS and proprietary systems are becoming more common.[35]
Throughout the mid 2000s, more and more tech companies have begun to use OSS.[24] For example, Dell's move of selling computers with GNU/Linux already installed.[24] Microsoft itself has launched a Linux-based operating system despite previous animosity with the OSS movement.[24] Despite these developments, these companies tend to only use OSS for certain purposes, leading to worries that OSS is being taken advantage of by corporations and not given anything in return.[24]

Government uses[edit]
While many governments are interested in implementing and promoting open-source software due to the many benefits provided, a huge issue to be considered is cybersecurity.[36] While accidental vulnerabilities are possible, so are attacks by outside agents.[36] Because of these fears, governmental interest in contributing to the governance of software has become more prominent.[36] However, these are the broad strokes of the issue, with each country having their own specific politicized interactions with open-source software and their goals for its implementation.[36] For example, the United States has focused on national security in regard to open-source software implementation due to the perceived threat of the increase of open-source software activity in countries like China and Russia, with the Department of Defense considering multiple criteria for using OSS.[36] These criteria include: if it comes from and is maintained by trusted sources, whether it will continue to be maintained, if there are dependencies on sub-components in the software, component security and integrity, and foreign governmental influence.[36]
Another issue for governments in regard to open source is their investments in technologies such as operating systems, semiconductors, cloud, and artificial intelligence.[36] These technologies all have implications for global cooperation, again opening up security issues and political consequences.[36] Many countries have to balance technological innovation with technological dependence in these partnerships.[36] For example, after China's open-source dependent company Huawei was prevented from using Google's Android system in 2019, they began to create their own alternative operating system: Harmony OS.[36]
Germany recently established a Sovereign Tech Fund, to help support the governance and maintenance of the software that they use.

Open software movement[edit]
History[edit]
Further information: History of free and open-source software
In the early days of computing, such as the 1950s and into the 1960s, programmers and developers shared software to learn from each other and evolve the field of computing.[37] For example, Unix included the operating system source code for users.[37] Eventually, the commercialization of software in the years 1970–1980 began to prevent this practice.[37] However, academics still often developed software collaboratively.[37]
In response, the open-source movement was born out of the work of skilled programmer enthusiasts, widely referred to as hackers or hacker culture.[38] One of these enthusiasts, Richard Stallman, was a driving force behind the free software movement, which would later allow for the open-source movement.[17] In 1984, he resigned from MIT to create a free operating system, GNU, after the programmer culture in his lab was stifled by proprietary software preventing source code from being shared and improved upon.[17] GNU was UNIX compatible, meaning that the programmer enthusiasts would still be familiar with how it worked.[17] However, it quickly became apparent that there was some confusion with the label Stallman had chosen of free software, which he described as free as in free speech, not free beer, referring to the meaning of free as freedom rather than price.[17] He later expanded this concept of freedom to the four essential freedoms.[17] Through GNU, open-source norms of incorporating others' source code, community bug fixes and suggestions of code for new features appeared.[17] In 1985, Stallman founded the Free Software Foundation (FSF) to promote changes in software and to help write GNU.[17] In order to prevent his work from being used in proprietary software, Stallman created the concept of copyleft, which allowed the use of his work by anyone, but under specific terms.[17] To do this, he created the GNU General Public License (GNU GPL) in 1989, which was updated in 1991.[17]  In 1991, GNU was combined with the Linux kernel written by Linus Torvalds, as a kernel was missing in GNU.[39] The operating system is now usually referred to as Linux.[17] Throughout this whole period, there were many other free software projects and licenses around at the time, all with different ideas of what the concept of free software was and should be, as well as the morality of proprietary software, such as Berkeley Software Distribution, TeX, and the X Window System.[40]
As free software developed, the Free Software Foundation began to look how to bring free software ideas and perceived benefits to the commercial software industry.[40] It was concluded that FSF's social activism was not appealing to companies and they needed a way to rebrand the free software movement to emphasize the business potential of sharing and collaborating on software source code.[40] The term open source was suggested by Christine Peterson in 1998 at a meeting of supporters of free software.[17] Many in the group felt the name free software was confusing to newcomers and holding back industry interest and they readily accepted the new designation of open source, creating the Open Source Initiative (OSI) and the OSI definition of what open source software is.[17] The Open Source Initiative's (OSI) definition is now recognized by several governments internationally as the standard or de facto definition.[39] The definition was based on the Debian Free Software Guidelines, written and adapted primarily by Bruce Perens.[41] The OSI definition differed from the free software definition in that it allows the inclusion of proprietary software and allows more liberties in its licensing.[17] Some, such as Stallman, agree more with the original concept of free software as a result because it takes a strong moral stance against proprietary software, though there is much overlap between the two movements in terms of the operation of the software.[17]
While the Open Source Initiative sought to encourage the use of the new term and evangelize the principles it adhered to, commercial software vendors found themselves increasingly threatened by the concept of freely distributed software and universal access to an application's source code, with an executive of Microsoft calling open source an intellectual property destroyer in 2001.[42] However, while free and open-source software (FOSS) has historically played a role outside of mainstream private software development, companies as large as Microsoft have begun to develop official open source presences on the Internet.[42] IBM, Oracle, and State Farm are just a few of the companies with a serious public stake in today's competitive open source market, marking a significant shift in the corporate philosophy concerning the development of FOSS.[42]

Future[edit]
The future of the open source software community, and the free software community by extension, has become successful if not confused about what it stands for.[24] For example, Android and Ubuntu are examples milestones of success in the open source software rise to prominence from the sidelines of technological innovation as it existed in the early 2000s.[24] However, some in the community consider them failures in their representation of OSS due to issues such as the downplaying of the OSS center of Android by Google and its partners, the use of an Apache license that allowed forking and resulted in a loss of opportunities for collaboration within Android, the prioritization of convenience over freedom in Ubuntu, and features within Ubuntu that track users for marketing purposes.[24]
The use of OSS has become more common in business with 78% of companies reporting that they run all or part of their operations on FOSS.[24] The popularity of OSS has risen to the point that Microsoft, a once detractor of OSS, has included its use in their systems.[24] However, this success has raised concerns that will determine the future of OSS as the community must answer questions such as what OSS is, what should it be, and what should be done to protect it, if it even needs protecting.[24] All in all, while the free and open source revolution has slowed to a perceived equilibrium in the market place, that does not mean it is over as many theoretical discussions must take place to determine its future.[24]

Comparisons with other software licensing/development models[edit]
Closed source / proprietary software[edit]
Main article: Comparison of open-source and closed-source software
Open source software differs from proprietary software in that it is publicly available, the license requires no fees, modifications and distributions are allowed under license specifications.[43] All of this works to prevent a monopoly on any OSS product, which is a goal of proprietary software.[43] Proprietary software limits their customers' choices to either committing to using that software, upgrading it or switching to other software, forcing customers to have their software preferences impacted by their monetary cost.[43] The ideal case scenario for the proprietary software vendor would be a lock-in, where the customer does not or cannot switch software due to these costs and continues to buy products from that vendor.[43]
Within proprietary software, bug fixes can only be provided by the vendor, moving platforms requires another purchase and the existence of the product relies on the vendor, who can discontinue it at any point.[38] Additionally, proprietary software does not provide its source code and cannot be altered by users.[17] For businesses, this can pose a security risk and source of frustration, as they cannot specialize the product to their needs, and there may be hidden threats or information leaks within the software that they cannot access or change.[17]

Free software[edit]
Main article: Alternative terms for free software
See also: Comparison of free and open-source software licenses
Under OSI's definition, open source is a broad software license that makes source code available to the general public with relaxed or non-existent restrictions on the use and modification of the code.[44] It is an explicit feature of open source that it puts very few restrictions on the use or distribution by any organization or user, in order to enable the rapid evolution of the software.[44]
Richard Stallman, leader of the Free software movement and member of the free software foundation opposes the term open source being applied to what they refer to as free software.[13] Although he agrees that the two terms describe almost the same category of software, Stallman considers equating the terms incorrect and misleading.[13]  He believes that the main difference is that by choosing one term over the other lets others know about what one's goals are: development (open source) or a social stance (free software).[45] Nevertheless, there is significant overlap between open source software and free software.[13] Stallman also opposes the professed pragmatism of the Open Source Initiative, as he fears that the free software ideals of freedom and community are threatened by compromising on the FSF's idealistic standards for software freedom.[45] The FSF considers free software to be a subset of open-source software, and Richard Stallman explained that DRM software, for example, can be developed as open source, despite how it restricts its users, and thus does not qualify as free software.[13]
The FSF said that the term open source fosters an ambiguity of a different kind such that it confuses the mere availability of the source with the freedom to use, modify, and redistribute it.[13] On the other hand, the term free software was criticized for the ambiguity of the word free, which was seen as discouraging for business adoption, and for the historical ambiguous usage of the term.[45]
Developers have used the alternative terms Free and Open Source Software (FOSS), or Free/Libre and Open Source Software (FLOSS), consequently, to describe open-source software that is also free software.[28]

Source-available software[edit]
Main article: Source-available software
Software can be distributed with source code, which is a code that is readable.[46] Software is source available when this source code is available to be seen.[46] However to be source available or FOSS, the source code does not need to be accessible to all, just the users of that software.[46] While all FOSS software is source available because this is a requirement made by the Open Source Definition, not all source available software is FOSS.[46] For example, if the software does not meet other aspects of the Open Source Definition such as permitted modification or redistribution, even if the source code is available, the software is not FOSS.[46]

Open-sourcing[edit]
A recent trend within software companies is open sourcing, or transitioning their previous proprietary software into open source software through releasing it under an open-source license.[47][48] Examples of companies who have done this are Google, Microsoft and Apple.[47] Additionally, open sourcing can refer to programming open source software or installing open source software.[48] Open sourcing can be beneficial in multiple ways, such as attracting more external contributors who bring new perspectives and problem solving capabilities.[47] The downsides of open sourcing include the work that has to be done to maintaining the new community, such as making the base code easily understandable, setting up communication channels for new developers and creating documentation to allow new developers to easily join.[47] However, a review of several open sourced projects found that although a newly open sourced project attracts many newcomers, a great amount are likely to soon leave the project and their forks are also likely to not be impactful.[47]

Other[edit]
Other concepts that may share some similarities to open source are shareware, public domain software, freeware, and software viewers/readers that are freely available but do not provide source code.[17] However, these differ from open source software in access to source code, licensing, copyright and fees.[17]

Society and culture[edit]
Demographics[edit]
Despite being able to collaborate internationally, open source software contributors were found to mostly be located in large clusters such as Silicon Valley that largely collaborate within themselves.[49] Possible reasons for this phenomenon may be that the OSS contributor demographic largely works in software, meaning that the OSS geographic location is closely related to that dispersion and collaborations could be encouraged through work and social networks.[49] Code acceptance can be impacted by status within these social network clusters, creating unfair predispositions in code acceptance based on location.[50] Barriers to international collaboration also include linguistic or cultural differences.[51] Furthermore, each country has been shown to have a higher acceptance rate for code from contributors within their country except India, indicating a bias for culturally similar collaborators.[51]
In 2021, the countries with the highest open source software contributions included the United States, China, Germany, India, and the UK, in that order.[49] The counties with the highest OSS developers per capita from a study in 2021 include, in order, Iceland, Switzerland, Norway, Sweden, and Finland, while in 2008 the countries with top amount of estimated contributors in SourceForge were the United States, Germany, United Kingdom, Canada and France.[49][51] Though there have been several studies done on the distribution and contributions of OSS developers, this is still an open field that can be measured in several different ways.[51] For instance, Information and communication technology participation, population, wealth and proportion of access to the internet have been shown to be correlated with OSS contributions.[51]
Although gender diversity has been found to enhance team productivity, women still face biases while contributing to open source software projects when their gender is identifiable.[52] In 2002, only 1.5% of international open-source software developers were women, while women made up 28% of tech industry roles, demonstrating their low representation in the software field.[53] Despite OSS contributions having no prerequisites, this gender bias may continue to exist due to the common belief of contributors that gender should not matter, and the quality of code should be the only consideration for code acceptance, preventing the community from addressing the systemic disparities in female representation.[38] However, a more recent figure of female OSS participation internationally calculated across 2005 to 2021 is 9.8%, with most being recent contributors, indicating that female participation may be growing.[54]

Motivations[edit]
There are many motivations for contributing to the OSS community.[28] For one, it is an opportunity to learn and practice multiple skills such as coding and other technology related abilities, but also fundamental skills such as communication and collaboration and practical skills needed to excel in technology related fields such as issue tracking or version control.[28] Instead of learning through a classroom or a job, learning through contributing to OSS allows participants to learn at their own pace and follow what interests them.[28] When contributing to OSS, the contributor can learn the current industry best practices, technology and trends and even have the opportunity to contribute to the next big innovation as OSS grows increasingly popular within the tech field.[28] Contributing to OSS without payment means there is no threat of being fired, though reputations can take a hit.[28] On the other hand, a huge motivation to contribute to OSS is the reputation gained as one grows one's public portfolio.[28]

Disparities[edit]
Even though programming was originally seen as a female profession, there remains a large gap in computing.[55] Social identity tends to be a large concern as women in the tech industry face insecurity about attracting unwanted male attention and harassment or being unfeminine in their technology knowledge, having a large impact on confidence.[38] Some male tech participants make clear that they believe women fitting in within the culture is impossible, furthering the insecurity for women and their place in the tech industry.[52] Additionally, even in a voluntary contribution environment like open source software, women tend to end up doing the less technical aspects of projects, such as manual testing or documentation despite women and men showing the same productivity in OSS contributions.[52] Explicit biases include longer feedback time, more scrutinization of code and lower acceptance rate of code.[52] Specifically in the open-source software community, women report that sexually offensive language is common and the women's identity as female is given more attention that as an OSS contributor[38] Bias is hard to address due to the belief that gender should not matter, with most contributors feeling that women getting special treatment is unfair and success should be dependent on skill, preventing any changes to be more inclusive.[38]

Adoption and application[edit]
Key projects[edit]
Open source software projects are built and maintained by a network of programmers, who may often be volunteers, and are widely used in free as well as commercial products.[56]
Unix: Unix is an operating system created by AT&T that began as a precursor to open source software in that the free and open-source software revolution began when developers began trying to create operating systems without Unix code.[24] Unix was created in the 1960s, before the commercialization of software and before the concept of open source software was necessary, therefore it was not considered a true open source software project.[24] It started as a research project before being commercialized in the mid 1980s.[24] Before its commercialization, it represented many of the ideals held by the Free and Open source software revolution, including the decentralized collaboration of global users, rolling releases and a community culture of distaste towards proprietary software.[24]
BSD: Berkeley Software Distribution (BSD) is an operating system that began as a variant of Unix in 1978 that mixed Unix code with code from Berkeley labs to increase functionality.[24] As BSD was focused on increasing functionality, it would publicly share its greatest innovations with the main Unix operating system.[24] This is an example of the free public code sharing that is a central characteristic of FOSS today.[24] As Unix became commercialized in the 1980s, developers or members of the community who did not support proprietary software began to focus on BSD and turning it into an operating system that did not include any of Unix's code.[24] The final version of BSD was released in 1995.[24]
GNU: GNU is a free operating system created by Richard Stallman in 1984 with its name meaning Gnu's Not Unix.[24] The idea was to create a Unix alternative operating system that would be available for anyone to use and allow programmers to share code freely between them.[24] However, the goal of GNU was not to only replace Unix, but to make a superior version that had more technological capabilities.[24] It was released before the philosophical beliefs of the Free and Open source software revolution were truly defined.[24] Because of its creation by prominent FOSS programmer Richard Stallman, GNU was heavily involved in FOSS activism, with one of the greatest achievements of GNU being the creation of the GNU General Public License or GPL, which allowed developers to release software that could be legally shared and modified.[24]
Linux: Linux is an operating system kernel that was introduced in 1991 by Linus Torvalds.[24] Linux was inspired by making a better version of the for profit operating service Minux.[24] It was radically different than what other hackers were producing at the time due to it being totally free of cost and being decentralized.[24] Later, Linux was put under the GPL license, allowing people to make money with Linux and bringing Linux into the FOSS community.[24]
Apache: Apache began in 1995 as a collaboration between a group of developers releasing their own web server due to their frustration with NCSA HTTPd code base.[24] The name Apache was used because of the several patches they applied to this code base.[24] Within a year of its release, it became the worldwide leading web server.[24] Soon, Apache came out with its own license, creating discord in the greater FOSS community, though ultimately proving successful.[24] The Apache license allowed permitted members to directly access source code, a marked difference from GNU and Linux's approaches.[24]

Extensions for non-software use[edit]
While the term open source applied originally only to the source code of software, it is now being applied to many other areas such as open-source ecology, a movement to decentralize technologies so that any human can use them.[13][57] However, it is often misapplied to other areas that have different and competing principles, which overlap only partially.[38]
The same principles that underlie open-source software can be found in many other ventures, such as open source, open content, and open collaboration.[58][3]
This "culture" or ideology takes the view that the principles apply more generally to facilitate concurrent input of different agendas, approaches, and priorities, in contrast with more centralized models of development such as those typically used in commercial companies.[15]

Value[edit]
More than 90 percent of companies use open-source software as a component of their proprietary software.[59] The decision to use open-source software, or even engage with open-source projects to improve existing open-source software, is typically a pragmatic business decision.[60][61] When proprietary software is in direct competition with an open-source alternative, research has found conflicting results on the effect of the competition on the proprietary product's price and quality.[62]
For decades, some companies have made servicing of an open-source software product for enterprise users their business model. These companies control an open-source software product, and instead of charging for licensing or use, charge for improvements, integration, and other servicing.[63] Software as a service (SaaS) products based on open-source components are increasingly common.[64]
Open-source software is preferred for scientific applications, because it increases transparency and aids in the validation and acceptance of scientific results.[65]

See also[edit]

Free and open-source software portal

Comparison of free and open-source software licenses
Free software
Free-software license
Free software movement
List of free and open-source software packages
Free content
Open-source hardware
Open Source Initiative
Open-source license
Open-source software advocacy
Open Source Software Institute
Open-source software security
Open-source video game
All articles with titles containing "Open source"
Proprietary software
Shared Source Initiative
Timeline of free and open-source software
Software composition analysis
Digital public goods
References[edit]


^ St. Laurent, Andrew M. (2008). Understanding Open Source and Free Software Licensing. O'Reilly Media. p. 4. ISBN 978-0-596-55395-1. Archived from the original on 22 April 2023. Retrieved 21 March 2023.

^ Corbly, James Edward (25 September 2014). "The Free Software Alternative: Freeware, Open Source Software, and Libraries". Information Technology and Libraries. 33 (3): 65. doi:10.6017/ital.v33i3.5105. ISSN 2163-5226. Archived from the original on 1 May 2021. Retrieved 28 April 2021.

^ a b Levine, Sheen S.; Prietula, Michael J. (30 December 2013). "Open Collaboration for Innovation: Principles and Performance". Organization Science. 25 (5): 1414–1433. arXiv:1406.7541. doi:10.1287/orsc.2013.0872. ISSN 1047-7039. S2CID 6583883.

^ Hoffmann, Manuel; Nagle, Frank; Zhou, Yanuo (2024). "The Value of Open Source Software". SSRN Electronic Journal. doi:10.2139/ssrn.4693148. ISSN 1556-5068.

^ "International Authority & Recognition". Opensource.org. 21 April 2015. Archived from the original on 23 July 2019. Retrieved 7 December 2017.

^ Perens, Bruce. Open Sources: Voices from the Open Source Revolution Archived 15 September 2014 at the Wayback Machine. O'Reilly Media. 1999.

^ Dibona, Chris; Ockman, Sam (January 1999). The Open Source Definition by Bruce Perens. O'Reilly. ISBN 978-1-56592-582-3.

^ "The Open Source Definition". 7 July 2006. Archived from the original on 15 October 2013. Retrieved 24 August 2008., The Open Source Definition according to the Open Source Initiative

^ "How Many Open Source Licenses Do You Need? – Slashdot". News.slashdot.org. 16 February 2009. Archived from the original on 17 July 2013. Retrieved 25 March 2012.

^ Open Source Initiative (24 July 2006). "The Open Source Definition (Annotated)". opensource.org. Archived from the original on 5 May 2021. Retrieved 22 July 2016.

^ Feller, Joseph; Fitzgerald, Brian; Hissam, Scott; Lakhani, Karim R. (2005). "Introduction". Perspectives on Free and Open Source Software. Cambridge, MA: The MIT Press. pp. xvii. ISBN 0-262-06246-1.

^ Tiemann, Michael. "History of the OSI". Open Source Initiative. Archived from the original on 24 September 2006. Retrieved 13 May 2014.

^ a b c d e f g h Stallman, Richard (2007). "Why Open Source Misses the Point of Free Software".

^ Stallman, Richard (19 June 2007). "Why "Free Software" is better than "Open Source"". Philosophy of the GNU Project. Free Software Foundation. Archived from the original on 27 March 2021. Retrieved 23 July 2007.

^ a b c d e f g h i j Raymond, Eric (2005). "The Cathedral and the Bazaar (originally published in Volume 3, Number 3, March 1998)". First Monday. doi:10.5210/fm.v0i0.1472. ISSN 1396-0466.

^ a b c d e f g h i j k l m n o p q r s Robles, Gregorio (2006). "Empirical Software Engineering Research on Free/Libre/Open Source Software". 2006 22nd IEEE International Conference on Software Maintenance. pp. 347–350. doi:10.1109/icsm.2006.25. ISBN 0-7695-2354-4. S2CID 6589566. Retrieved 21 November 2023.

^ a b c d e f g h i j k l m n o p q r s Napoleao, Bianca M.; Petrillo, Fabio; Halle, Sylvain (2020). "Open Source Software Development Process: A Systematic Review". 2020 IEEE 24th International Enterprise Distributed Object Computing Conference (EDOC). IEEE. pp. 135–144. arXiv:2008.05015. doi:10.1109/EDOC49727.2020.00025. ISBN 978-1-7281-6473-1.

^ a b c d e f g h i j k l m n Napoleao, Bianca M.; Petrillo, Fabio; Halle, Sylvain (2020). "Open Source Software Development Process: A Systematic Review". 2020 IEEE 24th International Enterprise Distributed Object Computing Conference (EDOC). IEEE. pp. 135–144. arXiv:2008.05015. doi:10.1109/EDOC49727.2020.00025. ISBN 978-1-7281-6473-1.

^ US Department of Defense. "Open Source Software FAQ". Chief Information Officer. Archived from the original on 28 August 2016. Retrieved 22 July 2016.

^ Sharma, Srinarayan; Vijayan Sugumaran; Balaji Rajagopalan (2002). "A framework for creating hybrid-open source software communities" (PDF). Information Systems Journal. 12: 7–25. doi:10.1046/j.1365-2575.2002.00116.x. S2CID 5815589. Archived (PDF) from the original on 30 October 2008. Retrieved 8 September 2008.

^ a b Reynolds, Carl; Jeremy Wyatt (February 2011). "Open Source, Open Standards, and Health Care Information Systems". Journal of Medical Internet Research. 13 (1): e24. doi:10.2196/jmir.1521. PMC 3221346. PMID 21447469.

^ Landry, John; Rajiv Gupta (September 2000). "Profiting from Open Source". Harvard Business Review. doi:10.1225/F00503 (inactive 1 November 2024).{{cite journal}}:  CS1 maint: DOI inactive as of November 2024 (link)

^ a b c Nagle, Frank (3 March 2019). "Government Technology Policy, Social Value, and National Competitiveness" (PDF). Information Systems Journal. 12. doi:10.2139/ssrn.3355486. S2CID 85509685. SSRN 3355486.

^ a b c d e f g h i j k l m n o p q r s t u v w x y z aa ab ac ad ae af ag ah ai aj Tozzi, Christopher (2017). For Fun and Profit: A History of the Free and Open Source Software Revolution. United States: MIT Press. ISBN 978-0-262-34118-9.

^ Plotkin, Hal (December 1998). "What (and Why) you should know about open-source software". Harvard Management Update: 8–9.

^ a b c Payne, Christian (February 2002). "On the Security of Open Source Software". Information Systems Journal. 12 (1): 61–78. doi:10.1046/j.1365-2575.2002.00118.x. S2CID 8123076.

^ a b c d Zolkifli, Nazatul Nurlisa; Ngah, Amir; Deraman, Aziz (2018). "Version Control System: A Review". Procedia Computer Science. 135: 408–415. doi:10.1016/j.procs.2018.08.191.

^ a b c d e f g h i j k l m n o p q r s t u Brasseur, V. M. (2018). Forge your future with open source: build your skills, build your network, build the future of technology. The pragmatic programmers. Raleigh, North Carolina: The Pragmatic Bookshelf. ISBN 978-1-68050-301-2.

^ "Open Source". Open Collective. 20 October 2022. Retrieved 28 May 2024.

^ "Technologies". Sovereign Tech Fund. Retrieved 28 May 2024.

^ "NSF invests over $26 million in open-source projects | NSF - National Science Foundation". new.nsf.gov. 25 October 2023. Retrieved 28 May 2024.

^ a b c d Spinellis, Diomidis; Giannikas, Vaggelis (2012). "Organizational adoption of open source software". Journal of Systems and Software. 85 (3): 666–682. doi:10.1016/j.jss.2011.09.037.

^ Zhang, Yiming; Malhotra, Baljeet; Chen, Cheng (2018). "Industry-Wide Analysis of Open Source Security". 2018 16th Annual Conference on Privacy, Security and Trust (PST). IEEE. pp. 1–10. doi:10.1109/PST.2018.8514185. ISBN 978-1-5386-7493-2. S2CID 53234981.

^ a b c d e f g h i j k l m n o p q r s t u v w x y z Brock, Amanda (2023). Open Source Law, Policy and Practice (2nd ed.). UK: Oxford University Press. ISBN 978-0-19-886234-5.

^ a b c d e f g h i j k l m n o p Wynants, M., & Cornelis, J. (Eds.). (2005). How open is the future? : Economic, social and cultural scenarios inspired by free and open-source software. ASP.

^ a b c d e f g h i j Pannier, Alice (2022). Software Power: The Economic and Geopolitical Implications of Open Source Software. Études de l'Ifri. ISBN 979-10-373-0641-8.

^ a b c d Maracke, Catharina (2019). "Free and Open Source Software and FRAND-based patent licenses: How to mediate between Standard Essential Patent and Free and Open Source Software". The Journal of World Intellectual Property. 22 (3–4): 78–102. doi:10.1111/jwip.12114. ISSN 1422-2213.

^ a b c d e f g Bretthauer, David (2001). "Open Source Software: A History". Information Technology and Libraries. 21 (1).

^ a b "International Authority & Recognition". Open Source Initiative. 21 April 2015. Retrieved 18 December 2023.

^ a b c Fogel, Karl (2006). Producing open source software: how to run a successful free software project (1. Aufl., [Nachdr.] ed.). Beijing Köln: O'Reilly. ISBN 978-0-596-00759-1.

^ Kelty, Christopher (2008). Two Bits: The Cultural Significance of Free Software. Duke University Press. ISBN 978-0-8223-8900-2.

^ a b c Miller, Keith W.; Voas, Jeffrey; Costello, Tom (2010). "Free and Open Source Software". IT Professional. 12 (6): 14–16. doi:10.1109/mitp.2010.147. ISSN 1520-9202. S2CID 265508713.

^ a b c d Zhu, Kevin Xiaoguo; Zhou, Zach Zhizhong (2012). "Research Note —Lock-In Strategy in Software Competition: Open-Source Software vs. Proprietary Software". Information Systems Research. 23 (2): 536–545. doi:10.1287/isre.1110.0358. ISSN 1047-7047.

^ a b "The Open Source Definition (Annotated)". Open Source Initiative. 24 July 2006. Retrieved 18 December 2023.

^ a b c Stallman, Richard M.; Gay, Joshua (2002). Free software, free society. Boston (Mass.): Free software foundation. ISBN 978-1-882114-98-6.

^ a b c d e Fortunato, Laura; Galassi, Mark (17 May 2021). "The case for free and open source software in research and scholarship". Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences. 379 (2197). Bibcode:2021RSPTA.37900079F. doi:10.1098/rsta.2020.0079. ISSN 1364-503X. PMID 33775148. S2CID 232387092.

^ a b c d e Pinto, Gustavo; Steinmacher, Igor; Dias, Luiz Felipe; Gerosa, Marco (2018). "On the challenges of open-sourcing proprietary software projects". Empirical Software Engineering. 23 (6): 3221–3247. doi:10.1007/s10664-018-9609-6. ISSN 1382-3256. S2CID 254467440.

^ a b Ågerfalk; Fitzgerald (2008). "Outsourcing to an Unknown Workforce: Exploring Opensurcing as a Global Sourcing Strategy". MIS Quarterly. 32 (2): 385. doi:10.2307/25148845. ISSN 0276-7783. JSTOR 25148845.

^ a b c d Wachs, Johannes; Nitecki, Mariusz; Schueller, William; Polleres, Axel (March 2002). "The Geography of Open Source Software: Evidence from GitHub". Technological Forecasting and Social Change. 176: 121478. arXiv:2107.03200. doi:10.1016/j.techfore.2022.121478.

^ Rastogi, Ayushi; Nagappan, Nachiappan; Gousios, Georgios; van der Hoek, André (11 October 2018). "Relationship between geographical location and evaluation of developer contributions in github". Proceedings of the 12th ACM/IEEE International Symposium on Empirical Software Engineering and Measurement. ACM. pp. 1–8. doi:10.1145/3239235.3240504. ISBN 978-1-4503-5823-1. S2CID 215822439.

^ a b c d e Gonzalez-Barahona, Jesus M.; Robles, Gregorio; Andradas-Izquierdo, Roberto; Ghosh, Rishab Aiyer (August 2008). "Geographic origin of libre software developers". Information Economics and Policy. 20 (4): 356–363. doi:10.1016/j.infoecopol.2008.07.001.

^ a b c d Bosu, Amiangshu; Sultana, Kazi Zakia (2019). "Diversity and Inclusion in Open Source Software (OSS) Projects: Where do We Stand?". 2019 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM). IEEE. pp. 1–11. doi:10.1109/ESEM.2019.8870179. ISBN 978-1-7281-2968-6. S2CID 197640269.

^ Nafus, Dawn (June 2012). "'Patches don't have gender': What is not open in open source software". New Media & Society. 14 (4): 669–683. doi:10.1177/1461444811422887. ISSN 1461-4448. S2CID 206727320.

^ Trinkenreich, Bianca; Wiese, Igor; Sarma, Anita; Gerosa, Marco; Steinmacher, Igor (31 October 2022). "Women's Participation in Open Source Software: A Survey of the Literature". ACM Transactions on Software Engineering and Methodology. 31 (4): 1–37. arXiv:2105.08777. doi:10.1145/3510460. ISSN 1049-331X. S2CID 234778104.

^ Albusays, Khaled; Bjorn, Pernille; Dabbish, Laura; Ford, Denae; Murphy-Hill, Emerson; Serebrenik, Alexander; Storey, Margaret-Anne (April 2021). "The Diversity Crisis in Software Development". IEEE Software. 38 (2): 19–25. doi:10.1109/MS.2020.3045817. ISSN 0740-7459.

^ Popp, Karl Michael, ed. (2020). Best practices for commercial use of open source software: business models, processes and tools for managing open source software. Synomic Academy. Norderstedt: BoD – Books on Demand. ISBN 978-3-7386-1909-6.

^ Powers, Stephen M.; Hampton, Stephanie E. (2019). "Open science, reproducibility, and transparency in ecology". Ecological Applications. 29 (1): e01822. Bibcode:2019EcoAp..29E1822P. doi:10.1002/eap.1822. ISSN 1051-0761. PMID 30362295.

^ Cheliotis, Giorgos (2009). "From open source to open content: Organization, licensing and decision processes in open cultural production". Decision Support Systems. 47 (3): 229–244. doi:10.1016/j.dss.2009.02.006. ISSN 0167-9236.

^ Butler et al. 2022, p. 1.

^ Butler et al. 2022, p. 11152.

^ Davila 2015, p. 7.

^ Zhou & Choudhary 2022, p. 731.

^ August et al. 2021, pp. 1–2.

^ August et al. 2021, p. 1.

^ Morin et al. 2012, Compatibility, Proliferation, Fragmentation, and Directionality.


Further reading[edit]
Androutsellis-Theotokis, Stephanos; Spinellis, Diomidis; Kechagia, Maria; Gousios, Georgios (2010). "Open source software: A survey from 10,000 feet" (PDF). Foundations and Trends in Technology, Information and Operations Management. 4 (3–4): 187–347. doi:10.1561/0200000026. ISBN 978-1-60198-484-5.
August, Terrence; Chen, Wei; Zhu, Kevin (2021). "Competition Among Proprietary and Open-Source Software Firms: The Role of Licensing in Strategic Contribution". Management Science. 67 (5): 3041–3066. doi:10.1287/mnsc.2020.3674.
Birkinbine, Benjamin J. (2020). Incorporating the Digital Commons: Corporate Involvement in Free and Open Source Software. University of Westminster Press. hdl:20.500.12657/37226. ISBN 978-1-912656-43-1.
Butler, Simon; Gamalielsson, Jonas; Lundell, Björn; Brax, Christoffer; Mattsson, Anders; Gustavsson, Tomas; Feist, Jonas; Kvarnström, Bengt; Lönroth, Erik (2022). "Considerations and challenges for the adoption of open source components in software-intensive businesses". Journal of Systems and Software. 186. Elsevier BV: 111152. doi:10.1016/j.jss.2021.111152. ISSN 0164-1212.
Coleman, E. Gabriella. Coding Freedom: The Ethics and Aesthetics of Hacking (Princeton UP, 2012)
Davila, Jacinto (2015). "The Political Logic of Free, Libre, Open Source Software". Societal Benefits of Freely Accessible Technologies and Knowledge Resources. IGI Global. pp. 1–24. ISBN 978-1-4666-8337-2.
Fadi P. Deek; James A. M. McHugh (2008). Open Source: Technology and Policy. Cambridge: Cambridge University Press. ISBN 978-0-511-36775-5.
Chris DiBona and Sam Ockman and Mark Stone, ed. (1999). Open Sources: Voices from the Open Source Revolution. O'Reilly. ISBN 978-1-56592-582-3.
Joshua Gay, ed. (2002). Free Software, Free Society: Selected Essays of Richard M. Stallman. Boston: GNU Press, Free Software Foundation. ISBN 978-1-882114-98-6.
Understanding FOSS | editor  = Sampathkumar Coimbatore India
Benkler, Yochai (2002), "Coase's Penguin, or, Linux and The Nature of the Firm." Yale Law Journal 112.3 (Dec 2002): p367(78) (in Adobe pdf format)
v. Engelhardt, Sebastian (2008). ""The Economic Properties of Software", Jena Economic Research Papers, Volume 2 (2008), Number 2008-045" (PDF). Jena Economics Research Papers.
Lerner, J. & Tirole, J. (2002): 'Some simple economics on open source', Journal of Industrial Economics 50(2), p 197–234
Välimäki, Mikko (2005). The Rise of Open Source Licensing: A Challenge to the Use of Intellectual Property in the Software Industry (PDF). Turre Publishing. Archived from the original (PDF) on 4 March 2009.
Morin, Andrew; Urban, Jennifer; Sliz, Piotr (2012). "A Quick Guide to Software Licensing for the Scientist-Programmer". PLOS Computational Biology. 8 (7): e1002598. Bibcode:2012PLSCB...8E2598M. doi:10.1371/journal.pcbi.1002598. ISSN 1553-7358. PMC 3406002. PMID 22844236.
Polley, Barry (11 December 2007). "Open Source Discussion Paper – version 1.0" (PDF). New Zealand Open Source Society. New Zealand Ministry of Justice. Archived from the original (PDF) on 23 February 2018. Retrieved 12 December 2007.
Rossi, M. A. (2006): Decoding the free/open-source software puzzle: A survey of theoretical and empirical contributions, in J. Bitzer P. Schröder, eds, 'The Economics of Open Source Software Development', p 15–55.
Open Sources: Voices from the Open Source Revolution — an online book containing essays from prominent members of the open-source community
Berry, D M (2004). The Contestation of Code: A Preliminary Investigation into the Discourse of the Free Software and Open Software Movement, Critical Discourse Studies, Volume 1(1).
Schrape, Jan-Felix (2017). "Open Source Projects as Incubators of Innovation. From Niche Phenomenon to Integral Part of the Software Industry" (PDF). Stuttgart: Research Contributions to Organizational Sociology and Innovation Studies 2017-03.
Sustainable Open Source, a Confluence article providing guidelines for fair participation in the open source ecosystem, by Radovan Semancik
Zhou, Zach Zhizhong; Choudhary, Vidyanand (2022). "Impact of Competition from Open Source Software on Proprietary Software". Production and Operations Management. 31 (2): 731–742. doi:10.1111/poms.13575.
External links[edit]



Wikimedia Commons has media related to Free software.




Wikibooks has a book on the topic of: Open Source




Wikibooks has a book on the topic of: Use the Source




Scholia has a topic profile for Open-source software.

The Open Source Initiative's definition of open source
Free / Open Source Research Community — Many online research papers about Open Source
vteSoftware distributionLicenses
Beerware
Floating licensing
Free and open-source
Free
Open source
Freely redistributable
License-free
Proprietary
Public domain
Source-available
Compensation models
Adware
Commercial software
Retail software
Crippleware
Crowdfunding
Freemium
Freeware
Pay what you want
Careware
Donationware
Open-core model
Postcardware
Shareware
Nagware
Trialware
Delivery methods
Digital distribution
File sharing
On-premises
Pre-installed
Product bundling
Retail software
Sneakernet
Software as a service
Deceptive and/or illicit
Unwanted software bundling
Malware
Infostealer
Ransomware
Spyware
Trojan horse
Worm
Scareware
Shovelware
Software release life cycle
Abandonware
End-of-life
Long-term support
Software maintenance
Software maintainer
Software publisher
Vaporware
list
Copy protection
Digital rights management
Software protection dongle
License manager
Product activation
Product key
Software copyright
Software license server
Software patent
Torrent poisoning

vteFree and open-source softwareGeneral
Alternative terms for free software
Comparison of open-source and closed-source software
Comparison of source-code-hosting facilities
Free software
Free software project directories
Gratis versus libre
Long-term support
Open-source software
Open-source software development
Outline
Timeline
Softwarepackages
Audio
Bioinformatics
Codecs
Configuration management
Drivers
Graphics
Wireless
Health
Mathematics
Office suites
Operating systems
Routing
Television
Video games
Web applications
E-commerce
Android apps
iOS apps
Commercial
Formerly proprietary
Formerly open-source
Community
Free software movement
History
Open-source-software movement
Events
Advocacy
Organisations
Free Software Movement of India
Free Software Foundation
Licenses
AFL
Apache
APSL
Artistic
Beerware
BSD
Creative Commons
CDDL
EPL
Free Software Foundation
GNU GPL
GNU AGPL
GNU LGPL
ISC
MIT
MPL
Python
Python Software Foundation License
Shared Source Initiative
Sleepycat
Unlicense
WTFPL
zlib
Types and standards
Comparison of licenses
Contributor License Agreement
Copyleft
Debian Free Software Guidelines
Definition of Free Cultural Works
Free license
The Free Software Definition
The Open Source Definition
Open-source license
Permissive software license
Public domain

Challenges
Digital rights management
License proliferation
Mozilla software rebranding
Proprietary device drivers
Proprietary firmware
Proprietary software
SCO/Linux controversies
Software patents
Software security
Tivoization
Trusted Computing
Related topics
Forking
GNU Manifesto
Microsoft Open Specification Promise
Open-core model
Open-source hardware
Shared Source Initiative
Source-available software
The Cathedral and the Bazaar
Revolution OS

 Portal
 Category

vteIntellectual property activismIssues
Artificial scarcity
Censorship by copyright
Copyright infringement
Copyright troll
Digital rights management
Gripe site
Legal aspects of file sharing
Mashup
digital
music
novel
videos
Monopolies of knowledge
Music piracy
Orphan works
Biopiracy
Bioprospecting
Patents
biological
software
software patent debate
trolling
Public domain
Concepts
All rights reversed
Alternative compensation system
Anti-copyright notice
Business models for open-source software
Copyleft
Commercial use of copyleft works
Commons-based peer production
Electronic sell-through
Free content
Free-software license
Libertarian positions
Open content
Open-design movement
Open music model
Open patent
Open source
hardware
software
Prizes instead of patents
contests
Share-alike
Video on demand
Movements
Access to Knowledge movement
Anti-copyright
Cultural environmentalism
Free-culture movement
Free software movement
OrganizationsPro-copyright
Copyright Alliance
Pro-copyleft
Anna's Archive
Creative Commons
Electronic Frontier Foundation
Free Software Foundation
Library Genesis
Open Rights Group
Organization for Transformative Works
The Pirate Bay
Piratbyrån
Pirate Party
Public Knowledge
Sci-Hub
Shadow library
Students for Free Culture
Z-Library
People
Cory Doctorow
Alexandra Elbakyan
Rick Falkvinge
Lawrence Lessig
Richard Stallman
Peter Suber
Peter Sunde
Aaron Swartz
Documentaries
Steal This Film
Good Copy Bad Copy
RiP!: A Remix Manifesto
TPB AFK
The Internet's Own Boy

vteFree culture and open contentConcepts andpracticesKey concepts
Commons-based peer production
Crowdsourcing
Freedom of information
Gratis versus libre
Open collaboration
Open source
Openness
Participatory culture
Sharism
Research and science
Citizen science
Open science
Access
Notebook science
Research
Science data
Plan S
Data, information,and knowledge
Free content
Knowledge commons
Open communication
Open knowledge
Content
Data
Communicationand  learningMedia
Collaborative writing
Democratic media
Open publishing
Participatory media
Peer review
Education
Open education
educational resources
admissions
open-door policy
List of open universities
Journalism
Citizen media
Citizen journalism and Wiki journalism
Open-source journalism
Products
Free and open-source software (FOSS)
Free/libre software
Open-source software
Open-design movement
Robotics
Open gaming
Open-source architecture
Open-source hardware
Economic principles
Gift economy
Open innovation
Open patent
Open standard
Sharing economy
Politics and governance
Open government
Open-source governance
Freedom of information laws by country
Organizations
Creative Commons
Free Software Foundation
Open Architecture Network
Openmod Initiative
Open Knowledge Foundation
Open Rights Group
Open Source Initiative
Open Web Foundation
Pirate Party
PLOS
SPARC
Activists
Tim Berners-Lee
Alexandra Elbakyan
Lawrence Lessig
Peter Murray-Rust
Douglas Rushkoff
Richard Stallman
Peter Suber
Peter Sunde
Aaron Swartz
John Wilbanks
Projects andmovements
Anna's Archive
DIYbio
Free-culture movement
Free software movement
Library Genesis
Open science movement
Open Source Ecology
Open-source software movement
OpenCores
OpenWetWare
Sci-Hub
Z-Library
Tools
Licenses
Creative Commons
GPL
Definition docs
Free Cultural Works
Free Software
Open
Open Source
Open Data Indices
Open educational resources
Open music model
Open Web movement


vteIndependent productionReading
Alternative comics
Alternative manga
Fanzine
Webcomic
business
Webtoon
Minicomic
Co-ops
Doujinshi
conventions
printers
shops
Self-publishing
Small press
Amateur press association
Audio
Independent music
Record label
Netlabel
Open-source label
Radio
Station
Pirate radio
Cassette culture
Doujin music
Lo-fi music
Tracker (MOD) music
Podsafe
Underground music
Musical instruments
Circuit bending
Experimental musical instrument
VideoAmateur
Home movies
Amateur film
Amateur pornography
Fan film
Machinima
Professional
Independent animation
Cinema of Transgression
Independent film
American eccentric cinema
Indiewood
List of American independent films
Mumblecore
Exploitation film
Guerrilla filmmaking
B movie
Golden Age
'50s
'60s–'70s
'80s–present
Z movie
Midnight movie
Low-budget film
No-budget film
No wave cinema
Double feature
Software
Cowboy coding
Demoscene
Free software
Open-source software
Software cracking
Unofficial patch
Warez scene
Video games
Indie games
development
developers
Homebrew
Fan game
Doujin soft
Mod
Open-source video game
ROM hack
FoodDrinks
Independent soft drink
Homebrewing
Microbrewery
Other
Indie art
Amateur photography
Mail art
Naïve art
Outsider art
Visionary environment
Indie RPG
Independent circuit (wrestling)
Independent TV station
General
Independent media
Indie design
Do it yourself (DIY ethic)
Doujin
Make (magazine)
Maker Faire
Social peer-to-peer processes

Authority control databases: National JapanCzech RepublicIsrael
Retrieved from "https://en.wikipedia.org/w/index.php?title=Open-source_software&oldid=1285048081"
Categories: Free and open-source softwareSoftware licensingTransparency (behavior)Hidden categories: Webarchive template wayback linksCS1 maint: DOI inactive as of November 2024Articles with short descriptionShort description is different from WikidataWikipedia pending changes protected pagesUse dmy dates from August 2016Commons category link is locally defined






 This page was last edited on 11 April 2025, at 11:00 (UTC).
Text is available under the Creative Commons Attribution-ShareAlike 4.0 License;
additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy. Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc., a non-profit organization.


Privacy policy
About Wikipedia
Disclaimers
Contact Wikipedia
Code of Conduct
Developers
Statistics
Cookie statement
Mobile view














Search













Search









Toggle the table of contents







Open-source software




























63 languages


Add topic
















